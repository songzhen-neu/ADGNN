// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dgnn_test.proto

#include "dgnn_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dgnn_test {
constexpr NullMessage::NullMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NullMessageDefaultTypeInternal {
  constexpr NullMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NullMessageDefaultTypeInternal() {}
  union {
    NullMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NullMessageDefaultTypeInternal _NullMessage_default_instance_;
constexpr LayerNodeListMessage::LayerNodeListMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layer_nodes_(){}
struct LayerNodeListMessageDefaultTypeInternal {
  constexpr LayerNodeListMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LayerNodeListMessageDefaultTypeInternal() {}
  union {
    LayerNodeListMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LayerNodeListMessageDefaultTypeInternal _LayerNodeListMessage_default_instance_;
constexpr AccuracyMessage::AccuracyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_acc_(0)
  , val_acc_entire_(0)
  , train_acc_(0)
  , train_acc_entire_(0)
  , test_acc_(0)
  , test_acc_entire_(0)
  , test_f1_(0)
  , val_f1_(0)
  , test_f1_entire_(0)
  , val_f1_entire_(0){}
struct AccuracyMessageDefaultTypeInternal {
  constexpr AccuracyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccuracyMessageDefaultTypeInternal() {}
  union {
    AccuracyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccuracyMessageDefaultTypeInternal _AccuracyMessage_default_instance_;
constexpr EmbGradMessage::EmbGradMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , _nodes_cached_byte_size_(0)
  , embs_()
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , graph_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , layerid_(0)
  , workerid_(0)
  , epoch_(0)
  , featsize_(0)
  , nodesize_(0){}
struct EmbGradMessageDefaultTypeInternal {
  constexpr EmbGradMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmbGradMessageDefaultTypeInternal() {}
  union {
    EmbGradMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmbGradMessageDefaultTypeInternal _EmbGradMessage_default_instance_;
constexpr ContextMessage_PartitionMessage::ContextMessage_PartitionMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datapath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partitionmethod_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , datanum_(0)
  , workernum_(0)
  , featuredim_(0)
  , classnum_(0)
  , edgenum_(0){}
struct ContextMessage_PartitionMessageDefaultTypeInternal {
  constexpr ContextMessage_PartitionMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContextMessage_PartitionMessageDefaultTypeInternal() {}
  union {
    ContextMessage_PartitionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContextMessage_PartitionMessageDefaultTypeInternal _ContextMessage_PartitionMessage_default_instance_;
constexpr ContextMessage::ContextMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_()
  , partition_(nullptr)
  , workerid_(0)
  , workernum_(0){}
struct ContextMessageDefaultTypeInternal {
  constexpr ContextMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContextMessageDefaultTypeInternal() {}
  union {
    ContextMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContextMessageDefaultTypeInternal _ContextMessage_default_instance_;
constexpr NetInfoMessage::NetInfoMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hiddendim_()
  , _hiddendim_cached_byte_size_(0)
  , params_()
  , wid_(0)
  , featuredim_(0)
  , classdim_(0)
  , workernum_(0)
  , servernum_(0){}
struct NetInfoMessageDefaultTypeInternal {
  constexpr NetInfoMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInfoMessageDefaultTypeInternal() {}
  union {
    NetInfoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInfoMessageDefaultTypeInternal _NetInfoMessage_default_instance_;
constexpr ParamGrad::ParamGrad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elems_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wid_(0)
  , sid_(0)
  , lr_(0){}
struct ParamGradDefaultTypeInternal {
  constexpr ParamGradDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParamGradDefaultTypeInternal() {}
  union {
    ParamGrad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParamGradDefaultTypeInternal _ParamGrad_default_instance_;
constexpr IntIntPair::IntIntPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(0)
  , value_(0){}
struct IntIntPairDefaultTypeInternal {
  constexpr IntIntPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntIntPairDefaultTypeInternal() {}
  union {
    IntIntPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntIntPairDefaultTypeInternal _IntIntPair_default_instance_;
constexpr DataMessage_FeatureMessage_FeatureItem::DataMessage_FeatureMessage_FeatureItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_()
  , vid_(0){}
struct DataMessage_FeatureMessage_FeatureItemDefaultTypeInternal {
  constexpr DataMessage_FeatureMessage_FeatureItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMessage_FeatureMessage_FeatureItemDefaultTypeInternal() {}
  union {
    DataMessage_FeatureMessage_FeatureItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMessage_FeatureMessage_FeatureItemDefaultTypeInternal _DataMessage_FeatureMessage_FeatureItem_default_instance_;
constexpr DataMessage_FeatureMessage::DataMessage_FeatureMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : features_(){}
struct DataMessage_FeatureMessageDefaultTypeInternal {
  constexpr DataMessage_FeatureMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMessage_FeatureMessageDefaultTypeInternal() {}
  union {
    DataMessage_FeatureMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMessage_FeatureMessageDefaultTypeInternal _DataMessage_FeatureMessage_default_instance_;
constexpr DataMessage_LabelMessage_LabelItem::DataMessage_LabelMessage_LabelItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vid_(0)
  , label_(0){}
struct DataMessage_LabelMessage_LabelItemDefaultTypeInternal {
  constexpr DataMessage_LabelMessage_LabelItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMessage_LabelMessage_LabelItemDefaultTypeInternal() {}
  union {
    DataMessage_LabelMessage_LabelItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMessage_LabelMessage_LabelItemDefaultTypeInternal _DataMessage_LabelMessage_LabelItem_default_instance_;
constexpr DataMessage_LabelMessage::DataMessage_LabelMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_(){}
struct DataMessage_LabelMessageDefaultTypeInternal {
  constexpr DataMessage_LabelMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMessage_LabelMessageDefaultTypeInternal() {}
  union {
    DataMessage_LabelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMessage_LabelMessageDefaultTypeInternal _DataMessage_LabelMessage_default_instance_;
constexpr DataMessage_AdjMessage_AdjItem::DataMessage_AdjMessage_AdjItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : neibors_()
  , _neibors_cached_byte_size_(0)
  , vid_(0){}
struct DataMessage_AdjMessage_AdjItemDefaultTypeInternal {
  constexpr DataMessage_AdjMessage_AdjItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMessage_AdjMessage_AdjItemDefaultTypeInternal() {}
  union {
    DataMessage_AdjMessage_AdjItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMessage_AdjMessage_AdjItemDefaultTypeInternal _DataMessage_AdjMessage_AdjItem_default_instance_;
constexpr DataMessage_AdjMessage::DataMessage_AdjMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : adjs_(){}
struct DataMessage_AdjMessageDefaultTypeInternal {
  constexpr DataMessage_AdjMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMessage_AdjMessageDefaultTypeInternal() {}
  union {
    DataMessage_AdjMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMessage_AdjMessageDefaultTypeInternal _DataMessage_AdjMessage_default_instance_;
constexpr DataMessage::DataMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodesforeachworker_()
  , degreemap_()
  , nodelist_(nullptr)
  , adjlist_(nullptr)
  , featurelist_(nullptr)
  , labellist_(nullptr){}
struct DataMessageDefaultTypeInternal {
  constexpr DataMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataMessageDefaultTypeInternal() {}
  union {
    DataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataMessageDefaultTypeInternal _DataMessage_default_instance_;
constexpr NodeMessage::NodeMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , _nodes_cached_byte_size_(0)
  , layid_(0)
  , wid_(0){}
struct NodeMessageDefaultTypeInternal {
  constexpr NodeMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeMessageDefaultTypeInternal() {}
  union {
    NodeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeMessageDefaultTypeInternal _NodeMessage_default_instance_;
constexpr MMessageForAD::MMessageForAD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wid_(0)
  , m_(0)
  , m_benefit_(0){}
struct MMessageForADDefaultTypeInternal {
  constexpr MMessageForADDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MMessageForADDefaultTypeInternal() {}
  union {
    MMessageForAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MMessageForADDefaultTypeInternal _MMessageForAD_default_instance_;
}  // namespace dgnn_test
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dgnn_5ftest_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dgnn_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dgnn_5ftest_2eproto = nullptr;

const uint32_t TableStruct_dgnn_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NullMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::LayerNodeListMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::LayerNodeListMessage, layer_nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, val_acc_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, val_acc_entire_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, train_acc_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, train_acc_entire_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, test_acc_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, test_acc_entire_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, test_f1_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, val_f1_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, test_f1_entire_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::AccuracyMessage, val_f1_entire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, nodes_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, layerid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, workerid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, status_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, epoch_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, featsize_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, nodesize_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, embs_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::EmbGradMessage, graph_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage_PartitionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage_PartitionMessage, datanum_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage_PartitionMessage, workernum_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage_PartitionMessage, datapath_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage_PartitionMessage, featuredim_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage_PartitionMessage, classnum_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage_PartitionMessage, partitionmethod_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage_PartitionMessage, edgenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage, workerid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage, address_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage, workernum_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ContextMessage, partition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NetInfoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NetInfoMessage, wid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NetInfoMessage, featuredim_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NetInfoMessage, hiddendim_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NetInfoMessage, classdim_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NetInfoMessage, workernum_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NetInfoMessage, servernum_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NetInfoMessage, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ParamGrad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ParamGrad, id_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ParamGrad, wid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ParamGrad, sid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ParamGrad, lr_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::ParamGrad, elems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::IntIntPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::IntIntPair, key_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::IntIntPair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_FeatureMessage_FeatureItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_FeatureMessage_FeatureItem, vid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_FeatureMessage_FeatureItem, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_FeatureMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_FeatureMessage, features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_LabelMessage_LabelItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_LabelMessage_LabelItem, vid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_LabelMessage_LabelItem, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_LabelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_LabelMessage, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_AdjMessage_AdjItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_AdjMessage_AdjItem, vid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_AdjMessage_AdjItem, neibors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_AdjMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage_AdjMessage, adjs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage, nodelist_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage, adjlist_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage, featurelist_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage, labellist_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage, nodesforeachworker_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::DataMessage, degreemap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NodeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NodeMessage, nodes_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NodeMessage, layid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::NodeMessage, wid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::MMessageForAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dgnn_test::MMessageForAD, wid_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::MMessageForAD, m_),
  PROTOBUF_FIELD_OFFSET(::dgnn_test::MMessageForAD, m_benefit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dgnn_test::NullMessage)},
  { 6, -1, -1, sizeof(::dgnn_test::LayerNodeListMessage)},
  { 13, -1, -1, sizeof(::dgnn_test::AccuracyMessage)},
  { 29, -1, -1, sizeof(::dgnn_test::EmbGradMessage)},
  { 44, -1, -1, sizeof(::dgnn_test::ContextMessage_PartitionMessage)},
  { 57, -1, -1, sizeof(::dgnn_test::ContextMessage)},
  { 67, -1, -1, sizeof(::dgnn_test::NetInfoMessage)},
  { 80, -1, -1, sizeof(::dgnn_test::ParamGrad)},
  { 91, -1, -1, sizeof(::dgnn_test::IntIntPair)},
  { 99, -1, -1, sizeof(::dgnn_test::DataMessage_FeatureMessage_FeatureItem)},
  { 107, -1, -1, sizeof(::dgnn_test::DataMessage_FeatureMessage)},
  { 114, -1, -1, sizeof(::dgnn_test::DataMessage_LabelMessage_LabelItem)},
  { 122, -1, -1, sizeof(::dgnn_test::DataMessage_LabelMessage)},
  { 129, -1, -1, sizeof(::dgnn_test::DataMessage_AdjMessage_AdjItem)},
  { 137, -1, -1, sizeof(::dgnn_test::DataMessage_AdjMessage)},
  { 144, -1, -1, sizeof(::dgnn_test::DataMessage)},
  { 156, -1, -1, sizeof(::dgnn_test::NodeMessage)},
  { 165, -1, -1, sizeof(::dgnn_test::MMessageForAD)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_NullMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_LayerNodeListMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_AccuracyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_EmbGradMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_ContextMessage_PartitionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_ContextMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_NetInfoMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_ParamGrad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_IntIntPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_DataMessage_FeatureMessage_FeatureItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_DataMessage_FeatureMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_DataMessage_LabelMessage_LabelItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_DataMessage_LabelMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_DataMessage_AdjMessage_AdjItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_DataMessage_AdjMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_DataMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_NodeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dgnn_test::_MMessageForAD_default_instance_),
};

const char descriptor_table_protodef_dgnn_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dgnn_test.proto\022\tdgnn_test\"\r\n\013NullMess"
  "age\"C\n\024LayerNodeListMessage\022+\n\013layer_nod"
  "es\030\001 \003(\0132\026.dgnn_test.NodeMessage\"\342\001\n\017Acc"
  "uracyMessage\022\017\n\007val_acc\030\001 \001(\002\022\026\n\016val_acc"
  "_entire\030\002 \001(\002\022\021\n\ttrain_acc\030\003 \001(\002\022\030\n\020trai"
  "n_acc_entire\030\004 \001(\002\022\020\n\010test_acc\030\005 \001(\002\022\027\n\017"
  "test_acc_entire\030\006 \001(\002\022\017\n\007test_f1\030\007 \001(\002\022\016"
  "\n\006val_f1\030\010 \001(\002\022\026\n\016test_f1_entire\030\t \001(\002\022\025"
  "\n\rval_f1_entire\030\n \001(\002\"\247\001\n\016EmbGradMessage"
  "\022\r\n\005nodes\030\001 \003(\005\022\017\n\007layerId\030\002 \001(\005\022\020\n\010work"
  "erId\030\003 \001(\005\022\016\n\006status\030\004 \001(\t\022\r\n\005epoch\030\005 \001("
  "\005\022\020\n\010featsize\030\006 \001(\005\022\020\n\010nodesize\030\007 \001(\005\022\014\n"
  "\004embs\030\010 \003(\002\022\022\n\ngraph_mode\030\t \001(\t\"\240\002\n\016Cont"
  "extMessage\022\020\n\010workerId\030\001 \001(\005\022\017\n\007address\030"
  "\002 \003(\t\022\021\n\tworkerNum\030\003 \001(\005\022=\n\tpartition\030\004 "
  "\001(\0132*.dgnn_test.ContextMessage.Partition"
  "Message\032\230\001\n\020PartitionMessage\022\017\n\007dataNum\030"
  "\001 \001(\005\022\021\n\tworkerNum\030\002 \001(\005\022\020\n\010dataPath\030\003 \001"
  "(\t\022\022\n\nfeatureDim\030\004 \001(\005\022\020\n\010classNum\030\005 \001(\005"
  "\022\027\n\017partitionMethod\030\006 \001(\t\022\017\n\007edgeNum\030\007 \001"
  "(\005\"\242\001\n\016NetInfoMessage\022\013\n\003wid\030\001 \001(\005\022\022\n\nfe"
  "atureDim\030\002 \001(\005\022\021\n\thiddenDim\030\003 \003(\005\022\020\n\010cla"
  "ssDim\030\004 \001(\005\022\021\n\tworkerNum\030\005 \001(\005\022\021\n\tserver"
  "Num\030\006 \001(\005\022$\n\006params\030\007 \003(\0132\024.dgnn_test.Pa"
  "ramGrad\"L\n\tParamGrad\022\n\n\002id\030\001 \001(\t\022\013\n\003wid\030"
  "\002 \001(\005\022\013\n\003sid\030\003 \001(\005\022\n\n\002lr\030\004 \001(\002\022\r\n\005elems\030"
  "\005 \003(\001\"(\n\nIntIntPair\022\013\n\003key\030\001 \001(\005\022\r\n\005valu"
  "e\030\002 \001(\005\"\252\005\n\013DataMessage\022(\n\010nodeList\030\001 \001("
  "\0132\026.dgnn_test.NodeMessage\0222\n\007adjList\030\002 \001"
  "(\0132!.dgnn_test.DataMessage.AdjMessage\022:\n"
  "\013featureList\030\003 \001(\0132%.dgnn_test.DataMessa"
  "ge.FeatureMessage\0226\n\tlabelList\030\004 \001(\0132#.d"
  "gnn_test.DataMessage.LabelMessage\0222\n\022nod"
  "esForEachWorker\030\005 \003(\0132\026.dgnn_test.NodeMe"
  "ssage\022(\n\tdegreeMap\030\006 \003(\0132\025.dgnn_test.Int"
  "IntPair\032\202\001\n\016FeatureMessage\022C\n\010features\030\001"
  " \003(\01321.dgnn_test.DataMessage.FeatureMess"
  "age.FeatureItem\032+\n\013FeatureItem\022\013\n\003vid\030\001 "
  "\001(\005\022\017\n\007feature\030\002 \003(\002\032v\n\014LabelMessage\022=\n\006"
  "labels\030\001 \003(\0132-.dgnn_test.DataMessage.Lab"
  "elMessage.LabelItem\032\'\n\tLabelItem\022\013\n\003vid\030"
  "\001 \001(\005\022\r\n\005label\030\002 \001(\005\032n\n\nAdjMessage\0227\n\004ad"
  "js\030\001 \003(\0132).dgnn_test.DataMessage.AdjMess"
  "age.AdjItem\032\'\n\007AdjItem\022\013\n\003vid\030\001 \001(\005\022\017\n\007n"
  "eibors\030\002 \003(\005\"8\n\013NodeMessage\022\r\n\005nodes\030\001 \003"
  "(\005\022\r\n\005layid\030\002 \001(\005\022\013\n\003wid\030\003 \001(\005\":\n\rMMessa"
  "geForAD\022\013\n\003wid\030\001 \001(\005\022\t\n\001m\030\002 \001(\005\022\021\n\tm_ben"
  "efit\030\003 \001(\0052\242\010\n\020DgnnProtoService\022P\n\031pullD"
  "ataFromMasterGeneral\022\031.dgnn_test.Context"
  "Message\032\026.dgnn_test.DataMessage\"\000\022D\n\rini"
  "tParameter\022\031.dgnn_test.NetInfoMessage\032\026."
  "dgnn_test.NullMessage\"\000\022;\n\007barrier\022\026.dgn"
  "n_test.NullMessage\032\026.dgnn_test.NullMessa"
  "ge\"\000\022G\n\rworkerPullEmb\022\031.dgnn_test.EmbGra"
  "dMessage\032\031.dgnn_test.EmbGradMessage\"\000\022B\n"
  "\013setAndSendG\022\031.dgnn_test.EmbGradMessage\032"
  "\026.dgnn_test.NullMessage\"\000\022H\n\014sendAccurac"
  "y\022\032.dgnn_test.AccuracyMessage\032\032.dgnn_tes"
  "t.AccuracyMessage\"\000\022>\n\nfreeMaster\022\026.dgnn"
  "_test.NullMessage\032\026.dgnn_test.NullMessag"
  "e\"\000\022A\n\021server_PullParams\022\024.dgnn_test.Par"
  "amGrad\032\024.dgnn_test.ParamGrad\"\000\022D\n\022server"
  "_updateParam\022\024.dgnn_test.ParamGrad\032\026.dgn"
  "n_test.NullMessage\"\000\022@\n\014sendNodes2Wk\022\026.d"
  "gnn_test.NodeMessage\032\026.dgnn_test.NullMes"
  "sage\"\000\022P\n\026workerPullRmtTrainFeat\022\031.dgnn_"
  "test.EmbGradMessage\032\031.dgnn_test.EmbGradM"
  "essage\"\000\022B\n\016sendInNodes2Wk\022\026.dgnn_test.N"
  "odeMessage\032\026.dgnn_test.NullMessage\"\000\022\?\n\010"
  "pushEmbs\022\031.dgnn_test.EmbGradMessage\032\026.dg"
  "nn_test.NullMessage\"\000\022B\n\016aggregateNodes\022"
  "\026.dgnn_test.NodeMessage\032\026.dgnn_test.Node"
  "Message\"\000\022<\n\004setM\022\030.dgnn_test.MMessageFo"
  "rAD\032\030.dgnn_test.MMessageForAD\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dgnn_5ftest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dgnn_5ftest_2eproto = {
  false, false, 2959, descriptor_table_protodef_dgnn_5ftest_2eproto, "dgnn_test.proto", 
  &descriptor_table_dgnn_5ftest_2eproto_once, nullptr, 0, 18,
  schemas, file_default_instances, TableStruct_dgnn_5ftest_2eproto::offsets,
  file_level_metadata_dgnn_5ftest_2eproto, file_level_enum_descriptors_dgnn_5ftest_2eproto, file_level_service_descriptors_dgnn_5ftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dgnn_5ftest_2eproto_getter() {
  return &descriptor_table_dgnn_5ftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dgnn_5ftest_2eproto(&descriptor_table_dgnn_5ftest_2eproto);
namespace dgnn_test {

// ===================================================================

class NullMessage::_Internal {
 public:
};

NullMessage::NullMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dgnn_test.NullMessage)
}
NullMessage::NullMessage(const NullMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dgnn_test.NullMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NullMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NullMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NullMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[0]);
}

// ===================================================================

class LayerNodeListMessage::_Internal {
 public:
};

LayerNodeListMessage::LayerNodeListMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layer_nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.LayerNodeListMessage)
}
LayerNodeListMessage::LayerNodeListMessage(const LayerNodeListMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layer_nodes_(from.layer_nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dgnn_test.LayerNodeListMessage)
}

inline void LayerNodeListMessage::SharedCtor() {
}

LayerNodeListMessage::~LayerNodeListMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.LayerNodeListMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LayerNodeListMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LayerNodeListMessage::ArenaDtor(void* object) {
  LayerNodeListMessage* _this = reinterpret_cast< LayerNodeListMessage* >(object);
  (void)_this;
}
void LayerNodeListMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LayerNodeListMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LayerNodeListMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.LayerNodeListMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayerNodeListMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dgnn_test.NodeMessage layer_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerNodeListMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.LayerNodeListMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dgnn_test.NodeMessage layer_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layer_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_layer_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.LayerNodeListMessage)
  return target;
}

size_t LayerNodeListMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.LayerNodeListMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dgnn_test.NodeMessage layer_nodes = 1;
  total_size += 1UL * this->_internal_layer_nodes_size();
  for (const auto& msg : this->layer_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayerNodeListMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LayerNodeListMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayerNodeListMessage::GetClassData() const { return &_class_data_; }

void LayerNodeListMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LayerNodeListMessage *>(to)->MergeFrom(
      static_cast<const LayerNodeListMessage &>(from));
}


void LayerNodeListMessage::MergeFrom(const LayerNodeListMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.LayerNodeListMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layer_nodes_.MergeFrom(from.layer_nodes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayerNodeListMessage::CopyFrom(const LayerNodeListMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.LayerNodeListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerNodeListMessage::IsInitialized() const {
  return true;
}

void LayerNodeListMessage::InternalSwap(LayerNodeListMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layer_nodes_.InternalSwap(&other->layer_nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerNodeListMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[1]);
}

// ===================================================================

class AccuracyMessage::_Internal {
 public:
};

AccuracyMessage::AccuracyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.AccuracyMessage)
}
AccuracyMessage::AccuracyMessage(const AccuracyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&val_acc_, &from.val_acc_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_f1_entire_) -
    reinterpret_cast<char*>(&val_acc_)) + sizeof(val_f1_entire_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.AccuracyMessage)
}

inline void AccuracyMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&val_acc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&val_f1_entire_) -
    reinterpret_cast<char*>(&val_acc_)) + sizeof(val_f1_entire_));
}

AccuracyMessage::~AccuracyMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.AccuracyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccuracyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccuracyMessage::ArenaDtor(void* object) {
  AccuracyMessage* _this = reinterpret_cast< AccuracyMessage* >(object);
  (void)_this;
}
void AccuracyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccuracyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccuracyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.AccuracyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&val_acc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_f1_entire_) -
      reinterpret_cast<char*>(&val_acc_)) + sizeof(val_f1_entire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccuracyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float val_acc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          val_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float val_acc_entire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          val_acc_entire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float train_acc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          train_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float train_acc_entire = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          train_acc_entire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float test_acc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          test_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float test_acc_entire = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          test_acc_entire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float test_f1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          test_f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float val_f1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          val_f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float test_f1_entire = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          test_f1_entire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float val_f1_entire = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          val_f1_entire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccuracyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.AccuracyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float val_acc = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_acc = this->_internal_val_acc();
  uint32_t raw_val_acc;
  memcpy(&raw_val_acc, &tmp_val_acc, sizeof(tmp_val_acc));
  if (raw_val_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_val_acc(), target);
  }

  // float val_acc_entire = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_acc_entire = this->_internal_val_acc_entire();
  uint32_t raw_val_acc_entire;
  memcpy(&raw_val_acc_entire, &tmp_val_acc_entire, sizeof(tmp_val_acc_entire));
  if (raw_val_acc_entire != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_val_acc_entire(), target);
  }

  // float train_acc = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_train_acc = this->_internal_train_acc();
  uint32_t raw_train_acc;
  memcpy(&raw_train_acc, &tmp_train_acc, sizeof(tmp_train_acc));
  if (raw_train_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_train_acc(), target);
  }

  // float train_acc_entire = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_train_acc_entire = this->_internal_train_acc_entire();
  uint32_t raw_train_acc_entire;
  memcpy(&raw_train_acc_entire, &tmp_train_acc_entire, sizeof(tmp_train_acc_entire));
  if (raw_train_acc_entire != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_train_acc_entire(), target);
  }

  // float test_acc = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_acc = this->_internal_test_acc();
  uint32_t raw_test_acc;
  memcpy(&raw_test_acc, &tmp_test_acc, sizeof(tmp_test_acc));
  if (raw_test_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_test_acc(), target);
  }

  // float test_acc_entire = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_acc_entire = this->_internal_test_acc_entire();
  uint32_t raw_test_acc_entire;
  memcpy(&raw_test_acc_entire, &tmp_test_acc_entire, sizeof(tmp_test_acc_entire));
  if (raw_test_acc_entire != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_test_acc_entire(), target);
  }

  // float test_f1 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_f1 = this->_internal_test_f1();
  uint32_t raw_test_f1;
  memcpy(&raw_test_f1, &tmp_test_f1, sizeof(tmp_test_f1));
  if (raw_test_f1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_test_f1(), target);
  }

  // float val_f1 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_f1 = this->_internal_val_f1();
  uint32_t raw_val_f1;
  memcpy(&raw_val_f1, &tmp_val_f1, sizeof(tmp_val_f1));
  if (raw_val_f1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_val_f1(), target);
  }

  // float test_f1_entire = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_f1_entire = this->_internal_test_f1_entire();
  uint32_t raw_test_f1_entire;
  memcpy(&raw_test_f1_entire, &tmp_test_f1_entire, sizeof(tmp_test_f1_entire));
  if (raw_test_f1_entire != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_test_f1_entire(), target);
  }

  // float val_f1_entire = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_f1_entire = this->_internal_val_f1_entire();
  uint32_t raw_val_f1_entire;
  memcpy(&raw_val_f1_entire, &tmp_val_f1_entire, sizeof(tmp_val_f1_entire));
  if (raw_val_f1_entire != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_val_f1_entire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.AccuracyMessage)
  return target;
}

size_t AccuracyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.AccuracyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float val_acc = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_acc = this->_internal_val_acc();
  uint32_t raw_val_acc;
  memcpy(&raw_val_acc, &tmp_val_acc, sizeof(tmp_val_acc));
  if (raw_val_acc != 0) {
    total_size += 1 + 4;
  }

  // float val_acc_entire = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_acc_entire = this->_internal_val_acc_entire();
  uint32_t raw_val_acc_entire;
  memcpy(&raw_val_acc_entire, &tmp_val_acc_entire, sizeof(tmp_val_acc_entire));
  if (raw_val_acc_entire != 0) {
    total_size += 1 + 4;
  }

  // float train_acc = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_train_acc = this->_internal_train_acc();
  uint32_t raw_train_acc;
  memcpy(&raw_train_acc, &tmp_train_acc, sizeof(tmp_train_acc));
  if (raw_train_acc != 0) {
    total_size += 1 + 4;
  }

  // float train_acc_entire = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_train_acc_entire = this->_internal_train_acc_entire();
  uint32_t raw_train_acc_entire;
  memcpy(&raw_train_acc_entire, &tmp_train_acc_entire, sizeof(tmp_train_acc_entire));
  if (raw_train_acc_entire != 0) {
    total_size += 1 + 4;
  }

  // float test_acc = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_acc = this->_internal_test_acc();
  uint32_t raw_test_acc;
  memcpy(&raw_test_acc, &tmp_test_acc, sizeof(tmp_test_acc));
  if (raw_test_acc != 0) {
    total_size += 1 + 4;
  }

  // float test_acc_entire = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_acc_entire = this->_internal_test_acc_entire();
  uint32_t raw_test_acc_entire;
  memcpy(&raw_test_acc_entire, &tmp_test_acc_entire, sizeof(tmp_test_acc_entire));
  if (raw_test_acc_entire != 0) {
    total_size += 1 + 4;
  }

  // float test_f1 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_f1 = this->_internal_test_f1();
  uint32_t raw_test_f1;
  memcpy(&raw_test_f1, &tmp_test_f1, sizeof(tmp_test_f1));
  if (raw_test_f1 != 0) {
    total_size += 1 + 4;
  }

  // float val_f1 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_f1 = this->_internal_val_f1();
  uint32_t raw_val_f1;
  memcpy(&raw_val_f1, &tmp_val_f1, sizeof(tmp_val_f1));
  if (raw_val_f1 != 0) {
    total_size += 1 + 4;
  }

  // float test_f1_entire = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_f1_entire = this->_internal_test_f1_entire();
  uint32_t raw_test_f1_entire;
  memcpy(&raw_test_f1_entire, &tmp_test_f1_entire, sizeof(tmp_test_f1_entire));
  if (raw_test_f1_entire != 0) {
    total_size += 1 + 4;
  }

  // float val_f1_entire = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_f1_entire = this->_internal_val_f1_entire();
  uint32_t raw_val_f1_entire;
  memcpy(&raw_val_f1_entire, &tmp_val_f1_entire, sizeof(tmp_val_f1_entire));
  if (raw_val_f1_entire != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccuracyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccuracyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccuracyMessage::GetClassData() const { return &_class_data_; }

void AccuracyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccuracyMessage *>(to)->MergeFrom(
      static_cast<const AccuracyMessage &>(from));
}


void AccuracyMessage::MergeFrom(const AccuracyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.AccuracyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_acc = from._internal_val_acc();
  uint32_t raw_val_acc;
  memcpy(&raw_val_acc, &tmp_val_acc, sizeof(tmp_val_acc));
  if (raw_val_acc != 0) {
    _internal_set_val_acc(from._internal_val_acc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_acc_entire = from._internal_val_acc_entire();
  uint32_t raw_val_acc_entire;
  memcpy(&raw_val_acc_entire, &tmp_val_acc_entire, sizeof(tmp_val_acc_entire));
  if (raw_val_acc_entire != 0) {
    _internal_set_val_acc_entire(from._internal_val_acc_entire());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_train_acc = from._internal_train_acc();
  uint32_t raw_train_acc;
  memcpy(&raw_train_acc, &tmp_train_acc, sizeof(tmp_train_acc));
  if (raw_train_acc != 0) {
    _internal_set_train_acc(from._internal_train_acc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_train_acc_entire = from._internal_train_acc_entire();
  uint32_t raw_train_acc_entire;
  memcpy(&raw_train_acc_entire, &tmp_train_acc_entire, sizeof(tmp_train_acc_entire));
  if (raw_train_acc_entire != 0) {
    _internal_set_train_acc_entire(from._internal_train_acc_entire());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_acc = from._internal_test_acc();
  uint32_t raw_test_acc;
  memcpy(&raw_test_acc, &tmp_test_acc, sizeof(tmp_test_acc));
  if (raw_test_acc != 0) {
    _internal_set_test_acc(from._internal_test_acc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_acc_entire = from._internal_test_acc_entire();
  uint32_t raw_test_acc_entire;
  memcpy(&raw_test_acc_entire, &tmp_test_acc_entire, sizeof(tmp_test_acc_entire));
  if (raw_test_acc_entire != 0) {
    _internal_set_test_acc_entire(from._internal_test_acc_entire());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_f1 = from._internal_test_f1();
  uint32_t raw_test_f1;
  memcpy(&raw_test_f1, &tmp_test_f1, sizeof(tmp_test_f1));
  if (raw_test_f1 != 0) {
    _internal_set_test_f1(from._internal_test_f1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_f1 = from._internal_val_f1();
  uint32_t raw_val_f1;
  memcpy(&raw_val_f1, &tmp_val_f1, sizeof(tmp_val_f1));
  if (raw_val_f1 != 0) {
    _internal_set_val_f1(from._internal_val_f1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_test_f1_entire = from._internal_test_f1_entire();
  uint32_t raw_test_f1_entire;
  memcpy(&raw_test_f1_entire, &tmp_test_f1_entire, sizeof(tmp_test_f1_entire));
  if (raw_test_f1_entire != 0) {
    _internal_set_test_f1_entire(from._internal_test_f1_entire());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_val_f1_entire = from._internal_val_f1_entire();
  uint32_t raw_val_f1_entire;
  memcpy(&raw_val_f1_entire, &tmp_val_f1_entire, sizeof(tmp_val_f1_entire));
  if (raw_val_f1_entire != 0) {
    _internal_set_val_f1_entire(from._internal_val_f1_entire());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccuracyMessage::CopyFrom(const AccuracyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.AccuracyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyMessage::IsInitialized() const {
  return true;
}

void AccuracyMessage::InternalSwap(AccuracyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccuracyMessage, val_f1_entire_)
      + sizeof(AccuracyMessage::val_f1_entire_)
      - PROTOBUF_FIELD_OFFSET(AccuracyMessage, val_acc_)>(
          reinterpret_cast<char*>(&val_acc_),
          reinterpret_cast<char*>(&other->val_acc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccuracyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[2]);
}

// ===================================================================

class EmbGradMessage::_Internal {
 public:
};

EmbGradMessage::EmbGradMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena),
  embs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.EmbGradMessage)
}
EmbGradMessage::EmbGradMessage(const EmbGradMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_),
      embs_(from.embs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  graph_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    graph_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graph_mode().empty()) {
    graph_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_graph_mode(), 
      GetArenaForAllocation());
  }
  ::memcpy(&layerid_, &from.layerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nodesize_) -
    reinterpret_cast<char*>(&layerid_)) + sizeof(nodesize_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.EmbGradMessage)
}

inline void EmbGradMessage::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
graph_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  graph_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&layerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nodesize_) -
    reinterpret_cast<char*>(&layerid_)) + sizeof(nodesize_));
}

EmbGradMessage::~EmbGradMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.EmbGradMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmbGradMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EmbGradMessage::ArenaDtor(void* object) {
  EmbGradMessage* _this = reinterpret_cast< EmbGradMessage* >(object);
  (void)_this;
}
void EmbGradMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmbGradMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmbGradMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.EmbGradMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  embs_.Clear();
  status_.ClearToEmpty();
  graph_mode_.ClearToEmpty();
  ::memset(&layerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodesize_) -
      reinterpret_cast<char*>(&layerid_)) + sizeof(nodesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmbGradMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_nodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 layerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          layerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 workerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          workerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dgnn_test.EmbGradMessage.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 epoch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 featsize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          featsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodesize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          nodesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float embs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_embs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 69) {
          _internal_add_embs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string graph_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_graph_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dgnn_test.EmbGradMessage.graph_mode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmbGradMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.EmbGradMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 nodes = 1;
  {
    int byte_size = _nodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_nodes(), byte_size, target);
    }
  }

  // int32 layerId = 2;
  if (this->_internal_layerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_layerid(), target);
  }

  // int32 workerId = 3;
  if (this->_internal_workerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_workerid(), target);
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dgnn_test.EmbGradMessage.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // int32 epoch = 5;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_epoch(), target);
  }

  // int32 featsize = 6;
  if (this->_internal_featsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_featsize(), target);
  }

  // int32 nodesize = 7;
  if (this->_internal_nodesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_nodesize(), target);
  }

  // repeated float embs = 8;
  if (this->_internal_embs_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_embs(), target);
  }

  // string graph_mode = 9;
  if (!this->_internal_graph_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_mode().data(), static_cast<int>(this->_internal_graph_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dgnn_test.EmbGradMessage.graph_mode");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_graph_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.EmbGradMessage)
  return target;
}

size_t EmbGradMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.EmbGradMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nodes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float embs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_embs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string graph_mode = 9;
  if (!this->_internal_graph_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_mode());
  }

  // int32 layerId = 2;
  if (this->_internal_layerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_layerid());
  }

  // int32 workerId = 3;
  if (this->_internal_workerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_workerid());
  }

  // int32 epoch = 5;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_epoch());
  }

  // int32 featsize = 6;
  if (this->_internal_featsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_featsize());
  }

  // int32 nodesize = 7;
  if (this->_internal_nodesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmbGradMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmbGradMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmbGradMessage::GetClassData() const { return &_class_data_; }

void EmbGradMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EmbGradMessage *>(to)->MergeFrom(
      static_cast<const EmbGradMessage &>(from));
}


void EmbGradMessage::MergeFrom(const EmbGradMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.EmbGradMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  embs_.MergeFrom(from.embs_);
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (!from._internal_graph_mode().empty()) {
    _internal_set_graph_mode(from._internal_graph_mode());
  }
  if (from._internal_layerid() != 0) {
    _internal_set_layerid(from._internal_layerid());
  }
  if (from._internal_workerid() != 0) {
    _internal_set_workerid(from._internal_workerid());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_featsize() != 0) {
    _internal_set_featsize(from._internal_featsize());
  }
  if (from._internal_nodesize() != 0) {
    _internal_set_nodesize(from._internal_nodesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmbGradMessage::CopyFrom(const EmbGradMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.EmbGradMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbGradMessage::IsInitialized() const {
  return true;
}

void EmbGradMessage::InternalSwap(EmbGradMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  embs_.InternalSwap(&other->embs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &graph_mode_, lhs_arena,
      &other->graph_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmbGradMessage, nodesize_)
      + sizeof(EmbGradMessage::nodesize_)
      - PROTOBUF_FIELD_OFFSET(EmbGradMessage, layerid_)>(
          reinterpret_cast<char*>(&layerid_),
          reinterpret_cast<char*>(&other->layerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmbGradMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[3]);
}

// ===================================================================

class ContextMessage_PartitionMessage::_Internal {
 public:
};

ContextMessage_PartitionMessage::ContextMessage_PartitionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.ContextMessage.PartitionMessage)
}
ContextMessage_PartitionMessage::ContextMessage_PartitionMessage(const ContextMessage_PartitionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datapath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    datapath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_datapath().empty()) {
    datapath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_datapath(), 
      GetArenaForAllocation());
  }
  partitionmethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partitionmethod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partitionmethod().empty()) {
    partitionmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partitionmethod(), 
      GetArenaForAllocation());
  }
  ::memcpy(&datanum_, &from.datanum_,
    static_cast<size_t>(reinterpret_cast<char*>(&edgenum_) -
    reinterpret_cast<char*>(&datanum_)) + sizeof(edgenum_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.ContextMessage.PartitionMessage)
}

inline void ContextMessage_PartitionMessage::SharedCtor() {
datapath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  datapath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partitionmethod_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partitionmethod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&datanum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edgenum_) -
    reinterpret_cast<char*>(&datanum_)) + sizeof(edgenum_));
}

ContextMessage_PartitionMessage::~ContextMessage_PartitionMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.ContextMessage.PartitionMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContextMessage_PartitionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  datapath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partitionmethod_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContextMessage_PartitionMessage::ArenaDtor(void* object) {
  ContextMessage_PartitionMessage* _this = reinterpret_cast< ContextMessage_PartitionMessage* >(object);
  (void)_this;
}
void ContextMessage_PartitionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContextMessage_PartitionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContextMessage_PartitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.ContextMessage.PartitionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datapath_.ClearToEmpty();
  partitionmethod_.ClearToEmpty();
  ::memset(&datanum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edgenum_) -
      reinterpret_cast<char*>(&datanum_)) + sizeof(edgenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextMessage_PartitionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dataNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          datanum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 workerNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          workernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_datapath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dgnn_test.ContextMessage.PartitionMessage.dataPath"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 featureDim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          featuredim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 classNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          classnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string partitionMethod = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_partitionmethod();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dgnn_test.ContextMessage.PartitionMessage.partitionMethod"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 edgeNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          edgenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextMessage_PartitionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.ContextMessage.PartitionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dataNum = 1;
  if (this->_internal_datanum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_datanum(), target);
  }

  // int32 workerNum = 2;
  if (this->_internal_workernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_workernum(), target);
  }

  // string dataPath = 3;
  if (!this->_internal_datapath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datapath().data(), static_cast<int>(this->_internal_datapath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dgnn_test.ContextMessage.PartitionMessage.dataPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_datapath(), target);
  }

  // int32 featureDim = 4;
  if (this->_internal_featuredim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_featuredim(), target);
  }

  // int32 classNum = 5;
  if (this->_internal_classnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_classnum(), target);
  }

  // string partitionMethod = 6;
  if (!this->_internal_partitionmethod().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partitionmethod().data(), static_cast<int>(this->_internal_partitionmethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dgnn_test.ContextMessage.PartitionMessage.partitionMethod");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_partitionmethod(), target);
  }

  // int32 edgeNum = 7;
  if (this->_internal_edgenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_edgenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.ContextMessage.PartitionMessage)
  return target;
}

size_t ContextMessage_PartitionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.ContextMessage.PartitionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataPath = 3;
  if (!this->_internal_datapath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datapath());
  }

  // string partitionMethod = 6;
  if (!this->_internal_partitionmethod().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partitionmethod());
  }

  // int32 dataNum = 1;
  if (this->_internal_datanum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_datanum());
  }

  // int32 workerNum = 2;
  if (this->_internal_workernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_workernum());
  }

  // int32 featureDim = 4;
  if (this->_internal_featuredim() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_featuredim());
  }

  // int32 classNum = 5;
  if (this->_internal_classnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_classnum());
  }

  // int32 edgeNum = 7;
  if (this->_internal_edgenum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_edgenum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextMessage_PartitionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContextMessage_PartitionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextMessage_PartitionMessage::GetClassData() const { return &_class_data_; }

void ContextMessage_PartitionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContextMessage_PartitionMessage *>(to)->MergeFrom(
      static_cast<const ContextMessage_PartitionMessage &>(from));
}


void ContextMessage_PartitionMessage::MergeFrom(const ContextMessage_PartitionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.ContextMessage.PartitionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_datapath().empty()) {
    _internal_set_datapath(from._internal_datapath());
  }
  if (!from._internal_partitionmethod().empty()) {
    _internal_set_partitionmethod(from._internal_partitionmethod());
  }
  if (from._internal_datanum() != 0) {
    _internal_set_datanum(from._internal_datanum());
  }
  if (from._internal_workernum() != 0) {
    _internal_set_workernum(from._internal_workernum());
  }
  if (from._internal_featuredim() != 0) {
    _internal_set_featuredim(from._internal_featuredim());
  }
  if (from._internal_classnum() != 0) {
    _internal_set_classnum(from._internal_classnum());
  }
  if (from._internal_edgenum() != 0) {
    _internal_set_edgenum(from._internal_edgenum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextMessage_PartitionMessage::CopyFrom(const ContextMessage_PartitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.ContextMessage.PartitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextMessage_PartitionMessage::IsInitialized() const {
  return true;
}

void ContextMessage_PartitionMessage::InternalSwap(ContextMessage_PartitionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &datapath_, lhs_arena,
      &other->datapath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partitionmethod_, lhs_arena,
      &other->partitionmethod_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContextMessage_PartitionMessage, edgenum_)
      + sizeof(ContextMessage_PartitionMessage::edgenum_)
      - PROTOBUF_FIELD_OFFSET(ContextMessage_PartitionMessage, datanum_)>(
          reinterpret_cast<char*>(&datanum_),
          reinterpret_cast<char*>(&other->datanum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextMessage_PartitionMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[4]);
}

// ===================================================================

class ContextMessage::_Internal {
 public:
  static const ::dgnn_test::ContextMessage_PartitionMessage& partition(const ContextMessage* msg);
};

const ::dgnn_test::ContextMessage_PartitionMessage&
ContextMessage::_Internal::partition(const ContextMessage* msg) {
  return *msg->partition_;
}
ContextMessage::ContextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.ContextMessage)
}
ContextMessage::ContextMessage(const ContextMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      address_(from.address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_partition()) {
    partition_ = new ::dgnn_test::ContextMessage_PartitionMessage(*from.partition_);
  } else {
    partition_ = nullptr;
  }
  ::memcpy(&workerid_, &from.workerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&workernum_) -
    reinterpret_cast<char*>(&workerid_)) + sizeof(workernum_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.ContextMessage)
}

inline void ContextMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&partition_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&workernum_) -
    reinterpret_cast<char*>(&partition_)) + sizeof(workernum_));
}

ContextMessage::~ContextMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.ContextMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContextMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete partition_;
}

void ContextMessage::ArenaDtor(void* object) {
  ContextMessage* _this = reinterpret_cast< ContextMessage* >(object);
  (void)_this;
}
void ContextMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContextMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.ContextMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  if (GetArenaForAllocation() == nullptr && partition_ != nullptr) {
    delete partition_;
  }
  partition_ = nullptr;
  ::memset(&workerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workernum_) -
      reinterpret_cast<char*>(&workerid_)) + sizeof(workernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 workerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          workerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_address();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dgnn_test.ContextMessage.address"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 workerNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          workernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dgnn_test.ContextMessage.PartitionMessage partition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.ContextMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 workerId = 1;
  if (this->_internal_workerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_workerid(), target);
  }

  // repeated string address = 2;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    const auto& s = this->_internal_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dgnn_test.ContextMessage.address");
    target = stream->WriteString(2, s, target);
  }

  // int32 workerNum = 3;
  if (this->_internal_workernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_workernum(), target);
  }

  // .dgnn_test.ContextMessage.PartitionMessage partition = 4;
  if (this->_internal_has_partition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::partition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.ContextMessage)
  return target;
}

size_t ContextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.ContextMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(address_.size());
  for (int i = 0, n = address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      address_.Get(i));
  }

  // .dgnn_test.ContextMessage.PartitionMessage partition = 4;
  if (this->_internal_has_partition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partition_);
  }

  // int32 workerId = 1;
  if (this->_internal_workerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_workerid());
  }

  // int32 workerNum = 3;
  if (this->_internal_workernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_workernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContextMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextMessage::GetClassData() const { return &_class_data_; }

void ContextMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContextMessage *>(to)->MergeFrom(
      static_cast<const ContextMessage &>(from));
}


void ContextMessage::MergeFrom(const ContextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.ContextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  if (from._internal_has_partition()) {
    _internal_mutable_partition()->::dgnn_test::ContextMessage_PartitionMessage::MergeFrom(from._internal_partition());
  }
  if (from._internal_workerid() != 0) {
    _internal_set_workerid(from._internal_workerid());
  }
  if (from._internal_workernum() != 0) {
    _internal_set_workernum(from._internal_workernum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextMessage::CopyFrom(const ContextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.ContextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextMessage::IsInitialized() const {
  return true;
}

void ContextMessage::InternalSwap(ContextMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContextMessage, workernum_)
      + sizeof(ContextMessage::workernum_)
      - PROTOBUF_FIELD_OFFSET(ContextMessage, partition_)>(
          reinterpret_cast<char*>(&partition_),
          reinterpret_cast<char*>(&other->partition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[5]);
}

// ===================================================================

class NetInfoMessage::_Internal {
 public:
};

NetInfoMessage::NetInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hiddendim_(arena),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.NetInfoMessage)
}
NetInfoMessage::NetInfoMessage(const NetInfoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hiddendim_(from.hiddendim_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wid_, &from.wid_,
    static_cast<size_t>(reinterpret_cast<char*>(&servernum_) -
    reinterpret_cast<char*>(&wid_)) + sizeof(servernum_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.NetInfoMessage)
}

inline void NetInfoMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&servernum_) -
    reinterpret_cast<char*>(&wid_)) + sizeof(servernum_));
}

NetInfoMessage::~NetInfoMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.NetInfoMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInfoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInfoMessage::ArenaDtor(void* object) {
  NetInfoMessage* _this = reinterpret_cast< NetInfoMessage* >(object);
  (void)_this;
}
void NetInfoMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInfoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.NetInfoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hiddendim_.Clear();
  params_.Clear();
  ::memset(&wid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servernum_) -
      reinterpret_cast<char*>(&wid_)) + sizeof(servernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInfoMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 wid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          wid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 featureDim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          featuredim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 hiddenDim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hiddendim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_hiddendim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 classDim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          classdim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 workerNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          workernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serverNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          servernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dgnn_test.ParamGrad params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInfoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.NetInfoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wid = 1;
  if (this->_internal_wid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wid(), target);
  }

  // int32 featureDim = 2;
  if (this->_internal_featuredim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_featuredim(), target);
  }

  // repeated int32 hiddenDim = 3;
  {
    int byte_size = _hiddendim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_hiddendim(), byte_size, target);
    }
  }

  // int32 classDim = 4;
  if (this->_internal_classdim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_classdim(), target);
  }

  // int32 workerNum = 5;
  if (this->_internal_workernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_workernum(), target);
  }

  // int32 serverNum = 6;
  if (this->_internal_servernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_servernum(), target);
  }

  // repeated .dgnn_test.ParamGrad params = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.NetInfoMessage)
  return target;
}

size_t NetInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.NetInfoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 hiddenDim = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hiddendim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hiddendim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .dgnn_test.ParamGrad params = 7;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 wid = 1;
  if (this->_internal_wid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_wid());
  }

  // int32 featureDim = 2;
  if (this->_internal_featuredim() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_featuredim());
  }

  // int32 classDim = 4;
  if (this->_internal_classdim() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_classdim());
  }

  // int32 workerNum = 5;
  if (this->_internal_workernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_workernum());
  }

  // int32 serverNum = 6;
  if (this->_internal_servernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_servernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInfoMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInfoMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInfoMessage::GetClassData() const { return &_class_data_; }

void NetInfoMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInfoMessage *>(to)->MergeFrom(
      static_cast<const NetInfoMessage &>(from));
}


void NetInfoMessage::MergeFrom(const NetInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.NetInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hiddendim_.MergeFrom(from.hiddendim_);
  params_.MergeFrom(from.params_);
  if (from._internal_wid() != 0) {
    _internal_set_wid(from._internal_wid());
  }
  if (from._internal_featuredim() != 0) {
    _internal_set_featuredim(from._internal_featuredim());
  }
  if (from._internal_classdim() != 0) {
    _internal_set_classdim(from._internal_classdim());
  }
  if (from._internal_workernum() != 0) {
    _internal_set_workernum(from._internal_workernum());
  }
  if (from._internal_servernum() != 0) {
    _internal_set_servernum(from._internal_servernum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInfoMessage::CopyFrom(const NetInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.NetInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfoMessage::IsInitialized() const {
  return true;
}

void NetInfoMessage::InternalSwap(NetInfoMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hiddendim_.InternalSwap(&other->hiddendim_);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInfoMessage, servernum_)
      + sizeof(NetInfoMessage::servernum_)
      - PROTOBUF_FIELD_OFFSET(NetInfoMessage, wid_)>(
          reinterpret_cast<char*>(&wid_),
          reinterpret_cast<char*>(&other->wid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInfoMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[6]);
}

// ===================================================================

class ParamGrad::_Internal {
 public:
};

ParamGrad::ParamGrad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  elems_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.ParamGrad)
}
ParamGrad::ParamGrad(const ParamGrad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&wid_, &from.wid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lr_) -
    reinterpret_cast<char*>(&wid_)) + sizeof(lr_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.ParamGrad)
}

inline void ParamGrad::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lr_) -
    reinterpret_cast<char*>(&wid_)) + sizeof(lr_));
}

ParamGrad::~ParamGrad() {
  // @@protoc_insertion_point(destructor:dgnn_test.ParamGrad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParamGrad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParamGrad::ArenaDtor(void* object) {
  ParamGrad* _this = reinterpret_cast< ParamGrad* >(object);
  (void)_this;
}
void ParamGrad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParamGrad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParamGrad::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.ParamGrad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elems_.Clear();
  id_.ClearToEmpty();
  ::memset(&wid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lr_) -
      reinterpret_cast<char*>(&wid_)) + sizeof(lr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParamGrad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dgnn_test.ParamGrad.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          wid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float lr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          lr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated double elems = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_elems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_elems(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParamGrad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.ParamGrad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dgnn_test.ParamGrad.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 wid = 2;
  if (this->_internal_wid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wid(), target);
  }

  // int32 sid = 3;
  if (this->_internal_sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sid(), target);
  }

  // float lr = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lr = this->_internal_lr();
  uint32_t raw_lr;
  memcpy(&raw_lr, &tmp_lr, sizeof(tmp_lr));
  if (raw_lr != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_lr(), target);
  }

  // repeated double elems = 5;
  if (this->_internal_elems_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_elems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.ParamGrad)
  return target;
}

size_t ParamGrad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.ParamGrad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double elems = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_elems_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 wid = 2;
  if (this->_internal_wid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_wid());
  }

  // int32 sid = 3;
  if (this->_internal_sid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sid());
  }

  // float lr = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lr = this->_internal_lr();
  uint32_t raw_lr;
  memcpy(&raw_lr, &tmp_lr, sizeof(tmp_lr));
  if (raw_lr != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParamGrad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParamGrad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParamGrad::GetClassData() const { return &_class_data_; }

void ParamGrad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParamGrad *>(to)->MergeFrom(
      static_cast<const ParamGrad &>(from));
}


void ParamGrad::MergeFrom(const ParamGrad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.ParamGrad)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  elems_.MergeFrom(from.elems_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_wid() != 0) {
    _internal_set_wid(from._internal_wid());
  }
  if (from._internal_sid() != 0) {
    _internal_set_sid(from._internal_sid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lr = from._internal_lr();
  uint32_t raw_lr;
  memcpy(&raw_lr, &tmp_lr, sizeof(tmp_lr));
  if (raw_lr != 0) {
    _internal_set_lr(from._internal_lr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParamGrad::CopyFrom(const ParamGrad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.ParamGrad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamGrad::IsInitialized() const {
  return true;
}

void ParamGrad::InternalSwap(ParamGrad* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elems_.InternalSwap(&other->elems_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParamGrad, lr_)
      + sizeof(ParamGrad::lr_)
      - PROTOBUF_FIELD_OFFSET(ParamGrad, wid_)>(
          reinterpret_cast<char*>(&wid_),
          reinterpret_cast<char*>(&other->wid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamGrad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[7]);
}

// ===================================================================

class IntIntPair::_Internal {
 public:
};

IntIntPair::IntIntPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.IntIntPair)
}
IntIntPair::IntIntPair(const IntIntPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.IntIntPair)
}

inline void IntIntPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

IntIntPair::~IntIntPair() {
  // @@protoc_insertion_point(destructor:dgnn_test.IntIntPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IntIntPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntIntPair::ArenaDtor(void* object) {
  IntIntPair* _this = reinterpret_cast< IntIntPair* >(object);
  (void)_this;
}
void IntIntPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntIntPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntIntPair::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.IntIntPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntIntPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntIntPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.IntIntPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.IntIntPair)
  return target;
}

size_t IntIntPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.IntIntPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntIntPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntIntPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntIntPair::GetClassData() const { return &_class_data_; }

void IntIntPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntIntPair *>(to)->MergeFrom(
      static_cast<const IntIntPair &>(from));
}


void IntIntPair::MergeFrom(const IntIntPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.IntIntPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntIntPair::CopyFrom(const IntIntPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.IntIntPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntIntPair::IsInitialized() const {
  return true;
}

void IntIntPair::InternalSwap(IntIntPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntIntPair, value_)
      + sizeof(IntIntPair::value_)
      - PROTOBUF_FIELD_OFFSET(IntIntPair, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntIntPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[8]);
}

// ===================================================================

class DataMessage_FeatureMessage_FeatureItem::_Internal {
 public:
};

DataMessage_FeatureMessage_FeatureItem::DataMessage_FeatureMessage_FeatureItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  feature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
}
DataMessage_FeatureMessage_FeatureItem::DataMessage_FeatureMessage_FeatureItem(const DataMessage_FeatureMessage_FeatureItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vid_ = from.vid_;
  // @@protoc_insertion_point(copy_constructor:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
}

inline void DataMessage_FeatureMessage_FeatureItem::SharedCtor() {
vid_ = 0;
}

DataMessage_FeatureMessage_FeatureItem::~DataMessage_FeatureMessage_FeatureItem() {
  // @@protoc_insertion_point(destructor:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMessage_FeatureMessage_FeatureItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataMessage_FeatureMessage_FeatureItem::ArenaDtor(void* object) {
  DataMessage_FeatureMessage_FeatureItem* _this = reinterpret_cast< DataMessage_FeatureMessage_FeatureItem* >(object);
  (void)_this;
}
void DataMessage_FeatureMessage_FeatureItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMessage_FeatureMessage_FeatureItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMessage_FeatureMessage_FeatureItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  vid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage_FeatureMessage_FeatureItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_feature(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_feature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage_FeatureMessage_FeatureItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // repeated float feature = 2;
  if (this->_internal_feature_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_feature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
  return target;
}

size_t DataMessage_FeatureMessage_FeatureItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float feature = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_feature_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage_FeatureMessage_FeatureItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMessage_FeatureMessage_FeatureItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage_FeatureMessage_FeatureItem::GetClassData() const { return &_class_data_; }

void DataMessage_FeatureMessage_FeatureItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMessage_FeatureMessage_FeatureItem *>(to)->MergeFrom(
      static_cast<const DataMessage_FeatureMessage_FeatureItem &>(from));
}


void DataMessage_FeatureMessage_FeatureItem::MergeFrom(const DataMessage_FeatureMessage_FeatureItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from._internal_vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage_FeatureMessage_FeatureItem::CopyFrom(const DataMessage_FeatureMessage_FeatureItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage_FeatureMessage_FeatureItem::IsInitialized() const {
  return true;
}

void DataMessage_FeatureMessage_FeatureItem::InternalSwap(DataMessage_FeatureMessage_FeatureItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
  swap(vid_, other->vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage_FeatureMessage_FeatureItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[9]);
}

// ===================================================================

class DataMessage_FeatureMessage::_Internal {
 public:
};

DataMessage_FeatureMessage::DataMessage_FeatureMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  features_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.DataMessage.FeatureMessage)
}
DataMessage_FeatureMessage::DataMessage_FeatureMessage(const DataMessage_FeatureMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      features_(from.features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dgnn_test.DataMessage.FeatureMessage)
}

inline void DataMessage_FeatureMessage::SharedCtor() {
}

DataMessage_FeatureMessage::~DataMessage_FeatureMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.DataMessage.FeatureMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMessage_FeatureMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataMessage_FeatureMessage::ArenaDtor(void* object) {
  DataMessage_FeatureMessage* _this = reinterpret_cast< DataMessage_FeatureMessage* >(object);
  (void)_this;
}
void DataMessage_FeatureMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMessage_FeatureMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMessage_FeatureMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.DataMessage.FeatureMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage_FeatureMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dgnn_test.DataMessage.FeatureMessage.FeatureItem features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage_FeatureMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.DataMessage.FeatureMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dgnn_test.DataMessage.FeatureMessage.FeatureItem features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_features_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_features(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.DataMessage.FeatureMessage)
  return target;
}

size_t DataMessage_FeatureMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.DataMessage.FeatureMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dgnn_test.DataMessage.FeatureMessage.FeatureItem features = 1;
  total_size += 1UL * this->_internal_features_size();
  for (const auto& msg : this->features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage_FeatureMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMessage_FeatureMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage_FeatureMessage::GetClassData() const { return &_class_data_; }

void DataMessage_FeatureMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMessage_FeatureMessage *>(to)->MergeFrom(
      static_cast<const DataMessage_FeatureMessage &>(from));
}


void DataMessage_FeatureMessage::MergeFrom(const DataMessage_FeatureMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.DataMessage.FeatureMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage_FeatureMessage::CopyFrom(const DataMessage_FeatureMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.DataMessage.FeatureMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage_FeatureMessage::IsInitialized() const {
  return true;
}

void DataMessage_FeatureMessage::InternalSwap(DataMessage_FeatureMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage_FeatureMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[10]);
}

// ===================================================================

class DataMessage_LabelMessage_LabelItem::_Internal {
 public:
};

DataMessage_LabelMessage_LabelItem::DataMessage_LabelMessage_LabelItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.DataMessage.LabelMessage.LabelItem)
}
DataMessage_LabelMessage_LabelItem::DataMessage_LabelMessage_LabelItem(const DataMessage_LabelMessage_LabelItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vid_, &from.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.DataMessage.LabelMessage.LabelItem)
}

inline void DataMessage_LabelMessage_LabelItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(label_));
}

DataMessage_LabelMessage_LabelItem::~DataMessage_LabelMessage_LabelItem() {
  // @@protoc_insertion_point(destructor:dgnn_test.DataMessage.LabelMessage.LabelItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMessage_LabelMessage_LabelItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataMessage_LabelMessage_LabelItem::ArenaDtor(void* object) {
  DataMessage_LabelMessage_LabelItem* _this = reinterpret_cast< DataMessage_LabelMessage_LabelItem* >(object);
  (void)_this;
}
void DataMessage_LabelMessage_LabelItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMessage_LabelMessage_LabelItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMessage_LabelMessage_LabelItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.DataMessage.LabelMessage.LabelItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(label_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage_LabelMessage_LabelItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage_LabelMessage_LabelItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.DataMessage.LabelMessage.LabelItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // int32 label = 2;
  if (this->_internal_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.DataMessage.LabelMessage.LabelItem)
  return target;
}

size_t DataMessage_LabelMessage_LabelItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.DataMessage.LabelMessage.LabelItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vid());
  }

  // int32 label = 2;
  if (this->_internal_label() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_label());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage_LabelMessage_LabelItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMessage_LabelMessage_LabelItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage_LabelMessage_LabelItem::GetClassData() const { return &_class_data_; }

void DataMessage_LabelMessage_LabelItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMessage_LabelMessage_LabelItem *>(to)->MergeFrom(
      static_cast<const DataMessage_LabelMessage_LabelItem &>(from));
}


void DataMessage_LabelMessage_LabelItem::MergeFrom(const DataMessage_LabelMessage_LabelItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.DataMessage.LabelMessage.LabelItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from._internal_label() != 0) {
    _internal_set_label(from._internal_label());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage_LabelMessage_LabelItem::CopyFrom(const DataMessage_LabelMessage_LabelItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.DataMessage.LabelMessage.LabelItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage_LabelMessage_LabelItem::IsInitialized() const {
  return true;
}

void DataMessage_LabelMessage_LabelItem::InternalSwap(DataMessage_LabelMessage_LabelItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataMessage_LabelMessage_LabelItem, label_)
      + sizeof(DataMessage_LabelMessage_LabelItem::label_)
      - PROTOBUF_FIELD_OFFSET(DataMessage_LabelMessage_LabelItem, vid_)>(
          reinterpret_cast<char*>(&vid_),
          reinterpret_cast<char*>(&other->vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage_LabelMessage_LabelItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[11]);
}

// ===================================================================

class DataMessage_LabelMessage::_Internal {
 public:
};

DataMessage_LabelMessage::DataMessage_LabelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.DataMessage.LabelMessage)
}
DataMessage_LabelMessage::DataMessage_LabelMessage(const DataMessage_LabelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dgnn_test.DataMessage.LabelMessage)
}

inline void DataMessage_LabelMessage::SharedCtor() {
}

DataMessage_LabelMessage::~DataMessage_LabelMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.DataMessage.LabelMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMessage_LabelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataMessage_LabelMessage::ArenaDtor(void* object) {
  DataMessage_LabelMessage* _this = reinterpret_cast< DataMessage_LabelMessage* >(object);
  (void)_this;
}
void DataMessage_LabelMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMessage_LabelMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMessage_LabelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.DataMessage.LabelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage_LabelMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dgnn_test.DataMessage.LabelMessage.LabelItem labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage_LabelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.DataMessage.LabelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dgnn_test.DataMessage.LabelMessage.LabelItem labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.DataMessage.LabelMessage)
  return target;
}

size_t DataMessage_LabelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.DataMessage.LabelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dgnn_test.DataMessage.LabelMessage.LabelItem labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage_LabelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMessage_LabelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage_LabelMessage::GetClassData() const { return &_class_data_; }

void DataMessage_LabelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMessage_LabelMessage *>(to)->MergeFrom(
      static_cast<const DataMessage_LabelMessage &>(from));
}


void DataMessage_LabelMessage::MergeFrom(const DataMessage_LabelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.DataMessage.LabelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage_LabelMessage::CopyFrom(const DataMessage_LabelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.DataMessage.LabelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage_LabelMessage::IsInitialized() const {
  return true;
}

void DataMessage_LabelMessage::InternalSwap(DataMessage_LabelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage_LabelMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[12]);
}

// ===================================================================

class DataMessage_AdjMessage_AdjItem::_Internal {
 public:
};

DataMessage_AdjMessage_AdjItem::DataMessage_AdjMessage_AdjItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  neibors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.DataMessage.AdjMessage.AdjItem)
}
DataMessage_AdjMessage_AdjItem::DataMessage_AdjMessage_AdjItem(const DataMessage_AdjMessage_AdjItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      neibors_(from.neibors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vid_ = from.vid_;
  // @@protoc_insertion_point(copy_constructor:dgnn_test.DataMessage.AdjMessage.AdjItem)
}

inline void DataMessage_AdjMessage_AdjItem::SharedCtor() {
vid_ = 0;
}

DataMessage_AdjMessage_AdjItem::~DataMessage_AdjMessage_AdjItem() {
  // @@protoc_insertion_point(destructor:dgnn_test.DataMessage.AdjMessage.AdjItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMessage_AdjMessage_AdjItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataMessage_AdjMessage_AdjItem::ArenaDtor(void* object) {
  DataMessage_AdjMessage_AdjItem* _this = reinterpret_cast< DataMessage_AdjMessage_AdjItem* >(object);
  (void)_this;
}
void DataMessage_AdjMessage_AdjItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMessage_AdjMessage_AdjItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMessage_AdjMessage_AdjItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.DataMessage.AdjMessage.AdjItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neibors_.Clear();
  vid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage_AdjMessage_AdjItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 neibors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_neibors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_neibors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage_AdjMessage_AdjItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.DataMessage.AdjMessage.AdjItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vid(), target);
  }

  // repeated int32 neibors = 2;
  {
    int byte_size = _neibors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_neibors(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.DataMessage.AdjMessage.AdjItem)
  return target;
}

size_t DataMessage_AdjMessage_AdjItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.DataMessage.AdjMessage.AdjItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 neibors = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->neibors_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _neibors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage_AdjMessage_AdjItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMessage_AdjMessage_AdjItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage_AdjMessage_AdjItem::GetClassData() const { return &_class_data_; }

void DataMessage_AdjMessage_AdjItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMessage_AdjMessage_AdjItem *>(to)->MergeFrom(
      static_cast<const DataMessage_AdjMessage_AdjItem &>(from));
}


void DataMessage_AdjMessage_AdjItem::MergeFrom(const DataMessage_AdjMessage_AdjItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.DataMessage.AdjMessage.AdjItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  neibors_.MergeFrom(from.neibors_);
  if (from._internal_vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage_AdjMessage_AdjItem::CopyFrom(const DataMessage_AdjMessage_AdjItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.DataMessage.AdjMessage.AdjItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage_AdjMessage_AdjItem::IsInitialized() const {
  return true;
}

void DataMessage_AdjMessage_AdjItem::InternalSwap(DataMessage_AdjMessage_AdjItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  neibors_.InternalSwap(&other->neibors_);
  swap(vid_, other->vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage_AdjMessage_AdjItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[13]);
}

// ===================================================================

class DataMessage_AdjMessage::_Internal {
 public:
};

DataMessage_AdjMessage::DataMessage_AdjMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  adjs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.DataMessage.AdjMessage)
}
DataMessage_AdjMessage::DataMessage_AdjMessage(const DataMessage_AdjMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      adjs_(from.adjs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dgnn_test.DataMessage.AdjMessage)
}

inline void DataMessage_AdjMessage::SharedCtor() {
}

DataMessage_AdjMessage::~DataMessage_AdjMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.DataMessage.AdjMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMessage_AdjMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataMessage_AdjMessage::ArenaDtor(void* object) {
  DataMessage_AdjMessage* _this = reinterpret_cast< DataMessage_AdjMessage* >(object);
  (void)_this;
}
void DataMessage_AdjMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMessage_AdjMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMessage_AdjMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.DataMessage.AdjMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adjs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage_AdjMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dgnn_test.DataMessage.AdjMessage.AdjItem adjs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adjs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage_AdjMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.DataMessage.AdjMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dgnn_test.DataMessage.AdjMessage.AdjItem adjs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adjs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_adjs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.DataMessage.AdjMessage)
  return target;
}

size_t DataMessage_AdjMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.DataMessage.AdjMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dgnn_test.DataMessage.AdjMessage.AdjItem adjs = 1;
  total_size += 1UL * this->_internal_adjs_size();
  for (const auto& msg : this->adjs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage_AdjMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMessage_AdjMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage_AdjMessage::GetClassData() const { return &_class_data_; }

void DataMessage_AdjMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMessage_AdjMessage *>(to)->MergeFrom(
      static_cast<const DataMessage_AdjMessage &>(from));
}


void DataMessage_AdjMessage::MergeFrom(const DataMessage_AdjMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.DataMessage.AdjMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  adjs_.MergeFrom(from.adjs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage_AdjMessage::CopyFrom(const DataMessage_AdjMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.DataMessage.AdjMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage_AdjMessage::IsInitialized() const {
  return true;
}

void DataMessage_AdjMessage::InternalSwap(DataMessage_AdjMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  adjs_.InternalSwap(&other->adjs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage_AdjMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[14]);
}

// ===================================================================

class DataMessage::_Internal {
 public:
  static const ::dgnn_test::NodeMessage& nodelist(const DataMessage* msg);
  static const ::dgnn_test::DataMessage_AdjMessage& adjlist(const DataMessage* msg);
  static const ::dgnn_test::DataMessage_FeatureMessage& featurelist(const DataMessage* msg);
  static const ::dgnn_test::DataMessage_LabelMessage& labellist(const DataMessage* msg);
};

const ::dgnn_test::NodeMessage&
DataMessage::_Internal::nodelist(const DataMessage* msg) {
  return *msg->nodelist_;
}
const ::dgnn_test::DataMessage_AdjMessage&
DataMessage::_Internal::adjlist(const DataMessage* msg) {
  return *msg->adjlist_;
}
const ::dgnn_test::DataMessage_FeatureMessage&
DataMessage::_Internal::featurelist(const DataMessage* msg) {
  return *msg->featurelist_;
}
const ::dgnn_test::DataMessage_LabelMessage&
DataMessage::_Internal::labellist(const DataMessage* msg) {
  return *msg->labellist_;
}
DataMessage::DataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodesforeachworker_(arena),
  degreemap_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.DataMessage)
}
DataMessage::DataMessage(const DataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodesforeachworker_(from.nodesforeachworker_),
      degreemap_(from.degreemap_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodelist()) {
    nodelist_ = new ::dgnn_test::NodeMessage(*from.nodelist_);
  } else {
    nodelist_ = nullptr;
  }
  if (from._internal_has_adjlist()) {
    adjlist_ = new ::dgnn_test::DataMessage_AdjMessage(*from.adjlist_);
  } else {
    adjlist_ = nullptr;
  }
  if (from._internal_has_featurelist()) {
    featurelist_ = new ::dgnn_test::DataMessage_FeatureMessage(*from.featurelist_);
  } else {
    featurelist_ = nullptr;
  }
  if (from._internal_has_labellist()) {
    labellist_ = new ::dgnn_test::DataMessage_LabelMessage(*from.labellist_);
  } else {
    labellist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dgnn_test.DataMessage)
}

inline void DataMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodelist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&labellist_) -
    reinterpret_cast<char*>(&nodelist_)) + sizeof(labellist_));
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.DataMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodelist_;
  if (this != internal_default_instance()) delete adjlist_;
  if (this != internal_default_instance()) delete featurelist_;
  if (this != internal_default_instance()) delete labellist_;
}

void DataMessage::ArenaDtor(void* object) {
  DataMessage* _this = reinterpret_cast< DataMessage* >(object);
  (void)_this;
}
void DataMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.DataMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodesforeachworker_.Clear();
  degreemap_.Clear();
  if (GetArenaForAllocation() == nullptr && nodelist_ != nullptr) {
    delete nodelist_;
  }
  nodelist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && adjlist_ != nullptr) {
    delete adjlist_;
  }
  adjlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && featurelist_ != nullptr) {
    delete featurelist_;
  }
  featurelist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && labellist_ != nullptr) {
    delete labellist_;
  }
  labellist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dgnn_test.NodeMessage nodeList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dgnn_test.DataMessage.AdjMessage adjList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dgnn_test.DataMessage.FeatureMessage featureList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_featurelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dgnn_test.DataMessage.LabelMessage labelList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_labellist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dgnn_test.NodeMessage nodesForEachWorker = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodesforeachworker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dgnn_test.IntIntPair degreeMap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_degreemap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.DataMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dgnn_test.NodeMessage nodeList = 1;
  if (this->_internal_has_nodelist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodelist(this), target, stream);
  }

  // .dgnn_test.DataMessage.AdjMessage adjList = 2;
  if (this->_internal_has_adjlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::adjlist(this), target, stream);
  }

  // .dgnn_test.DataMessage.FeatureMessage featureList = 3;
  if (this->_internal_has_featurelist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::featurelist(this), target, stream);
  }

  // .dgnn_test.DataMessage.LabelMessage labelList = 4;
  if (this->_internal_has_labellist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::labellist(this), target, stream);
  }

  // repeated .dgnn_test.NodeMessage nodesForEachWorker = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodesforeachworker_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_nodesforeachworker(i), target, stream);
  }

  // repeated .dgnn_test.IntIntPair degreeMap = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_degreemap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_degreemap(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.DataMessage)
  return target;
}

size_t DataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.DataMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dgnn_test.NodeMessage nodesForEachWorker = 5;
  total_size += 1UL * this->_internal_nodesforeachworker_size();
  for (const auto& msg : this->nodesforeachworker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dgnn_test.IntIntPair degreeMap = 6;
  total_size += 1UL * this->_internal_degreemap_size();
  for (const auto& msg : this->degreemap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dgnn_test.NodeMessage nodeList = 1;
  if (this->_internal_has_nodelist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodelist_);
  }

  // .dgnn_test.DataMessage.AdjMessage adjList = 2;
  if (this->_internal_has_adjlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adjlist_);
  }

  // .dgnn_test.DataMessage.FeatureMessage featureList = 3;
  if (this->_internal_has_featurelist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *featurelist_);
  }

  // .dgnn_test.DataMessage.LabelMessage labelList = 4;
  if (this->_internal_has_labellist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *labellist_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage::GetClassData() const { return &_class_data_; }

void DataMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataMessage *>(to)->MergeFrom(
      static_cast<const DataMessage &>(from));
}


void DataMessage::MergeFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.DataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodesforeachworker_.MergeFrom(from.nodesforeachworker_);
  degreemap_.MergeFrom(from.degreemap_);
  if (from._internal_has_nodelist()) {
    _internal_mutable_nodelist()->::dgnn_test::NodeMessage::MergeFrom(from._internal_nodelist());
  }
  if (from._internal_has_adjlist()) {
    _internal_mutable_adjlist()->::dgnn_test::DataMessage_AdjMessage::MergeFrom(from._internal_adjlist());
  }
  if (from._internal_has_featurelist()) {
    _internal_mutable_featurelist()->::dgnn_test::DataMessage_FeatureMessage::MergeFrom(from._internal_featurelist());
  }
  if (from._internal_has_labellist()) {
    _internal_mutable_labellist()->::dgnn_test::DataMessage_LabelMessage::MergeFrom(from._internal_labellist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage::CopyFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {
  return true;
}

void DataMessage::InternalSwap(DataMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodesforeachworker_.InternalSwap(&other->nodesforeachworker_);
  degreemap_.InternalSwap(&other->degreemap_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataMessage, labellist_)
      + sizeof(DataMessage::labellist_)
      - PROTOBUF_FIELD_OFFSET(DataMessage, nodelist_)>(
          reinterpret_cast<char*>(&nodelist_),
          reinterpret_cast<char*>(&other->nodelist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[15]);
}

// ===================================================================

class NodeMessage::_Internal {
 public:
};

NodeMessage::NodeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.NodeMessage)
}
NodeMessage::NodeMessage(const NodeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&layid_, &from.layid_,
    static_cast<size_t>(reinterpret_cast<char*>(&wid_) -
    reinterpret_cast<char*>(&layid_)) + sizeof(wid_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.NodeMessage)
}

inline void NodeMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&layid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wid_) -
    reinterpret_cast<char*>(&layid_)) + sizeof(wid_));
}

NodeMessage::~NodeMessage() {
  // @@protoc_insertion_point(destructor:dgnn_test.NodeMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeMessage::ArenaDtor(void* object) {
  NodeMessage* _this = reinterpret_cast< NodeMessage* >(object);
  (void)_this;
}
void NodeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.NodeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  ::memset(&layid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wid_) -
      reinterpret_cast<char*>(&layid_)) + sizeof(wid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_nodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 layid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          layid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          wid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.NodeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 nodes = 1;
  {
    int byte_size = _nodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_nodes(), byte_size, target);
    }
  }

  // int32 layid = 2;
  if (this->_internal_layid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_layid(), target);
  }

  // int32 wid = 3;
  if (this->_internal_wid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.NodeMessage)
  return target;
}

size_t NodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.NodeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nodes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 layid = 2;
  if (this->_internal_layid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_layid());
  }

  // int32 wid = 3;
  if (this->_internal_wid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_wid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeMessage::GetClassData() const { return &_class_data_; }

void NodeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NodeMessage *>(to)->MergeFrom(
      static_cast<const NodeMessage &>(from));
}


void NodeMessage::MergeFrom(const NodeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.NodeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from._internal_layid() != 0) {
    _internal_set_layid(from._internal_layid());
  }
  if (from._internal_wid() != 0) {
    _internal_set_wid(from._internal_wid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeMessage::CopyFrom(const NodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.NodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage::IsInitialized() const {
  return true;
}

void NodeMessage::InternalSwap(NodeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeMessage, wid_)
      + sizeof(NodeMessage::wid_)
      - PROTOBUF_FIELD_OFFSET(NodeMessage, layid_)>(
          reinterpret_cast<char*>(&layid_),
          reinterpret_cast<char*>(&other->layid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[16]);
}

// ===================================================================

class MMessageForAD::_Internal {
 public:
};

MMessageForAD::MMessageForAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:dgnn_test.MMessageForAD)
}
MMessageForAD::MMessageForAD(const MMessageForAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wid_, &from.wid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_benefit_) -
    reinterpret_cast<char*>(&wid_)) + sizeof(m_benefit_));
  // @@protoc_insertion_point(copy_constructor:dgnn_test.MMessageForAD)
}

inline void MMessageForAD::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m_benefit_) -
    reinterpret_cast<char*>(&wid_)) + sizeof(m_benefit_));
}

MMessageForAD::~MMessageForAD() {
  // @@protoc_insertion_point(destructor:dgnn_test.MMessageForAD)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MMessageForAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MMessageForAD::ArenaDtor(void* object) {
  MMessageForAD* _this = reinterpret_cast< MMessageForAD* >(object);
  (void)_this;
}
void MMessageForAD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MMessageForAD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MMessageForAD::Clear() {
// @@protoc_insertion_point(message_clear_start:dgnn_test.MMessageForAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_benefit_) -
      reinterpret_cast<char*>(&wid_)) + sizeof(m_benefit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MMessageForAD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 wid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          wid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 m_benefit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          m_benefit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MMessageForAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dgnn_test.MMessageForAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wid = 1;
  if (this->_internal_wid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wid(), target);
  }

  // int32 m = 2;
  if (this->_internal_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m(), target);
  }

  // int32 m_benefit = 3;
  if (this->_internal_m_benefit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_benefit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dgnn_test.MMessageForAD)
  return target;
}

size_t MMessageForAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dgnn_test.MMessageForAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wid = 1;
  if (this->_internal_wid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_wid());
  }

  // int32 m = 2;
  if (this->_internal_m() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_m());
  }

  // int32 m_benefit = 3;
  if (this->_internal_m_benefit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_m_benefit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MMessageForAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MMessageForAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MMessageForAD::GetClassData() const { return &_class_data_; }

void MMessageForAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MMessageForAD *>(to)->MergeFrom(
      static_cast<const MMessageForAD &>(from));
}


void MMessageForAD::MergeFrom(const MMessageForAD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dgnn_test.MMessageForAD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_wid() != 0) {
    _internal_set_wid(from._internal_wid());
  }
  if (from._internal_m() != 0) {
    _internal_set_m(from._internal_m());
  }
  if (from._internal_m_benefit() != 0) {
    _internal_set_m_benefit(from._internal_m_benefit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MMessageForAD::CopyFrom(const MMessageForAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dgnn_test.MMessageForAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMessageForAD::IsInitialized() const {
  return true;
}

void MMessageForAD::InternalSwap(MMessageForAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MMessageForAD, m_benefit_)
      + sizeof(MMessageForAD::m_benefit_)
      - PROTOBUF_FIELD_OFFSET(MMessageForAD, wid_)>(
          reinterpret_cast<char*>(&wid_),
          reinterpret_cast<char*>(&other->wid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MMessageForAD::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dgnn_5ftest_2eproto_getter, &descriptor_table_dgnn_5ftest_2eproto_once,
      file_level_metadata_dgnn_5ftest_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dgnn_test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dgnn_test::NullMessage* Arena::CreateMaybeMessage< ::dgnn_test::NullMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::NullMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::LayerNodeListMessage* Arena::CreateMaybeMessage< ::dgnn_test::LayerNodeListMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::LayerNodeListMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::AccuracyMessage* Arena::CreateMaybeMessage< ::dgnn_test::AccuracyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::AccuracyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::EmbGradMessage* Arena::CreateMaybeMessage< ::dgnn_test::EmbGradMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::EmbGradMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::ContextMessage_PartitionMessage* Arena::CreateMaybeMessage< ::dgnn_test::ContextMessage_PartitionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::ContextMessage_PartitionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::ContextMessage* Arena::CreateMaybeMessage< ::dgnn_test::ContextMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::ContextMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::NetInfoMessage* Arena::CreateMaybeMessage< ::dgnn_test::NetInfoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::NetInfoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::ParamGrad* Arena::CreateMaybeMessage< ::dgnn_test::ParamGrad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::ParamGrad >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::IntIntPair* Arena::CreateMaybeMessage< ::dgnn_test::IntIntPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::IntIntPair >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* Arena::CreateMaybeMessage< ::dgnn_test::DataMessage_FeatureMessage_FeatureItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::DataMessage_FeatureMessage_FeatureItem >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::DataMessage_FeatureMessage* Arena::CreateMaybeMessage< ::dgnn_test::DataMessage_FeatureMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::DataMessage_FeatureMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::DataMessage_LabelMessage_LabelItem* Arena::CreateMaybeMessage< ::dgnn_test::DataMessage_LabelMessage_LabelItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::DataMessage_LabelMessage_LabelItem >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::DataMessage_LabelMessage* Arena::CreateMaybeMessage< ::dgnn_test::DataMessage_LabelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::DataMessage_LabelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::DataMessage_AdjMessage_AdjItem* Arena::CreateMaybeMessage< ::dgnn_test::DataMessage_AdjMessage_AdjItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::DataMessage_AdjMessage_AdjItem >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::DataMessage_AdjMessage* Arena::CreateMaybeMessage< ::dgnn_test::DataMessage_AdjMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::DataMessage_AdjMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::DataMessage* Arena::CreateMaybeMessage< ::dgnn_test::DataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::DataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::NodeMessage* Arena::CreateMaybeMessage< ::dgnn_test::NodeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::NodeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dgnn_test::MMessageForAD* Arena::CreateMaybeMessage< ::dgnn_test::MMessageForAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dgnn_test::MMessageForAD >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
