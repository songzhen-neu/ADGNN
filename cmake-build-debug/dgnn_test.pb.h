// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dgnn_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dgnn_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dgnn_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dgnn_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dgnn_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dgnn_5ftest_2eproto;
namespace dgnn_test {
class AccuracyMessage;
struct AccuracyMessageDefaultTypeInternal;
extern AccuracyMessageDefaultTypeInternal _AccuracyMessage_default_instance_;
class ContextMessage;
struct ContextMessageDefaultTypeInternal;
extern ContextMessageDefaultTypeInternal _ContextMessage_default_instance_;
class ContextMessage_PartitionMessage;
struct ContextMessage_PartitionMessageDefaultTypeInternal;
extern ContextMessage_PartitionMessageDefaultTypeInternal _ContextMessage_PartitionMessage_default_instance_;
class DataMessage;
struct DataMessageDefaultTypeInternal;
extern DataMessageDefaultTypeInternal _DataMessage_default_instance_;
class DataMessage_AdjMessage;
struct DataMessage_AdjMessageDefaultTypeInternal;
extern DataMessage_AdjMessageDefaultTypeInternal _DataMessage_AdjMessage_default_instance_;
class DataMessage_AdjMessage_AdjItem;
struct DataMessage_AdjMessage_AdjItemDefaultTypeInternal;
extern DataMessage_AdjMessage_AdjItemDefaultTypeInternal _DataMessage_AdjMessage_AdjItem_default_instance_;
class DataMessage_FeatureMessage;
struct DataMessage_FeatureMessageDefaultTypeInternal;
extern DataMessage_FeatureMessageDefaultTypeInternal _DataMessage_FeatureMessage_default_instance_;
class DataMessage_FeatureMessage_FeatureItem;
struct DataMessage_FeatureMessage_FeatureItemDefaultTypeInternal;
extern DataMessage_FeatureMessage_FeatureItemDefaultTypeInternal _DataMessage_FeatureMessage_FeatureItem_default_instance_;
class DataMessage_LabelMessage;
struct DataMessage_LabelMessageDefaultTypeInternal;
extern DataMessage_LabelMessageDefaultTypeInternal _DataMessage_LabelMessage_default_instance_;
class DataMessage_LabelMessage_LabelItem;
struct DataMessage_LabelMessage_LabelItemDefaultTypeInternal;
extern DataMessage_LabelMessage_LabelItemDefaultTypeInternal _DataMessage_LabelMessage_LabelItem_default_instance_;
class EmbGradMessage;
struct EmbGradMessageDefaultTypeInternal;
extern EmbGradMessageDefaultTypeInternal _EmbGradMessage_default_instance_;
class IntIntPair;
struct IntIntPairDefaultTypeInternal;
extern IntIntPairDefaultTypeInternal _IntIntPair_default_instance_;
class LayerNodeListMessage;
struct LayerNodeListMessageDefaultTypeInternal;
extern LayerNodeListMessageDefaultTypeInternal _LayerNodeListMessage_default_instance_;
class NetInfoMessage;
struct NetInfoMessageDefaultTypeInternal;
extern NetInfoMessageDefaultTypeInternal _NetInfoMessage_default_instance_;
class NodeMessage;
struct NodeMessageDefaultTypeInternal;
extern NodeMessageDefaultTypeInternal _NodeMessage_default_instance_;
class NullMessage;
struct NullMessageDefaultTypeInternal;
extern NullMessageDefaultTypeInternal _NullMessage_default_instance_;
class ParamGrad;
struct ParamGradDefaultTypeInternal;
extern ParamGradDefaultTypeInternal _ParamGrad_default_instance_;
}  // namespace dgnn_test
PROTOBUF_NAMESPACE_OPEN
template<> ::dgnn_test::AccuracyMessage* Arena::CreateMaybeMessage<::dgnn_test::AccuracyMessage>(Arena*);
template<> ::dgnn_test::ContextMessage* Arena::CreateMaybeMessage<::dgnn_test::ContextMessage>(Arena*);
template<> ::dgnn_test::ContextMessage_PartitionMessage* Arena::CreateMaybeMessage<::dgnn_test::ContextMessage_PartitionMessage>(Arena*);
template<> ::dgnn_test::DataMessage* Arena::CreateMaybeMessage<::dgnn_test::DataMessage>(Arena*);
template<> ::dgnn_test::DataMessage_AdjMessage* Arena::CreateMaybeMessage<::dgnn_test::DataMessage_AdjMessage>(Arena*);
template<> ::dgnn_test::DataMessage_AdjMessage_AdjItem* Arena::CreateMaybeMessage<::dgnn_test::DataMessage_AdjMessage_AdjItem>(Arena*);
template<> ::dgnn_test::DataMessage_FeatureMessage* Arena::CreateMaybeMessage<::dgnn_test::DataMessage_FeatureMessage>(Arena*);
template<> ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* Arena::CreateMaybeMessage<::dgnn_test::DataMessage_FeatureMessage_FeatureItem>(Arena*);
template<> ::dgnn_test::DataMessage_LabelMessage* Arena::CreateMaybeMessage<::dgnn_test::DataMessage_LabelMessage>(Arena*);
template<> ::dgnn_test::DataMessage_LabelMessage_LabelItem* Arena::CreateMaybeMessage<::dgnn_test::DataMessage_LabelMessage_LabelItem>(Arena*);
template<> ::dgnn_test::EmbGradMessage* Arena::CreateMaybeMessage<::dgnn_test::EmbGradMessage>(Arena*);
template<> ::dgnn_test::IntIntPair* Arena::CreateMaybeMessage<::dgnn_test::IntIntPair>(Arena*);
template<> ::dgnn_test::LayerNodeListMessage* Arena::CreateMaybeMessage<::dgnn_test::LayerNodeListMessage>(Arena*);
template<> ::dgnn_test::NetInfoMessage* Arena::CreateMaybeMessage<::dgnn_test::NetInfoMessage>(Arena*);
template<> ::dgnn_test::NodeMessage* Arena::CreateMaybeMessage<::dgnn_test::NodeMessage>(Arena*);
template<> ::dgnn_test::NullMessage* Arena::CreateMaybeMessage<::dgnn_test::NullMessage>(Arena*);
template<> ::dgnn_test::ParamGrad* Arena::CreateMaybeMessage<::dgnn_test::ParamGrad>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dgnn_test {

// ===================================================================

class NullMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dgnn_test.NullMessage) */ {
 public:
  inline NullMessage() : NullMessage(nullptr) {}
  explicit constexpr NullMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullMessage(const NullMessage& from);
  NullMessage(NullMessage&& from) noexcept
    : NullMessage() {
    *this = ::std::move(from);
  }

  inline NullMessage& operator=(const NullMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullMessage& operator=(NullMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullMessage* internal_default_instance() {
    return reinterpret_cast<const NullMessage*>(
               &_NullMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NullMessage& a, NullMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NullMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NullMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NullMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NullMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NullMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.NullMessage";
  }
  protected:
  explicit NullMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dgnn_test.NullMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class LayerNodeListMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.LayerNodeListMessage) */ {
 public:
  inline LayerNodeListMessage() : LayerNodeListMessage(nullptr) {}
  ~LayerNodeListMessage() override;
  explicit constexpr LayerNodeListMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerNodeListMessage(const LayerNodeListMessage& from);
  LayerNodeListMessage(LayerNodeListMessage&& from) noexcept
    : LayerNodeListMessage() {
    *this = ::std::move(from);
  }

  inline LayerNodeListMessage& operator=(const LayerNodeListMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerNodeListMessage& operator=(LayerNodeListMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayerNodeListMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerNodeListMessage* internal_default_instance() {
    return reinterpret_cast<const LayerNodeListMessage*>(
               &_LayerNodeListMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LayerNodeListMessage& a, LayerNodeListMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerNodeListMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerNodeListMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerNodeListMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerNodeListMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayerNodeListMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayerNodeListMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerNodeListMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.LayerNodeListMessage";
  }
  protected:
  explicit LayerNodeListMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNodesFieldNumber = 1,
  };
  // repeated .dgnn_test.NodeMessage layer_nodes = 1;
  int layer_nodes_size() const;
  private:
  int _internal_layer_nodes_size() const;
  public:
  void clear_layer_nodes();
  ::dgnn_test::NodeMessage* mutable_layer_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage >*
      mutable_layer_nodes();
  private:
  const ::dgnn_test::NodeMessage& _internal_layer_nodes(int index) const;
  ::dgnn_test::NodeMessage* _internal_add_layer_nodes();
  public:
  const ::dgnn_test::NodeMessage& layer_nodes(int index) const;
  ::dgnn_test::NodeMessage* add_layer_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage >&
      layer_nodes() const;

  // @@protoc_insertion_point(class_scope:dgnn_test.LayerNodeListMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage > layer_nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class AccuracyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.AccuracyMessage) */ {
 public:
  inline AccuracyMessage() : AccuracyMessage(nullptr) {}
  ~AccuracyMessage() override;
  explicit constexpr AccuracyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccuracyMessage(const AccuracyMessage& from);
  AccuracyMessage(AccuracyMessage&& from) noexcept
    : AccuracyMessage() {
    *this = ::std::move(from);
  }

  inline AccuracyMessage& operator=(const AccuracyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccuracyMessage& operator=(AccuracyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccuracyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccuracyMessage* internal_default_instance() {
    return reinterpret_cast<const AccuracyMessage*>(
               &_AccuracyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccuracyMessage& a, AccuracyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AccuracyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccuracyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccuracyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccuracyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccuracyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccuracyMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccuracyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.AccuracyMessage";
  }
  protected:
  explicit AccuracyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValAccFieldNumber = 1,
    kValAccEntireFieldNumber = 2,
    kTrainAccFieldNumber = 3,
    kTrainAccEntireFieldNumber = 4,
    kTestAccFieldNumber = 5,
    kTestAccEntireFieldNumber = 6,
    kTestF1FieldNumber = 7,
    kValF1FieldNumber = 8,
    kTestF1EntireFieldNumber = 9,
    kValF1EntireFieldNumber = 10,
  };
  // float val_acc = 1;
  void clear_val_acc();
  float val_acc() const;
  void set_val_acc(float value);
  private:
  float _internal_val_acc() const;
  void _internal_set_val_acc(float value);
  public:

  // float val_acc_entire = 2;
  void clear_val_acc_entire();
  float val_acc_entire() const;
  void set_val_acc_entire(float value);
  private:
  float _internal_val_acc_entire() const;
  void _internal_set_val_acc_entire(float value);
  public:

  // float train_acc = 3;
  void clear_train_acc();
  float train_acc() const;
  void set_train_acc(float value);
  private:
  float _internal_train_acc() const;
  void _internal_set_train_acc(float value);
  public:

  // float train_acc_entire = 4;
  void clear_train_acc_entire();
  float train_acc_entire() const;
  void set_train_acc_entire(float value);
  private:
  float _internal_train_acc_entire() const;
  void _internal_set_train_acc_entire(float value);
  public:

  // float test_acc = 5;
  void clear_test_acc();
  float test_acc() const;
  void set_test_acc(float value);
  private:
  float _internal_test_acc() const;
  void _internal_set_test_acc(float value);
  public:

  // float test_acc_entire = 6;
  void clear_test_acc_entire();
  float test_acc_entire() const;
  void set_test_acc_entire(float value);
  private:
  float _internal_test_acc_entire() const;
  void _internal_set_test_acc_entire(float value);
  public:

  // float test_f1 = 7;
  void clear_test_f1();
  float test_f1() const;
  void set_test_f1(float value);
  private:
  float _internal_test_f1() const;
  void _internal_set_test_f1(float value);
  public:

  // float val_f1 = 8;
  void clear_val_f1();
  float val_f1() const;
  void set_val_f1(float value);
  private:
  float _internal_val_f1() const;
  void _internal_set_val_f1(float value);
  public:

  // float test_f1_entire = 9;
  void clear_test_f1_entire();
  float test_f1_entire() const;
  void set_test_f1_entire(float value);
  private:
  float _internal_test_f1_entire() const;
  void _internal_set_test_f1_entire(float value);
  public:

  // float val_f1_entire = 10;
  void clear_val_f1_entire();
  float val_f1_entire() const;
  void set_val_f1_entire(float value);
  private:
  float _internal_val_f1_entire() const;
  void _internal_set_val_f1_entire(float value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.AccuracyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float val_acc_;
  float val_acc_entire_;
  float train_acc_;
  float train_acc_entire_;
  float test_acc_;
  float test_acc_entire_;
  float test_f1_;
  float val_f1_;
  float test_f1_entire_;
  float val_f1_entire_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class EmbGradMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.EmbGradMessage) */ {
 public:
  inline EmbGradMessage() : EmbGradMessage(nullptr) {}
  ~EmbGradMessage() override;
  explicit constexpr EmbGradMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbGradMessage(const EmbGradMessage& from);
  EmbGradMessage(EmbGradMessage&& from) noexcept
    : EmbGradMessage() {
    *this = ::std::move(from);
  }

  inline EmbGradMessage& operator=(const EmbGradMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbGradMessage& operator=(EmbGradMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmbGradMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbGradMessage* internal_default_instance() {
    return reinterpret_cast<const EmbGradMessage*>(
               &_EmbGradMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmbGradMessage& a, EmbGradMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbGradMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbGradMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbGradMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbGradMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmbGradMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EmbGradMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbGradMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.EmbGradMessage";
  }
  protected:
  explicit EmbGradMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kEmbsFieldNumber = 8,
    kStatusFieldNumber = 4,
    kLayerIdFieldNumber = 2,
    kWorkerIdFieldNumber = 3,
    kEpochFieldNumber = 5,
    kFeatsizeFieldNumber = 6,
    kNodesizeFieldNumber = 7,
  };
  // repeated int32 nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  private:
  int32_t _internal_nodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_nodes() const;
  void _internal_add_nodes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_nodes();
  public:
  int32_t nodes(int index) const;
  void set_nodes(int index, int32_t value);
  void add_nodes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_nodes();

  // repeated float embs = 8;
  int embs_size() const;
  private:
  int _internal_embs_size() const;
  public:
  void clear_embs();
  private:
  float _internal_embs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_embs() const;
  void _internal_add_embs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_embs();
  public:
  float embs(int index) const;
  void set_embs(int index, float value);
  void add_embs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      embs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_embs();

  // string status = 4;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 layerId = 2;
  void clear_layerid();
  int32_t layerid() const;
  void set_layerid(int32_t value);
  private:
  int32_t _internal_layerid() const;
  void _internal_set_layerid(int32_t value);
  public:

  // int32 workerId = 3;
  void clear_workerid();
  int32_t workerid() const;
  void set_workerid(int32_t value);
  private:
  int32_t _internal_workerid() const;
  void _internal_set_workerid(int32_t value);
  public:

  // int32 epoch = 5;
  void clear_epoch();
  int32_t epoch() const;
  void set_epoch(int32_t value);
  private:
  int32_t _internal_epoch() const;
  void _internal_set_epoch(int32_t value);
  public:

  // int32 featsize = 6;
  void clear_featsize();
  int32_t featsize() const;
  void set_featsize(int32_t value);
  private:
  int32_t _internal_featsize() const;
  void _internal_set_featsize(int32_t value);
  public:

  // int32 nodesize = 7;
  void clear_nodesize();
  int32_t nodesize() const;
  void set_nodesize(int32_t value);
  private:
  int32_t _internal_nodesize() const;
  void _internal_set_nodesize(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.EmbGradMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > nodes_;
  mutable std::atomic<int> _nodes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > embs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  int32_t layerid_;
  int32_t workerid_;
  int32_t epoch_;
  int32_t featsize_;
  int32_t nodesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ContextMessage_PartitionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.ContextMessage.PartitionMessage) */ {
 public:
  inline ContextMessage_PartitionMessage() : ContextMessage_PartitionMessage(nullptr) {}
  ~ContextMessage_PartitionMessage() override;
  explicit constexpr ContextMessage_PartitionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContextMessage_PartitionMessage(const ContextMessage_PartitionMessage& from);
  ContextMessage_PartitionMessage(ContextMessage_PartitionMessage&& from) noexcept
    : ContextMessage_PartitionMessage() {
    *this = ::std::move(from);
  }

  inline ContextMessage_PartitionMessage& operator=(const ContextMessage_PartitionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContextMessage_PartitionMessage& operator=(ContextMessage_PartitionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContextMessage_PartitionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContextMessage_PartitionMessage* internal_default_instance() {
    return reinterpret_cast<const ContextMessage_PartitionMessage*>(
               &_ContextMessage_PartitionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContextMessage_PartitionMessage& a, ContextMessage_PartitionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ContextMessage_PartitionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContextMessage_PartitionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContextMessage_PartitionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContextMessage_PartitionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContextMessage_PartitionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContextMessage_PartitionMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContextMessage_PartitionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.ContextMessage.PartitionMessage";
  }
  protected:
  explicit ContextMessage_PartitionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPathFieldNumber = 3,
    kPartitionMethodFieldNumber = 6,
    kDataNumFieldNumber = 1,
    kWorkerNumFieldNumber = 2,
    kFeatureDimFieldNumber = 4,
    kClassNumFieldNumber = 5,
    kEdgeNumFieldNumber = 7,
  };
  // string dataPath = 3;
  void clear_datapath();
  const std::string& datapath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datapath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datapath();
  PROTOBUF_NODISCARD std::string* release_datapath();
  void set_allocated_datapath(std::string* datapath);
  private:
  const std::string& _internal_datapath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datapath(const std::string& value);
  std::string* _internal_mutable_datapath();
  public:

  // string partitionMethod = 6;
  void clear_partitionmethod();
  const std::string& partitionmethod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partitionmethod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partitionmethod();
  PROTOBUF_NODISCARD std::string* release_partitionmethod();
  void set_allocated_partitionmethod(std::string* partitionmethod);
  private:
  const std::string& _internal_partitionmethod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partitionmethod(const std::string& value);
  std::string* _internal_mutable_partitionmethod();
  public:

  // int32 dataNum = 1;
  void clear_datanum();
  int32_t datanum() const;
  void set_datanum(int32_t value);
  private:
  int32_t _internal_datanum() const;
  void _internal_set_datanum(int32_t value);
  public:

  // int32 workerNum = 2;
  void clear_workernum();
  int32_t workernum() const;
  void set_workernum(int32_t value);
  private:
  int32_t _internal_workernum() const;
  void _internal_set_workernum(int32_t value);
  public:

  // int32 featureDim = 4;
  void clear_featuredim();
  int32_t featuredim() const;
  void set_featuredim(int32_t value);
  private:
  int32_t _internal_featuredim() const;
  void _internal_set_featuredim(int32_t value);
  public:

  // int32 classNum = 5;
  void clear_classnum();
  int32_t classnum() const;
  void set_classnum(int32_t value);
  private:
  int32_t _internal_classnum() const;
  void _internal_set_classnum(int32_t value);
  public:

  // int32 edgeNum = 7;
  void clear_edgenum();
  int32_t edgenum() const;
  void set_edgenum(int32_t value);
  private:
  int32_t _internal_edgenum() const;
  void _internal_set_edgenum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.ContextMessage.PartitionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datapath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partitionmethod_;
  int32_t datanum_;
  int32_t workernum_;
  int32_t featuredim_;
  int32_t classnum_;
  int32_t edgenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ContextMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.ContextMessage) */ {
 public:
  inline ContextMessage() : ContextMessage(nullptr) {}
  ~ContextMessage() override;
  explicit constexpr ContextMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContextMessage(const ContextMessage& from);
  ContextMessage(ContextMessage&& from) noexcept
    : ContextMessage() {
    *this = ::std::move(from);
  }

  inline ContextMessage& operator=(const ContextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContextMessage& operator=(ContextMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContextMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContextMessage* internal_default_instance() {
    return reinterpret_cast<const ContextMessage*>(
               &_ContextMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ContextMessage& a, ContextMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ContextMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContextMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContextMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContextMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContextMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContextMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContextMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.ContextMessage";
  }
  protected:
  explicit ContextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContextMessage_PartitionMessage PartitionMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kPartitionFieldNumber = 4,
    kWorkerIdFieldNumber = 1,
    kWorkerNumFieldNumber = 3,
  };
  // repeated string address = 2;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  const std::string& address(int index) const;
  std::string* mutable_address(int index);
  void set_address(int index, const std::string& value);
  void set_address(int index, std::string&& value);
  void set_address(int index, const char* value);
  void set_address(int index, const char* value, size_t size);
  std::string* add_address();
  void add_address(const std::string& value);
  void add_address(std::string&& value);
  void add_address(const char* value);
  void add_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address();
  private:
  const std::string& _internal_address(int index) const;
  std::string* _internal_add_address();
  public:

  // .dgnn_test.ContextMessage.PartitionMessage partition = 4;
  bool has_partition() const;
  private:
  bool _internal_has_partition() const;
  public:
  void clear_partition();
  const ::dgnn_test::ContextMessage_PartitionMessage& partition() const;
  PROTOBUF_NODISCARD ::dgnn_test::ContextMessage_PartitionMessage* release_partition();
  ::dgnn_test::ContextMessage_PartitionMessage* mutable_partition();
  void set_allocated_partition(::dgnn_test::ContextMessage_PartitionMessage* partition);
  private:
  const ::dgnn_test::ContextMessage_PartitionMessage& _internal_partition() const;
  ::dgnn_test::ContextMessage_PartitionMessage* _internal_mutable_partition();
  public:
  void unsafe_arena_set_allocated_partition(
      ::dgnn_test::ContextMessage_PartitionMessage* partition);
  ::dgnn_test::ContextMessage_PartitionMessage* unsafe_arena_release_partition();

  // int32 workerId = 1;
  void clear_workerid();
  int32_t workerid() const;
  void set_workerid(int32_t value);
  private:
  int32_t _internal_workerid() const;
  void _internal_set_workerid(int32_t value);
  public:

  // int32 workerNum = 3;
  void clear_workernum();
  int32_t workernum() const;
  void set_workernum(int32_t value);
  private:
  int32_t _internal_workernum() const;
  void _internal_set_workernum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.ContextMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_;
  ::dgnn_test::ContextMessage_PartitionMessage* partition_;
  int32_t workerid_;
  int32_t workernum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class NetInfoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.NetInfoMessage) */ {
 public:
  inline NetInfoMessage() : NetInfoMessage(nullptr) {}
  ~NetInfoMessage() override;
  explicit constexpr NetInfoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInfoMessage(const NetInfoMessage& from);
  NetInfoMessage(NetInfoMessage&& from) noexcept
    : NetInfoMessage() {
    *this = ::std::move(from);
  }

  inline NetInfoMessage& operator=(const NetInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfoMessage& operator=(NetInfoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInfoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInfoMessage* internal_default_instance() {
    return reinterpret_cast<const NetInfoMessage*>(
               &_NetInfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NetInfoMessage& a, NetInfoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInfoMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInfoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInfoMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInfoMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInfoMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInfoMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.NetInfoMessage";
  }
  protected:
  explicit NetInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiddenDimFieldNumber = 3,
    kParamsFieldNumber = 7,
    kWidFieldNumber = 1,
    kFeatureDimFieldNumber = 2,
    kClassDimFieldNumber = 4,
    kWorkerNumFieldNumber = 5,
    kServerNumFieldNumber = 6,
  };
  // repeated int32 hiddenDim = 3;
  int hiddendim_size() const;
  private:
  int _internal_hiddendim_size() const;
  public:
  void clear_hiddendim();
  private:
  int32_t _internal_hiddendim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_hiddendim() const;
  void _internal_add_hiddendim(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_hiddendim();
  public:
  int32_t hiddendim(int index) const;
  void set_hiddendim(int index, int32_t value);
  void add_hiddendim(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      hiddendim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_hiddendim();

  // repeated .dgnn_test.ParamGrad params = 7;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::dgnn_test::ParamGrad* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::ParamGrad >*
      mutable_params();
  private:
  const ::dgnn_test::ParamGrad& _internal_params(int index) const;
  ::dgnn_test::ParamGrad* _internal_add_params();
  public:
  const ::dgnn_test::ParamGrad& params(int index) const;
  ::dgnn_test::ParamGrad* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::ParamGrad >&
      params() const;

  // int32 wid = 1;
  void clear_wid();
  int32_t wid() const;
  void set_wid(int32_t value);
  private:
  int32_t _internal_wid() const;
  void _internal_set_wid(int32_t value);
  public:

  // int32 featureDim = 2;
  void clear_featuredim();
  int32_t featuredim() const;
  void set_featuredim(int32_t value);
  private:
  int32_t _internal_featuredim() const;
  void _internal_set_featuredim(int32_t value);
  public:

  // int32 classDim = 4;
  void clear_classdim();
  int32_t classdim() const;
  void set_classdim(int32_t value);
  private:
  int32_t _internal_classdim() const;
  void _internal_set_classdim(int32_t value);
  public:

  // int32 workerNum = 5;
  void clear_workernum();
  int32_t workernum() const;
  void set_workernum(int32_t value);
  private:
  int32_t _internal_workernum() const;
  void _internal_set_workernum(int32_t value);
  public:

  // int32 serverNum = 6;
  void clear_servernum();
  int32_t servernum() const;
  void set_servernum(int32_t value);
  private:
  int32_t _internal_servernum() const;
  void _internal_set_servernum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.NetInfoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > hiddendim_;
  mutable std::atomic<int> _hiddendim_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::ParamGrad > params_;
  int32_t wid_;
  int32_t featuredim_;
  int32_t classdim_;
  int32_t workernum_;
  int32_t servernum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ParamGrad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.ParamGrad) */ {
 public:
  inline ParamGrad() : ParamGrad(nullptr) {}
  ~ParamGrad() override;
  explicit constexpr ParamGrad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamGrad(const ParamGrad& from);
  ParamGrad(ParamGrad&& from) noexcept
    : ParamGrad() {
    *this = ::std::move(from);
  }

  inline ParamGrad& operator=(const ParamGrad& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamGrad& operator=(ParamGrad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamGrad& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamGrad* internal_default_instance() {
    return reinterpret_cast<const ParamGrad*>(
               &_ParamGrad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ParamGrad& a, ParamGrad& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamGrad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamGrad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParamGrad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParamGrad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamGrad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParamGrad& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamGrad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.ParamGrad";
  }
  protected:
  explicit ParamGrad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 5,
    kIdFieldNumber = 1,
    kWidFieldNumber = 2,
    kSidFieldNumber = 3,
    kLrFieldNumber = 4,
  };
  // repeated double elems = 5;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  private:
  double _internal_elems(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_elems() const;
  void _internal_add_elems(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_elems();
  public:
  double elems(int index) const;
  void set_elems(int index, double value);
  void add_elems(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      elems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_elems();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 wid = 2;
  void clear_wid();
  int32_t wid() const;
  void set_wid(int32_t value);
  private:
  int32_t _internal_wid() const;
  void _internal_set_wid(int32_t value);
  public:

  // int32 sid = 3;
  void clear_sid();
  int32_t sid() const;
  void set_sid(int32_t value);
  private:
  int32_t _internal_sid() const;
  void _internal_set_sid(int32_t value);
  public:

  // float lr = 4;
  void clear_lr();
  float lr() const;
  void set_lr(float value);
  private:
  float _internal_lr() const;
  void _internal_set_lr(float value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.ParamGrad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > elems_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int32_t wid_;
  int32_t sid_;
  float lr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class IntIntPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.IntIntPair) */ {
 public:
  inline IntIntPair() : IntIntPair(nullptr) {}
  ~IntIntPair() override;
  explicit constexpr IntIntPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntIntPair(const IntIntPair& from);
  IntIntPair(IntIntPair&& from) noexcept
    : IntIntPair() {
    *this = ::std::move(from);
  }

  inline IntIntPair& operator=(const IntIntPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntIntPair& operator=(IntIntPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntIntPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntIntPair* internal_default_instance() {
    return reinterpret_cast<const IntIntPair*>(
               &_IntIntPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IntIntPair& a, IntIntPair& b) {
    a.Swap(&b);
  }
  inline void Swap(IntIntPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntIntPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntIntPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntIntPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntIntPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IntIntPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntIntPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.IntIntPair";
  }
  protected:
  explicit IntIntPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 key = 1;
  void clear_key();
  int32_t key() const;
  void set_key(int32_t value);
  private:
  int32_t _internal_key() const;
  void _internal_set_key(int32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.IntIntPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t key_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DataMessage_FeatureMessage_FeatureItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.DataMessage.FeatureMessage.FeatureItem) */ {
 public:
  inline DataMessage_FeatureMessage_FeatureItem() : DataMessage_FeatureMessage_FeatureItem(nullptr) {}
  ~DataMessage_FeatureMessage_FeatureItem() override;
  explicit constexpr DataMessage_FeatureMessage_FeatureItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage_FeatureMessage_FeatureItem(const DataMessage_FeatureMessage_FeatureItem& from);
  DataMessage_FeatureMessage_FeatureItem(DataMessage_FeatureMessage_FeatureItem&& from) noexcept
    : DataMessage_FeatureMessage_FeatureItem() {
    *this = ::std::move(from);
  }

  inline DataMessage_FeatureMessage_FeatureItem& operator=(const DataMessage_FeatureMessage_FeatureItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage_FeatureMessage_FeatureItem& operator=(DataMessage_FeatureMessage_FeatureItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage_FeatureMessage_FeatureItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMessage_FeatureMessage_FeatureItem* internal_default_instance() {
    return reinterpret_cast<const DataMessage_FeatureMessage_FeatureItem*>(
               &_DataMessage_FeatureMessage_FeatureItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DataMessage_FeatureMessage_FeatureItem& a, DataMessage_FeatureMessage_FeatureItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage_FeatureMessage_FeatureItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage_FeatureMessage_FeatureItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage_FeatureMessage_FeatureItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage_FeatureMessage_FeatureItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage_FeatureMessage_FeatureItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataMessage_FeatureMessage_FeatureItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage_FeatureMessage_FeatureItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.DataMessage.FeatureMessage.FeatureItem";
  }
  protected:
  explicit DataMessage_FeatureMessage_FeatureItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 2,
    kVidFieldNumber = 1,
  };
  // repeated float feature = 2;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  private:
  float _internal_feature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature() const;
  void _internal_add_feature(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature();
  public:
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature();

  // int32 vid = 1;
  void clear_vid();
  int32_t vid() const;
  void set_vid(int32_t value);
  private:
  int32_t _internal_vid() const;
  void _internal_set_vid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.DataMessage.FeatureMessage.FeatureItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature_;
  int32_t vid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DataMessage_FeatureMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.DataMessage.FeatureMessage) */ {
 public:
  inline DataMessage_FeatureMessage() : DataMessage_FeatureMessage(nullptr) {}
  ~DataMessage_FeatureMessage() override;
  explicit constexpr DataMessage_FeatureMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage_FeatureMessage(const DataMessage_FeatureMessage& from);
  DataMessage_FeatureMessage(DataMessage_FeatureMessage&& from) noexcept
    : DataMessage_FeatureMessage() {
    *this = ::std::move(from);
  }

  inline DataMessage_FeatureMessage& operator=(const DataMessage_FeatureMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage_FeatureMessage& operator=(DataMessage_FeatureMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage_FeatureMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMessage_FeatureMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage_FeatureMessage*>(
               &_DataMessage_FeatureMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DataMessage_FeatureMessage& a, DataMessage_FeatureMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage_FeatureMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage_FeatureMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage_FeatureMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage_FeatureMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage_FeatureMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataMessage_FeatureMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage_FeatureMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.DataMessage.FeatureMessage";
  }
  protected:
  explicit DataMessage_FeatureMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataMessage_FeatureMessage_FeatureItem FeatureItem;

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 1,
  };
  // repeated .dgnn_test.DataMessage.FeatureMessage.FeatureItem features = 1;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_FeatureMessage_FeatureItem >*
      mutable_features();
  private:
  const ::dgnn_test::DataMessage_FeatureMessage_FeatureItem& _internal_features(int index) const;
  ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* _internal_add_features();
  public:
  const ::dgnn_test::DataMessage_FeatureMessage_FeatureItem& features(int index) const;
  ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_FeatureMessage_FeatureItem >&
      features() const;

  // @@protoc_insertion_point(class_scope:dgnn_test.DataMessage.FeatureMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_FeatureMessage_FeatureItem > features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DataMessage_LabelMessage_LabelItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.DataMessage.LabelMessage.LabelItem) */ {
 public:
  inline DataMessage_LabelMessage_LabelItem() : DataMessage_LabelMessage_LabelItem(nullptr) {}
  ~DataMessage_LabelMessage_LabelItem() override;
  explicit constexpr DataMessage_LabelMessage_LabelItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage_LabelMessage_LabelItem(const DataMessage_LabelMessage_LabelItem& from);
  DataMessage_LabelMessage_LabelItem(DataMessage_LabelMessage_LabelItem&& from) noexcept
    : DataMessage_LabelMessage_LabelItem() {
    *this = ::std::move(from);
  }

  inline DataMessage_LabelMessage_LabelItem& operator=(const DataMessage_LabelMessage_LabelItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage_LabelMessage_LabelItem& operator=(DataMessage_LabelMessage_LabelItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage_LabelMessage_LabelItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMessage_LabelMessage_LabelItem* internal_default_instance() {
    return reinterpret_cast<const DataMessage_LabelMessage_LabelItem*>(
               &_DataMessage_LabelMessage_LabelItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DataMessage_LabelMessage_LabelItem& a, DataMessage_LabelMessage_LabelItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage_LabelMessage_LabelItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage_LabelMessage_LabelItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage_LabelMessage_LabelItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage_LabelMessage_LabelItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage_LabelMessage_LabelItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataMessage_LabelMessage_LabelItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage_LabelMessage_LabelItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.DataMessage.LabelMessage.LabelItem";
  }
  protected:
  explicit DataMessage_LabelMessage_LabelItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kLabelFieldNumber = 2,
  };
  // int32 vid = 1;
  void clear_vid();
  int32_t vid() const;
  void set_vid(int32_t value);
  private:
  int32_t _internal_vid() const;
  void _internal_set_vid(int32_t value);
  public:

  // int32 label = 2;
  void clear_label();
  int32_t label() const;
  void set_label(int32_t value);
  private:
  int32_t _internal_label() const;
  void _internal_set_label(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.DataMessage.LabelMessage.LabelItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t vid_;
  int32_t label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DataMessage_LabelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.DataMessage.LabelMessage) */ {
 public:
  inline DataMessage_LabelMessage() : DataMessage_LabelMessage(nullptr) {}
  ~DataMessage_LabelMessage() override;
  explicit constexpr DataMessage_LabelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage_LabelMessage(const DataMessage_LabelMessage& from);
  DataMessage_LabelMessage(DataMessage_LabelMessage&& from) noexcept
    : DataMessage_LabelMessage() {
    *this = ::std::move(from);
  }

  inline DataMessage_LabelMessage& operator=(const DataMessage_LabelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage_LabelMessage& operator=(DataMessage_LabelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage_LabelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMessage_LabelMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage_LabelMessage*>(
               &_DataMessage_LabelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DataMessage_LabelMessage& a, DataMessage_LabelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage_LabelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage_LabelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage_LabelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage_LabelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage_LabelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataMessage_LabelMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage_LabelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.DataMessage.LabelMessage";
  }
  protected:
  explicit DataMessage_LabelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataMessage_LabelMessage_LabelItem LabelItem;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
  };
  // repeated .dgnn_test.DataMessage.LabelMessage.LabelItem labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::dgnn_test::DataMessage_LabelMessage_LabelItem* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_LabelMessage_LabelItem >*
      mutable_labels();
  private:
  const ::dgnn_test::DataMessage_LabelMessage_LabelItem& _internal_labels(int index) const;
  ::dgnn_test::DataMessage_LabelMessage_LabelItem* _internal_add_labels();
  public:
  const ::dgnn_test::DataMessage_LabelMessage_LabelItem& labels(int index) const;
  ::dgnn_test::DataMessage_LabelMessage_LabelItem* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_LabelMessage_LabelItem >&
      labels() const;

  // @@protoc_insertion_point(class_scope:dgnn_test.DataMessage.LabelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_LabelMessage_LabelItem > labels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DataMessage_AdjMessage_AdjItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.DataMessage.AdjMessage.AdjItem) */ {
 public:
  inline DataMessage_AdjMessage_AdjItem() : DataMessage_AdjMessage_AdjItem(nullptr) {}
  ~DataMessage_AdjMessage_AdjItem() override;
  explicit constexpr DataMessage_AdjMessage_AdjItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage_AdjMessage_AdjItem(const DataMessage_AdjMessage_AdjItem& from);
  DataMessage_AdjMessage_AdjItem(DataMessage_AdjMessage_AdjItem&& from) noexcept
    : DataMessage_AdjMessage_AdjItem() {
    *this = ::std::move(from);
  }

  inline DataMessage_AdjMessage_AdjItem& operator=(const DataMessage_AdjMessage_AdjItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage_AdjMessage_AdjItem& operator=(DataMessage_AdjMessage_AdjItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage_AdjMessage_AdjItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMessage_AdjMessage_AdjItem* internal_default_instance() {
    return reinterpret_cast<const DataMessage_AdjMessage_AdjItem*>(
               &_DataMessage_AdjMessage_AdjItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DataMessage_AdjMessage_AdjItem& a, DataMessage_AdjMessage_AdjItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage_AdjMessage_AdjItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage_AdjMessage_AdjItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage_AdjMessage_AdjItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage_AdjMessage_AdjItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage_AdjMessage_AdjItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataMessage_AdjMessage_AdjItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage_AdjMessage_AdjItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.DataMessage.AdjMessage.AdjItem";
  }
  protected:
  explicit DataMessage_AdjMessage_AdjItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeiborsFieldNumber = 2,
    kVidFieldNumber = 1,
  };
  // repeated int32 neibors = 2;
  int neibors_size() const;
  private:
  int _internal_neibors_size() const;
  public:
  void clear_neibors();
  private:
  int32_t _internal_neibors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_neibors() const;
  void _internal_add_neibors(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_neibors();
  public:
  int32_t neibors(int index) const;
  void set_neibors(int index, int32_t value);
  void add_neibors(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      neibors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_neibors();

  // int32 vid = 1;
  void clear_vid();
  int32_t vid() const;
  void set_vid(int32_t value);
  private:
  int32_t _internal_vid() const;
  void _internal_set_vid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.DataMessage.AdjMessage.AdjItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > neibors_;
  mutable std::atomic<int> _neibors_cached_byte_size_;
  int32_t vid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DataMessage_AdjMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.DataMessage.AdjMessage) */ {
 public:
  inline DataMessage_AdjMessage() : DataMessage_AdjMessage(nullptr) {}
  ~DataMessage_AdjMessage() override;
  explicit constexpr DataMessage_AdjMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage_AdjMessage(const DataMessage_AdjMessage& from);
  DataMessage_AdjMessage(DataMessage_AdjMessage&& from) noexcept
    : DataMessage_AdjMessage() {
    *this = ::std::move(from);
  }

  inline DataMessage_AdjMessage& operator=(const DataMessage_AdjMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage_AdjMessage& operator=(DataMessage_AdjMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage_AdjMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMessage_AdjMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage_AdjMessage*>(
               &_DataMessage_AdjMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DataMessage_AdjMessage& a, DataMessage_AdjMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage_AdjMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage_AdjMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage_AdjMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage_AdjMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage_AdjMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataMessage_AdjMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage_AdjMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.DataMessage.AdjMessage";
  }
  protected:
  explicit DataMessage_AdjMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataMessage_AdjMessage_AdjItem AdjItem;

  // accessors -------------------------------------------------------

  enum : int {
    kAdjsFieldNumber = 1,
  };
  // repeated .dgnn_test.DataMessage.AdjMessage.AdjItem adjs = 1;
  int adjs_size() const;
  private:
  int _internal_adjs_size() const;
  public:
  void clear_adjs();
  ::dgnn_test::DataMessage_AdjMessage_AdjItem* mutable_adjs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_AdjMessage_AdjItem >*
      mutable_adjs();
  private:
  const ::dgnn_test::DataMessage_AdjMessage_AdjItem& _internal_adjs(int index) const;
  ::dgnn_test::DataMessage_AdjMessage_AdjItem* _internal_add_adjs();
  public:
  const ::dgnn_test::DataMessage_AdjMessage_AdjItem& adjs(int index) const;
  ::dgnn_test::DataMessage_AdjMessage_AdjItem* add_adjs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_AdjMessage_AdjItem >&
      adjs() const;

  // @@protoc_insertion_point(class_scope:dgnn_test.DataMessage.AdjMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_AdjMessage_AdjItem > adjs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DataMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.DataMessage) */ {
 public:
  inline DataMessage() : DataMessage(nullptr) {}
  ~DataMessage() override;
  explicit constexpr DataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataMessage(const DataMessage& from);
  DataMessage(DataMessage&& from) noexcept
    : DataMessage() {
    *this = ::std::move(from);
  }

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage& operator=(DataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage*>(
               &_DataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DataMessage& a, DataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.DataMessage";
  }
  protected:
  explicit DataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataMessage_FeatureMessage FeatureMessage;
  typedef DataMessage_LabelMessage LabelMessage;
  typedef DataMessage_AdjMessage AdjMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kNodesForEachWorkerFieldNumber = 5,
    kDegreeMapFieldNumber = 6,
    kNodeListFieldNumber = 1,
    kAdjListFieldNumber = 2,
    kFeatureListFieldNumber = 3,
    kLabelListFieldNumber = 4,
  };
  // repeated .dgnn_test.NodeMessage nodesForEachWorker = 5;
  int nodesforeachworker_size() const;
  private:
  int _internal_nodesforeachworker_size() const;
  public:
  void clear_nodesforeachworker();
  ::dgnn_test::NodeMessage* mutable_nodesforeachworker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage >*
      mutable_nodesforeachworker();
  private:
  const ::dgnn_test::NodeMessage& _internal_nodesforeachworker(int index) const;
  ::dgnn_test::NodeMessage* _internal_add_nodesforeachworker();
  public:
  const ::dgnn_test::NodeMessage& nodesforeachworker(int index) const;
  ::dgnn_test::NodeMessage* add_nodesforeachworker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage >&
      nodesforeachworker() const;

  // repeated .dgnn_test.IntIntPair degreeMap = 6;
  int degreemap_size() const;
  private:
  int _internal_degreemap_size() const;
  public:
  void clear_degreemap();
  ::dgnn_test::IntIntPair* mutable_degreemap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::IntIntPair >*
      mutable_degreemap();
  private:
  const ::dgnn_test::IntIntPair& _internal_degreemap(int index) const;
  ::dgnn_test::IntIntPair* _internal_add_degreemap();
  public:
  const ::dgnn_test::IntIntPair& degreemap(int index) const;
  ::dgnn_test::IntIntPair* add_degreemap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::IntIntPair >&
      degreemap() const;

  // .dgnn_test.NodeMessage nodeList = 1;
  bool has_nodelist() const;
  private:
  bool _internal_has_nodelist() const;
  public:
  void clear_nodelist();
  const ::dgnn_test::NodeMessage& nodelist() const;
  PROTOBUF_NODISCARD ::dgnn_test::NodeMessage* release_nodelist();
  ::dgnn_test::NodeMessage* mutable_nodelist();
  void set_allocated_nodelist(::dgnn_test::NodeMessage* nodelist);
  private:
  const ::dgnn_test::NodeMessage& _internal_nodelist() const;
  ::dgnn_test::NodeMessage* _internal_mutable_nodelist();
  public:
  void unsafe_arena_set_allocated_nodelist(
      ::dgnn_test::NodeMessage* nodelist);
  ::dgnn_test::NodeMessage* unsafe_arena_release_nodelist();

  // .dgnn_test.DataMessage.AdjMessage adjList = 2;
  bool has_adjlist() const;
  private:
  bool _internal_has_adjlist() const;
  public:
  void clear_adjlist();
  const ::dgnn_test::DataMessage_AdjMessage& adjlist() const;
  PROTOBUF_NODISCARD ::dgnn_test::DataMessage_AdjMessage* release_adjlist();
  ::dgnn_test::DataMessage_AdjMessage* mutable_adjlist();
  void set_allocated_adjlist(::dgnn_test::DataMessage_AdjMessage* adjlist);
  private:
  const ::dgnn_test::DataMessage_AdjMessage& _internal_adjlist() const;
  ::dgnn_test::DataMessage_AdjMessage* _internal_mutable_adjlist();
  public:
  void unsafe_arena_set_allocated_adjlist(
      ::dgnn_test::DataMessage_AdjMessage* adjlist);
  ::dgnn_test::DataMessage_AdjMessage* unsafe_arena_release_adjlist();

  // .dgnn_test.DataMessage.FeatureMessage featureList = 3;
  bool has_featurelist() const;
  private:
  bool _internal_has_featurelist() const;
  public:
  void clear_featurelist();
  const ::dgnn_test::DataMessage_FeatureMessage& featurelist() const;
  PROTOBUF_NODISCARD ::dgnn_test::DataMessage_FeatureMessage* release_featurelist();
  ::dgnn_test::DataMessage_FeatureMessage* mutable_featurelist();
  void set_allocated_featurelist(::dgnn_test::DataMessage_FeatureMessage* featurelist);
  private:
  const ::dgnn_test::DataMessage_FeatureMessage& _internal_featurelist() const;
  ::dgnn_test::DataMessage_FeatureMessage* _internal_mutable_featurelist();
  public:
  void unsafe_arena_set_allocated_featurelist(
      ::dgnn_test::DataMessage_FeatureMessage* featurelist);
  ::dgnn_test::DataMessage_FeatureMessage* unsafe_arena_release_featurelist();

  // .dgnn_test.DataMessage.LabelMessage labelList = 4;
  bool has_labellist() const;
  private:
  bool _internal_has_labellist() const;
  public:
  void clear_labellist();
  const ::dgnn_test::DataMessage_LabelMessage& labellist() const;
  PROTOBUF_NODISCARD ::dgnn_test::DataMessage_LabelMessage* release_labellist();
  ::dgnn_test::DataMessage_LabelMessage* mutable_labellist();
  void set_allocated_labellist(::dgnn_test::DataMessage_LabelMessage* labellist);
  private:
  const ::dgnn_test::DataMessage_LabelMessage& _internal_labellist() const;
  ::dgnn_test::DataMessage_LabelMessage* _internal_mutable_labellist();
  public:
  void unsafe_arena_set_allocated_labellist(
      ::dgnn_test::DataMessage_LabelMessage* labellist);
  ::dgnn_test::DataMessage_LabelMessage* unsafe_arena_release_labellist();

  // @@protoc_insertion_point(class_scope:dgnn_test.DataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage > nodesforeachworker_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::IntIntPair > degreemap_;
  ::dgnn_test::NodeMessage* nodelist_;
  ::dgnn_test::DataMessage_AdjMessage* adjlist_;
  ::dgnn_test::DataMessage_FeatureMessage* featurelist_;
  ::dgnn_test::DataMessage_LabelMessage* labellist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// -------------------------------------------------------------------

class NodeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dgnn_test.NodeMessage) */ {
 public:
  inline NodeMessage() : NodeMessage(nullptr) {}
  ~NodeMessage() override;
  explicit constexpr NodeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeMessage(const NodeMessage& from);
  NodeMessage(NodeMessage&& from) noexcept
    : NodeMessage() {
    *this = ::std::move(from);
  }

  inline NodeMessage& operator=(const NodeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeMessage& operator=(NodeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeMessage* internal_default_instance() {
    return reinterpret_cast<const NodeMessage*>(
               &_NodeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NodeMessage& a, NodeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dgnn_test.NodeMessage";
  }
  protected:
  explicit NodeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kLayidFieldNumber = 2,
    kWidFieldNumber = 3,
  };
  // repeated int32 nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  private:
  int32_t _internal_nodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_nodes() const;
  void _internal_add_nodes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_nodes();
  public:
  int32_t nodes(int index) const;
  void set_nodes(int index, int32_t value);
  void add_nodes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_nodes();

  // int32 layid = 2;
  void clear_layid();
  int32_t layid() const;
  void set_layid(int32_t value);
  private:
  int32_t _internal_layid() const;
  void _internal_set_layid(int32_t value);
  public:

  // int32 wid = 3;
  void clear_wid();
  int32_t wid() const;
  void set_wid(int32_t value);
  private:
  int32_t _internal_wid() const;
  void _internal_set_wid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dgnn_test.NodeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > nodes_;
  mutable std::atomic<int> _nodes_cached_byte_size_;
  int32_t layid_;
  int32_t wid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dgnn_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NullMessage

// -------------------------------------------------------------------

// LayerNodeListMessage

// repeated .dgnn_test.NodeMessage layer_nodes = 1;
inline int LayerNodeListMessage::_internal_layer_nodes_size() const {
  return layer_nodes_.size();
}
inline int LayerNodeListMessage::layer_nodes_size() const {
  return _internal_layer_nodes_size();
}
inline void LayerNodeListMessage::clear_layer_nodes() {
  layer_nodes_.Clear();
}
inline ::dgnn_test::NodeMessage* LayerNodeListMessage::mutable_layer_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:dgnn_test.LayerNodeListMessage.layer_nodes)
  return layer_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage >*
LayerNodeListMessage::mutable_layer_nodes() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.LayerNodeListMessage.layer_nodes)
  return &layer_nodes_;
}
inline const ::dgnn_test::NodeMessage& LayerNodeListMessage::_internal_layer_nodes(int index) const {
  return layer_nodes_.Get(index);
}
inline const ::dgnn_test::NodeMessage& LayerNodeListMessage::layer_nodes(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.LayerNodeListMessage.layer_nodes)
  return _internal_layer_nodes(index);
}
inline ::dgnn_test::NodeMessage* LayerNodeListMessage::_internal_add_layer_nodes() {
  return layer_nodes_.Add();
}
inline ::dgnn_test::NodeMessage* LayerNodeListMessage::add_layer_nodes() {
  ::dgnn_test::NodeMessage* _add = _internal_add_layer_nodes();
  // @@protoc_insertion_point(field_add:dgnn_test.LayerNodeListMessage.layer_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage >&
LayerNodeListMessage::layer_nodes() const {
  // @@protoc_insertion_point(field_list:dgnn_test.LayerNodeListMessage.layer_nodes)
  return layer_nodes_;
}

// -------------------------------------------------------------------

// AccuracyMessage

// float val_acc = 1;
inline void AccuracyMessage::clear_val_acc() {
  val_acc_ = 0;
}
inline float AccuracyMessage::_internal_val_acc() const {
  return val_acc_;
}
inline float AccuracyMessage::val_acc() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.val_acc)
  return _internal_val_acc();
}
inline void AccuracyMessage::_internal_set_val_acc(float value) {
  
  val_acc_ = value;
}
inline void AccuracyMessage::set_val_acc(float value) {
  _internal_set_val_acc(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.val_acc)
}

// float val_acc_entire = 2;
inline void AccuracyMessage::clear_val_acc_entire() {
  val_acc_entire_ = 0;
}
inline float AccuracyMessage::_internal_val_acc_entire() const {
  return val_acc_entire_;
}
inline float AccuracyMessage::val_acc_entire() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.val_acc_entire)
  return _internal_val_acc_entire();
}
inline void AccuracyMessage::_internal_set_val_acc_entire(float value) {
  
  val_acc_entire_ = value;
}
inline void AccuracyMessage::set_val_acc_entire(float value) {
  _internal_set_val_acc_entire(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.val_acc_entire)
}

// float train_acc = 3;
inline void AccuracyMessage::clear_train_acc() {
  train_acc_ = 0;
}
inline float AccuracyMessage::_internal_train_acc() const {
  return train_acc_;
}
inline float AccuracyMessage::train_acc() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.train_acc)
  return _internal_train_acc();
}
inline void AccuracyMessage::_internal_set_train_acc(float value) {
  
  train_acc_ = value;
}
inline void AccuracyMessage::set_train_acc(float value) {
  _internal_set_train_acc(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.train_acc)
}

// float train_acc_entire = 4;
inline void AccuracyMessage::clear_train_acc_entire() {
  train_acc_entire_ = 0;
}
inline float AccuracyMessage::_internal_train_acc_entire() const {
  return train_acc_entire_;
}
inline float AccuracyMessage::train_acc_entire() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.train_acc_entire)
  return _internal_train_acc_entire();
}
inline void AccuracyMessage::_internal_set_train_acc_entire(float value) {
  
  train_acc_entire_ = value;
}
inline void AccuracyMessage::set_train_acc_entire(float value) {
  _internal_set_train_acc_entire(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.train_acc_entire)
}

// float test_acc = 5;
inline void AccuracyMessage::clear_test_acc() {
  test_acc_ = 0;
}
inline float AccuracyMessage::_internal_test_acc() const {
  return test_acc_;
}
inline float AccuracyMessage::test_acc() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.test_acc)
  return _internal_test_acc();
}
inline void AccuracyMessage::_internal_set_test_acc(float value) {
  
  test_acc_ = value;
}
inline void AccuracyMessage::set_test_acc(float value) {
  _internal_set_test_acc(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.test_acc)
}

// float test_acc_entire = 6;
inline void AccuracyMessage::clear_test_acc_entire() {
  test_acc_entire_ = 0;
}
inline float AccuracyMessage::_internal_test_acc_entire() const {
  return test_acc_entire_;
}
inline float AccuracyMessage::test_acc_entire() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.test_acc_entire)
  return _internal_test_acc_entire();
}
inline void AccuracyMessage::_internal_set_test_acc_entire(float value) {
  
  test_acc_entire_ = value;
}
inline void AccuracyMessage::set_test_acc_entire(float value) {
  _internal_set_test_acc_entire(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.test_acc_entire)
}

// float test_f1 = 7;
inline void AccuracyMessage::clear_test_f1() {
  test_f1_ = 0;
}
inline float AccuracyMessage::_internal_test_f1() const {
  return test_f1_;
}
inline float AccuracyMessage::test_f1() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.test_f1)
  return _internal_test_f1();
}
inline void AccuracyMessage::_internal_set_test_f1(float value) {
  
  test_f1_ = value;
}
inline void AccuracyMessage::set_test_f1(float value) {
  _internal_set_test_f1(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.test_f1)
}

// float val_f1 = 8;
inline void AccuracyMessage::clear_val_f1() {
  val_f1_ = 0;
}
inline float AccuracyMessage::_internal_val_f1() const {
  return val_f1_;
}
inline float AccuracyMessage::val_f1() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.val_f1)
  return _internal_val_f1();
}
inline void AccuracyMessage::_internal_set_val_f1(float value) {
  
  val_f1_ = value;
}
inline void AccuracyMessage::set_val_f1(float value) {
  _internal_set_val_f1(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.val_f1)
}

// float test_f1_entire = 9;
inline void AccuracyMessage::clear_test_f1_entire() {
  test_f1_entire_ = 0;
}
inline float AccuracyMessage::_internal_test_f1_entire() const {
  return test_f1_entire_;
}
inline float AccuracyMessage::test_f1_entire() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.test_f1_entire)
  return _internal_test_f1_entire();
}
inline void AccuracyMessage::_internal_set_test_f1_entire(float value) {
  
  test_f1_entire_ = value;
}
inline void AccuracyMessage::set_test_f1_entire(float value) {
  _internal_set_test_f1_entire(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.test_f1_entire)
}

// float val_f1_entire = 10;
inline void AccuracyMessage::clear_val_f1_entire() {
  val_f1_entire_ = 0;
}
inline float AccuracyMessage::_internal_val_f1_entire() const {
  return val_f1_entire_;
}
inline float AccuracyMessage::val_f1_entire() const {
  // @@protoc_insertion_point(field_get:dgnn_test.AccuracyMessage.val_f1_entire)
  return _internal_val_f1_entire();
}
inline void AccuracyMessage::_internal_set_val_f1_entire(float value) {
  
  val_f1_entire_ = value;
}
inline void AccuracyMessage::set_val_f1_entire(float value) {
  _internal_set_val_f1_entire(value);
  // @@protoc_insertion_point(field_set:dgnn_test.AccuracyMessage.val_f1_entire)
}

// -------------------------------------------------------------------

// EmbGradMessage

// repeated int32 nodes = 1;
inline int EmbGradMessage::_internal_nodes_size() const {
  return nodes_.size();
}
inline int EmbGradMessage::nodes_size() const {
  return _internal_nodes_size();
}
inline void EmbGradMessage::clear_nodes() {
  nodes_.Clear();
}
inline int32_t EmbGradMessage::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline int32_t EmbGradMessage::nodes(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.EmbGradMessage.nodes)
  return _internal_nodes(index);
}
inline void EmbGradMessage::set_nodes(int index, int32_t value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:dgnn_test.EmbGradMessage.nodes)
}
inline void EmbGradMessage::_internal_add_nodes(int32_t value) {
  nodes_.Add(value);
}
inline void EmbGradMessage::add_nodes(int32_t value) {
  _internal_add_nodes(value);
  // @@protoc_insertion_point(field_add:dgnn_test.EmbGradMessage.nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
EmbGradMessage::_internal_nodes() const {
  return nodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
EmbGradMessage::nodes() const {
  // @@protoc_insertion_point(field_list:dgnn_test.EmbGradMessage.nodes)
  return _internal_nodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
EmbGradMessage::_internal_mutable_nodes() {
  return &nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
EmbGradMessage::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.EmbGradMessage.nodes)
  return _internal_mutable_nodes();
}

// int32 layerId = 2;
inline void EmbGradMessage::clear_layerid() {
  layerid_ = 0;
}
inline int32_t EmbGradMessage::_internal_layerid() const {
  return layerid_;
}
inline int32_t EmbGradMessage::layerid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.EmbGradMessage.layerId)
  return _internal_layerid();
}
inline void EmbGradMessage::_internal_set_layerid(int32_t value) {
  
  layerid_ = value;
}
inline void EmbGradMessage::set_layerid(int32_t value) {
  _internal_set_layerid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.EmbGradMessage.layerId)
}

// int32 workerId = 3;
inline void EmbGradMessage::clear_workerid() {
  workerid_ = 0;
}
inline int32_t EmbGradMessage::_internal_workerid() const {
  return workerid_;
}
inline int32_t EmbGradMessage::workerid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.EmbGradMessage.workerId)
  return _internal_workerid();
}
inline void EmbGradMessage::_internal_set_workerid(int32_t value) {
  
  workerid_ = value;
}
inline void EmbGradMessage::set_workerid(int32_t value) {
  _internal_set_workerid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.EmbGradMessage.workerId)
}

// string status = 4;
inline void EmbGradMessage::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& EmbGradMessage::status() const {
  // @@protoc_insertion_point(field_get:dgnn_test.EmbGradMessage.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmbGradMessage::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dgnn_test.EmbGradMessage.status)
}
inline std::string* EmbGradMessage::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:dgnn_test.EmbGradMessage.status)
  return _s;
}
inline const std::string& EmbGradMessage::_internal_status() const {
  return status_.Get();
}
inline void EmbGradMessage::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EmbGradMessage::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EmbGradMessage::release_status() {
  // @@protoc_insertion_point(field_release:dgnn_test.EmbGradMessage.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EmbGradMessage::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.EmbGradMessage.status)
}

// int32 epoch = 5;
inline void EmbGradMessage::clear_epoch() {
  epoch_ = 0;
}
inline int32_t EmbGradMessage::_internal_epoch() const {
  return epoch_;
}
inline int32_t EmbGradMessage::epoch() const {
  // @@protoc_insertion_point(field_get:dgnn_test.EmbGradMessage.epoch)
  return _internal_epoch();
}
inline void EmbGradMessage::_internal_set_epoch(int32_t value) {
  
  epoch_ = value;
}
inline void EmbGradMessage::set_epoch(int32_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:dgnn_test.EmbGradMessage.epoch)
}

// int32 featsize = 6;
inline void EmbGradMessage::clear_featsize() {
  featsize_ = 0;
}
inline int32_t EmbGradMessage::_internal_featsize() const {
  return featsize_;
}
inline int32_t EmbGradMessage::featsize() const {
  // @@protoc_insertion_point(field_get:dgnn_test.EmbGradMessage.featsize)
  return _internal_featsize();
}
inline void EmbGradMessage::_internal_set_featsize(int32_t value) {
  
  featsize_ = value;
}
inline void EmbGradMessage::set_featsize(int32_t value) {
  _internal_set_featsize(value);
  // @@protoc_insertion_point(field_set:dgnn_test.EmbGradMessage.featsize)
}

// int32 nodesize = 7;
inline void EmbGradMessage::clear_nodesize() {
  nodesize_ = 0;
}
inline int32_t EmbGradMessage::_internal_nodesize() const {
  return nodesize_;
}
inline int32_t EmbGradMessage::nodesize() const {
  // @@protoc_insertion_point(field_get:dgnn_test.EmbGradMessage.nodesize)
  return _internal_nodesize();
}
inline void EmbGradMessage::_internal_set_nodesize(int32_t value) {
  
  nodesize_ = value;
}
inline void EmbGradMessage::set_nodesize(int32_t value) {
  _internal_set_nodesize(value);
  // @@protoc_insertion_point(field_set:dgnn_test.EmbGradMessage.nodesize)
}

// repeated float embs = 8;
inline int EmbGradMessage::_internal_embs_size() const {
  return embs_.size();
}
inline int EmbGradMessage::embs_size() const {
  return _internal_embs_size();
}
inline void EmbGradMessage::clear_embs() {
  embs_.Clear();
}
inline float EmbGradMessage::_internal_embs(int index) const {
  return embs_.Get(index);
}
inline float EmbGradMessage::embs(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.EmbGradMessage.embs)
  return _internal_embs(index);
}
inline void EmbGradMessage::set_embs(int index, float value) {
  embs_.Set(index, value);
  // @@protoc_insertion_point(field_set:dgnn_test.EmbGradMessage.embs)
}
inline void EmbGradMessage::_internal_add_embs(float value) {
  embs_.Add(value);
}
inline void EmbGradMessage::add_embs(float value) {
  _internal_add_embs(value);
  // @@protoc_insertion_point(field_add:dgnn_test.EmbGradMessage.embs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbGradMessage::_internal_embs() const {
  return embs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
EmbGradMessage::embs() const {
  // @@protoc_insertion_point(field_list:dgnn_test.EmbGradMessage.embs)
  return _internal_embs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbGradMessage::_internal_mutable_embs() {
  return &embs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
EmbGradMessage::mutable_embs() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.EmbGradMessage.embs)
  return _internal_mutable_embs();
}

// -------------------------------------------------------------------

// ContextMessage_PartitionMessage

// int32 dataNum = 1;
inline void ContextMessage_PartitionMessage::clear_datanum() {
  datanum_ = 0;
}
inline int32_t ContextMessage_PartitionMessage::_internal_datanum() const {
  return datanum_;
}
inline int32_t ContextMessage_PartitionMessage::datanum() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.PartitionMessage.dataNum)
  return _internal_datanum();
}
inline void ContextMessage_PartitionMessage::_internal_set_datanum(int32_t value) {
  
  datanum_ = value;
}
inline void ContextMessage_PartitionMessage::set_datanum(int32_t value) {
  _internal_set_datanum(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.PartitionMessage.dataNum)
}

// int32 workerNum = 2;
inline void ContextMessage_PartitionMessage::clear_workernum() {
  workernum_ = 0;
}
inline int32_t ContextMessage_PartitionMessage::_internal_workernum() const {
  return workernum_;
}
inline int32_t ContextMessage_PartitionMessage::workernum() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.PartitionMessage.workerNum)
  return _internal_workernum();
}
inline void ContextMessage_PartitionMessage::_internal_set_workernum(int32_t value) {
  
  workernum_ = value;
}
inline void ContextMessage_PartitionMessage::set_workernum(int32_t value) {
  _internal_set_workernum(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.PartitionMessage.workerNum)
}

// string dataPath = 3;
inline void ContextMessage_PartitionMessage::clear_datapath() {
  datapath_.ClearToEmpty();
}
inline const std::string& ContextMessage_PartitionMessage::datapath() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.PartitionMessage.dataPath)
  return _internal_datapath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextMessage_PartitionMessage::set_datapath(ArgT0&& arg0, ArgT... args) {
 
 datapath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.PartitionMessage.dataPath)
}
inline std::string* ContextMessage_PartitionMessage::mutable_datapath() {
  std::string* _s = _internal_mutable_datapath();
  // @@protoc_insertion_point(field_mutable:dgnn_test.ContextMessage.PartitionMessage.dataPath)
  return _s;
}
inline const std::string& ContextMessage_PartitionMessage::_internal_datapath() const {
  return datapath_.Get();
}
inline void ContextMessage_PartitionMessage::_internal_set_datapath(const std::string& value) {
  
  datapath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContextMessage_PartitionMessage::_internal_mutable_datapath() {
  
  return datapath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContextMessage_PartitionMessage::release_datapath() {
  // @@protoc_insertion_point(field_release:dgnn_test.ContextMessage.PartitionMessage.dataPath)
  return datapath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContextMessage_PartitionMessage::set_allocated_datapath(std::string* datapath) {
  if (datapath != nullptr) {
    
  } else {
    
  }
  datapath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datapath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (datapath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    datapath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.ContextMessage.PartitionMessage.dataPath)
}

// int32 featureDim = 4;
inline void ContextMessage_PartitionMessage::clear_featuredim() {
  featuredim_ = 0;
}
inline int32_t ContextMessage_PartitionMessage::_internal_featuredim() const {
  return featuredim_;
}
inline int32_t ContextMessage_PartitionMessage::featuredim() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.PartitionMessage.featureDim)
  return _internal_featuredim();
}
inline void ContextMessage_PartitionMessage::_internal_set_featuredim(int32_t value) {
  
  featuredim_ = value;
}
inline void ContextMessage_PartitionMessage::set_featuredim(int32_t value) {
  _internal_set_featuredim(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.PartitionMessage.featureDim)
}

// int32 classNum = 5;
inline void ContextMessage_PartitionMessage::clear_classnum() {
  classnum_ = 0;
}
inline int32_t ContextMessage_PartitionMessage::_internal_classnum() const {
  return classnum_;
}
inline int32_t ContextMessage_PartitionMessage::classnum() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.PartitionMessage.classNum)
  return _internal_classnum();
}
inline void ContextMessage_PartitionMessage::_internal_set_classnum(int32_t value) {
  
  classnum_ = value;
}
inline void ContextMessage_PartitionMessage::set_classnum(int32_t value) {
  _internal_set_classnum(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.PartitionMessage.classNum)
}

// string partitionMethod = 6;
inline void ContextMessage_PartitionMessage::clear_partitionmethod() {
  partitionmethod_.ClearToEmpty();
}
inline const std::string& ContextMessage_PartitionMessage::partitionmethod() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.PartitionMessage.partitionMethod)
  return _internal_partitionmethod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContextMessage_PartitionMessage::set_partitionmethod(ArgT0&& arg0, ArgT... args) {
 
 partitionmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.PartitionMessage.partitionMethod)
}
inline std::string* ContextMessage_PartitionMessage::mutable_partitionmethod() {
  std::string* _s = _internal_mutable_partitionmethod();
  // @@protoc_insertion_point(field_mutable:dgnn_test.ContextMessage.PartitionMessage.partitionMethod)
  return _s;
}
inline const std::string& ContextMessage_PartitionMessage::_internal_partitionmethod() const {
  return partitionmethod_.Get();
}
inline void ContextMessage_PartitionMessage::_internal_set_partitionmethod(const std::string& value) {
  
  partitionmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContextMessage_PartitionMessage::_internal_mutable_partitionmethod() {
  
  return partitionmethod_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContextMessage_PartitionMessage::release_partitionmethod() {
  // @@protoc_insertion_point(field_release:dgnn_test.ContextMessage.PartitionMessage.partitionMethod)
  return partitionmethod_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContextMessage_PartitionMessage::set_allocated_partitionmethod(std::string* partitionmethod) {
  if (partitionmethod != nullptr) {
    
  } else {
    
  }
  partitionmethod_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partitionmethod,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (partitionmethod_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    partitionmethod_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.ContextMessage.PartitionMessage.partitionMethod)
}

// int32 edgeNum = 7;
inline void ContextMessage_PartitionMessage::clear_edgenum() {
  edgenum_ = 0;
}
inline int32_t ContextMessage_PartitionMessage::_internal_edgenum() const {
  return edgenum_;
}
inline int32_t ContextMessage_PartitionMessage::edgenum() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.PartitionMessage.edgeNum)
  return _internal_edgenum();
}
inline void ContextMessage_PartitionMessage::_internal_set_edgenum(int32_t value) {
  
  edgenum_ = value;
}
inline void ContextMessage_PartitionMessage::set_edgenum(int32_t value) {
  _internal_set_edgenum(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.PartitionMessage.edgeNum)
}

// -------------------------------------------------------------------

// ContextMessage

// int32 workerId = 1;
inline void ContextMessage::clear_workerid() {
  workerid_ = 0;
}
inline int32_t ContextMessage::_internal_workerid() const {
  return workerid_;
}
inline int32_t ContextMessage::workerid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.workerId)
  return _internal_workerid();
}
inline void ContextMessage::_internal_set_workerid(int32_t value) {
  
  workerid_ = value;
}
inline void ContextMessage::set_workerid(int32_t value) {
  _internal_set_workerid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.workerId)
}

// repeated string address = 2;
inline int ContextMessage::_internal_address_size() const {
  return address_.size();
}
inline int ContextMessage::address_size() const {
  return _internal_address_size();
}
inline void ContextMessage::clear_address() {
  address_.Clear();
}
inline std::string* ContextMessage::add_address() {
  std::string* _s = _internal_add_address();
  // @@protoc_insertion_point(field_add_mutable:dgnn_test.ContextMessage.address)
  return _s;
}
inline const std::string& ContextMessage::_internal_address(int index) const {
  return address_.Get(index);
}
inline const std::string& ContextMessage::address(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.address)
  return _internal_address(index);
}
inline std::string* ContextMessage::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:dgnn_test.ContextMessage.address)
  return address_.Mutable(index);
}
inline void ContextMessage::set_address(int index, const std::string& value) {
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.address)
}
inline void ContextMessage::set_address(int index, std::string&& value) {
  address_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.address)
}
inline void ContextMessage::set_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dgnn_test.ContextMessage.address)
}
inline void ContextMessage::set_address(int index, const char* value, size_t size) {
  address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dgnn_test.ContextMessage.address)
}
inline std::string* ContextMessage::_internal_add_address() {
  return address_.Add();
}
inline void ContextMessage::add_address(const std::string& value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dgnn_test.ContextMessage.address)
}
inline void ContextMessage::add_address(std::string&& value) {
  address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dgnn_test.ContextMessage.address)
}
inline void ContextMessage::add_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dgnn_test.ContextMessage.address)
}
inline void ContextMessage::add_address(const char* value, size_t size) {
  address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dgnn_test.ContextMessage.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContextMessage::address() const {
  // @@protoc_insertion_point(field_list:dgnn_test.ContextMessage.address)
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContextMessage::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.ContextMessage.address)
  return &address_;
}

// int32 workerNum = 3;
inline void ContextMessage::clear_workernum() {
  workernum_ = 0;
}
inline int32_t ContextMessage::_internal_workernum() const {
  return workernum_;
}
inline int32_t ContextMessage::workernum() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.workerNum)
  return _internal_workernum();
}
inline void ContextMessage::_internal_set_workernum(int32_t value) {
  
  workernum_ = value;
}
inline void ContextMessage::set_workernum(int32_t value) {
  _internal_set_workernum(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ContextMessage.workerNum)
}

// .dgnn_test.ContextMessage.PartitionMessage partition = 4;
inline bool ContextMessage::_internal_has_partition() const {
  return this != internal_default_instance() && partition_ != nullptr;
}
inline bool ContextMessage::has_partition() const {
  return _internal_has_partition();
}
inline void ContextMessage::clear_partition() {
  if (GetArenaForAllocation() == nullptr && partition_ != nullptr) {
    delete partition_;
  }
  partition_ = nullptr;
}
inline const ::dgnn_test::ContextMessage_PartitionMessage& ContextMessage::_internal_partition() const {
  const ::dgnn_test::ContextMessage_PartitionMessage* p = partition_;
  return p != nullptr ? *p : reinterpret_cast<const ::dgnn_test::ContextMessage_PartitionMessage&>(
      ::dgnn_test::_ContextMessage_PartitionMessage_default_instance_);
}
inline const ::dgnn_test::ContextMessage_PartitionMessage& ContextMessage::partition() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ContextMessage.partition)
  return _internal_partition();
}
inline void ContextMessage::unsafe_arena_set_allocated_partition(
    ::dgnn_test::ContextMessage_PartitionMessage* partition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partition_);
  }
  partition_ = partition;
  if (partition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dgnn_test.ContextMessage.partition)
}
inline ::dgnn_test::ContextMessage_PartitionMessage* ContextMessage::release_partition() {
  
  ::dgnn_test::ContextMessage_PartitionMessage* temp = partition_;
  partition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dgnn_test::ContextMessage_PartitionMessage* ContextMessage::unsafe_arena_release_partition() {
  // @@protoc_insertion_point(field_release:dgnn_test.ContextMessage.partition)
  
  ::dgnn_test::ContextMessage_PartitionMessage* temp = partition_;
  partition_ = nullptr;
  return temp;
}
inline ::dgnn_test::ContextMessage_PartitionMessage* ContextMessage::_internal_mutable_partition() {
  
  if (partition_ == nullptr) {
    auto* p = CreateMaybeMessage<::dgnn_test::ContextMessage_PartitionMessage>(GetArenaForAllocation());
    partition_ = p;
  }
  return partition_;
}
inline ::dgnn_test::ContextMessage_PartitionMessage* ContextMessage::mutable_partition() {
  ::dgnn_test::ContextMessage_PartitionMessage* _msg = _internal_mutable_partition();
  // @@protoc_insertion_point(field_mutable:dgnn_test.ContextMessage.partition)
  return _msg;
}
inline void ContextMessage::set_allocated_partition(::dgnn_test::ContextMessage_PartitionMessage* partition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete partition_;
  }
  if (partition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dgnn_test::ContextMessage_PartitionMessage>::GetOwningArena(partition);
    if (message_arena != submessage_arena) {
      partition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition, submessage_arena);
    }
    
  } else {
    
  }
  partition_ = partition;
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.ContextMessage.partition)
}

// -------------------------------------------------------------------

// NetInfoMessage

// int32 wid = 1;
inline void NetInfoMessage::clear_wid() {
  wid_ = 0;
}
inline int32_t NetInfoMessage::_internal_wid() const {
  return wid_;
}
inline int32_t NetInfoMessage::wid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.NetInfoMessage.wid)
  return _internal_wid();
}
inline void NetInfoMessage::_internal_set_wid(int32_t value) {
  
  wid_ = value;
}
inline void NetInfoMessage::set_wid(int32_t value) {
  _internal_set_wid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.NetInfoMessage.wid)
}

// int32 featureDim = 2;
inline void NetInfoMessage::clear_featuredim() {
  featuredim_ = 0;
}
inline int32_t NetInfoMessage::_internal_featuredim() const {
  return featuredim_;
}
inline int32_t NetInfoMessage::featuredim() const {
  // @@protoc_insertion_point(field_get:dgnn_test.NetInfoMessage.featureDim)
  return _internal_featuredim();
}
inline void NetInfoMessage::_internal_set_featuredim(int32_t value) {
  
  featuredim_ = value;
}
inline void NetInfoMessage::set_featuredim(int32_t value) {
  _internal_set_featuredim(value);
  // @@protoc_insertion_point(field_set:dgnn_test.NetInfoMessage.featureDim)
}

// repeated int32 hiddenDim = 3;
inline int NetInfoMessage::_internal_hiddendim_size() const {
  return hiddendim_.size();
}
inline int NetInfoMessage::hiddendim_size() const {
  return _internal_hiddendim_size();
}
inline void NetInfoMessage::clear_hiddendim() {
  hiddendim_.Clear();
}
inline int32_t NetInfoMessage::_internal_hiddendim(int index) const {
  return hiddendim_.Get(index);
}
inline int32_t NetInfoMessage::hiddendim(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.NetInfoMessage.hiddenDim)
  return _internal_hiddendim(index);
}
inline void NetInfoMessage::set_hiddendim(int index, int32_t value) {
  hiddendim_.Set(index, value);
  // @@protoc_insertion_point(field_set:dgnn_test.NetInfoMessage.hiddenDim)
}
inline void NetInfoMessage::_internal_add_hiddendim(int32_t value) {
  hiddendim_.Add(value);
}
inline void NetInfoMessage::add_hiddendim(int32_t value) {
  _internal_add_hiddendim(value);
  // @@protoc_insertion_point(field_add:dgnn_test.NetInfoMessage.hiddenDim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NetInfoMessage::_internal_hiddendim() const {
  return hiddendim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NetInfoMessage::hiddendim() const {
  // @@protoc_insertion_point(field_list:dgnn_test.NetInfoMessage.hiddenDim)
  return _internal_hiddendim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NetInfoMessage::_internal_mutable_hiddendim() {
  return &hiddendim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NetInfoMessage::mutable_hiddendim() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.NetInfoMessage.hiddenDim)
  return _internal_mutable_hiddendim();
}

// int32 classDim = 4;
inline void NetInfoMessage::clear_classdim() {
  classdim_ = 0;
}
inline int32_t NetInfoMessage::_internal_classdim() const {
  return classdim_;
}
inline int32_t NetInfoMessage::classdim() const {
  // @@protoc_insertion_point(field_get:dgnn_test.NetInfoMessage.classDim)
  return _internal_classdim();
}
inline void NetInfoMessage::_internal_set_classdim(int32_t value) {
  
  classdim_ = value;
}
inline void NetInfoMessage::set_classdim(int32_t value) {
  _internal_set_classdim(value);
  // @@protoc_insertion_point(field_set:dgnn_test.NetInfoMessage.classDim)
}

// int32 workerNum = 5;
inline void NetInfoMessage::clear_workernum() {
  workernum_ = 0;
}
inline int32_t NetInfoMessage::_internal_workernum() const {
  return workernum_;
}
inline int32_t NetInfoMessage::workernum() const {
  // @@protoc_insertion_point(field_get:dgnn_test.NetInfoMessage.workerNum)
  return _internal_workernum();
}
inline void NetInfoMessage::_internal_set_workernum(int32_t value) {
  
  workernum_ = value;
}
inline void NetInfoMessage::set_workernum(int32_t value) {
  _internal_set_workernum(value);
  // @@protoc_insertion_point(field_set:dgnn_test.NetInfoMessage.workerNum)
}

// int32 serverNum = 6;
inline void NetInfoMessage::clear_servernum() {
  servernum_ = 0;
}
inline int32_t NetInfoMessage::_internal_servernum() const {
  return servernum_;
}
inline int32_t NetInfoMessage::servernum() const {
  // @@protoc_insertion_point(field_get:dgnn_test.NetInfoMessage.serverNum)
  return _internal_servernum();
}
inline void NetInfoMessage::_internal_set_servernum(int32_t value) {
  
  servernum_ = value;
}
inline void NetInfoMessage::set_servernum(int32_t value) {
  _internal_set_servernum(value);
  // @@protoc_insertion_point(field_set:dgnn_test.NetInfoMessage.serverNum)
}

// repeated .dgnn_test.ParamGrad params = 7;
inline int NetInfoMessage::_internal_params_size() const {
  return params_.size();
}
inline int NetInfoMessage::params_size() const {
  return _internal_params_size();
}
inline void NetInfoMessage::clear_params() {
  params_.Clear();
}
inline ::dgnn_test::ParamGrad* NetInfoMessage::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:dgnn_test.NetInfoMessage.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::ParamGrad >*
NetInfoMessage::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.NetInfoMessage.params)
  return &params_;
}
inline const ::dgnn_test::ParamGrad& NetInfoMessage::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::dgnn_test::ParamGrad& NetInfoMessage::params(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.NetInfoMessage.params)
  return _internal_params(index);
}
inline ::dgnn_test::ParamGrad* NetInfoMessage::_internal_add_params() {
  return params_.Add();
}
inline ::dgnn_test::ParamGrad* NetInfoMessage::add_params() {
  ::dgnn_test::ParamGrad* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:dgnn_test.NetInfoMessage.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::ParamGrad >&
NetInfoMessage::params() const {
  // @@protoc_insertion_point(field_list:dgnn_test.NetInfoMessage.params)
  return params_;
}

// -------------------------------------------------------------------

// ParamGrad

// string id = 1;
inline void ParamGrad::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ParamGrad::id() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ParamGrad.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParamGrad::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dgnn_test.ParamGrad.id)
}
inline std::string* ParamGrad::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dgnn_test.ParamGrad.id)
  return _s;
}
inline const std::string& ParamGrad::_internal_id() const {
  return id_.Get();
}
inline void ParamGrad::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParamGrad::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParamGrad::release_id() {
  // @@protoc_insertion_point(field_release:dgnn_test.ParamGrad.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParamGrad::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.ParamGrad.id)
}

// int32 wid = 2;
inline void ParamGrad::clear_wid() {
  wid_ = 0;
}
inline int32_t ParamGrad::_internal_wid() const {
  return wid_;
}
inline int32_t ParamGrad::wid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ParamGrad.wid)
  return _internal_wid();
}
inline void ParamGrad::_internal_set_wid(int32_t value) {
  
  wid_ = value;
}
inline void ParamGrad::set_wid(int32_t value) {
  _internal_set_wid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ParamGrad.wid)
}

// int32 sid = 3;
inline void ParamGrad::clear_sid() {
  sid_ = 0;
}
inline int32_t ParamGrad::_internal_sid() const {
  return sid_;
}
inline int32_t ParamGrad::sid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ParamGrad.sid)
  return _internal_sid();
}
inline void ParamGrad::_internal_set_sid(int32_t value) {
  
  sid_ = value;
}
inline void ParamGrad::set_sid(int32_t value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ParamGrad.sid)
}

// float lr = 4;
inline void ParamGrad::clear_lr() {
  lr_ = 0;
}
inline float ParamGrad::_internal_lr() const {
  return lr_;
}
inline float ParamGrad::lr() const {
  // @@protoc_insertion_point(field_get:dgnn_test.ParamGrad.lr)
  return _internal_lr();
}
inline void ParamGrad::_internal_set_lr(float value) {
  
  lr_ = value;
}
inline void ParamGrad::set_lr(float value) {
  _internal_set_lr(value);
  // @@protoc_insertion_point(field_set:dgnn_test.ParamGrad.lr)
}

// repeated double elems = 5;
inline int ParamGrad::_internal_elems_size() const {
  return elems_.size();
}
inline int ParamGrad::elems_size() const {
  return _internal_elems_size();
}
inline void ParamGrad::clear_elems() {
  elems_.Clear();
}
inline double ParamGrad::_internal_elems(int index) const {
  return elems_.Get(index);
}
inline double ParamGrad::elems(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.ParamGrad.elems)
  return _internal_elems(index);
}
inline void ParamGrad::set_elems(int index, double value) {
  elems_.Set(index, value);
  // @@protoc_insertion_point(field_set:dgnn_test.ParamGrad.elems)
}
inline void ParamGrad::_internal_add_elems(double value) {
  elems_.Add(value);
}
inline void ParamGrad::add_elems(double value) {
  _internal_add_elems(value);
  // @@protoc_insertion_point(field_add:dgnn_test.ParamGrad.elems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ParamGrad::_internal_elems() const {
  return elems_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ParamGrad::elems() const {
  // @@protoc_insertion_point(field_list:dgnn_test.ParamGrad.elems)
  return _internal_elems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ParamGrad::_internal_mutable_elems() {
  return &elems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ParamGrad::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.ParamGrad.elems)
  return _internal_mutable_elems();
}

// -------------------------------------------------------------------

// IntIntPair

// int32 key = 1;
inline void IntIntPair::clear_key() {
  key_ = 0;
}
inline int32_t IntIntPair::_internal_key() const {
  return key_;
}
inline int32_t IntIntPair::key() const {
  // @@protoc_insertion_point(field_get:dgnn_test.IntIntPair.key)
  return _internal_key();
}
inline void IntIntPair::_internal_set_key(int32_t value) {
  
  key_ = value;
}
inline void IntIntPair::set_key(int32_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dgnn_test.IntIntPair.key)
}

// int32 value = 2;
inline void IntIntPair::clear_value() {
  value_ = 0;
}
inline int32_t IntIntPair::_internal_value() const {
  return value_;
}
inline int32_t IntIntPair::value() const {
  // @@protoc_insertion_point(field_get:dgnn_test.IntIntPair.value)
  return _internal_value();
}
inline void IntIntPair::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void IntIntPair::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:dgnn_test.IntIntPair.value)
}

// -------------------------------------------------------------------

// DataMessage_FeatureMessage_FeatureItem

// int32 vid = 1;
inline void DataMessage_FeatureMessage_FeatureItem::clear_vid() {
  vid_ = 0;
}
inline int32_t DataMessage_FeatureMessage_FeatureItem::_internal_vid() const {
  return vid_;
}
inline int32_t DataMessage_FeatureMessage_FeatureItem::vid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.FeatureMessage.FeatureItem.vid)
  return _internal_vid();
}
inline void DataMessage_FeatureMessage_FeatureItem::_internal_set_vid(int32_t value) {
  
  vid_ = value;
}
inline void DataMessage_FeatureMessage_FeatureItem::set_vid(int32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.DataMessage.FeatureMessage.FeatureItem.vid)
}

// repeated float feature = 2;
inline int DataMessage_FeatureMessage_FeatureItem::_internal_feature_size() const {
  return feature_.size();
}
inline int DataMessage_FeatureMessage_FeatureItem::feature_size() const {
  return _internal_feature_size();
}
inline void DataMessage_FeatureMessage_FeatureItem::clear_feature() {
  feature_.Clear();
}
inline float DataMessage_FeatureMessage_FeatureItem::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline float DataMessage_FeatureMessage_FeatureItem::feature(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.FeatureMessage.FeatureItem.feature)
  return _internal_feature(index);
}
inline void DataMessage_FeatureMessage_FeatureItem::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:dgnn_test.DataMessage.FeatureMessage.FeatureItem.feature)
}
inline void DataMessage_FeatureMessage_FeatureItem::_internal_add_feature(float value) {
  feature_.Add(value);
}
inline void DataMessage_FeatureMessage_FeatureItem::add_feature(float value) {
  _internal_add_feature(value);
  // @@protoc_insertion_point(field_add:dgnn_test.DataMessage.FeatureMessage.FeatureItem.feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DataMessage_FeatureMessage_FeatureItem::_internal_feature() const {
  return feature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DataMessage_FeatureMessage_FeatureItem::feature() const {
  // @@protoc_insertion_point(field_list:dgnn_test.DataMessage.FeatureMessage.FeatureItem.feature)
  return _internal_feature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DataMessage_FeatureMessage_FeatureItem::_internal_mutable_feature() {
  return &feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DataMessage_FeatureMessage_FeatureItem::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.DataMessage.FeatureMessage.FeatureItem.feature)
  return _internal_mutable_feature();
}

// -------------------------------------------------------------------

// DataMessage_FeatureMessage

// repeated .dgnn_test.DataMessage.FeatureMessage.FeatureItem features = 1;
inline int DataMessage_FeatureMessage::_internal_features_size() const {
  return features_.size();
}
inline int DataMessage_FeatureMessage::features_size() const {
  return _internal_features_size();
}
inline void DataMessage_FeatureMessage::clear_features() {
  features_.Clear();
}
inline ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* DataMessage_FeatureMessage::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.FeatureMessage.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_FeatureMessage_FeatureItem >*
DataMessage_FeatureMessage::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.DataMessage.FeatureMessage.features)
  return &features_;
}
inline const ::dgnn_test::DataMessage_FeatureMessage_FeatureItem& DataMessage_FeatureMessage::_internal_features(int index) const {
  return features_.Get(index);
}
inline const ::dgnn_test::DataMessage_FeatureMessage_FeatureItem& DataMessage_FeatureMessage::features(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.FeatureMessage.features)
  return _internal_features(index);
}
inline ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* DataMessage_FeatureMessage::_internal_add_features() {
  return features_.Add();
}
inline ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* DataMessage_FeatureMessage::add_features() {
  ::dgnn_test::DataMessage_FeatureMessage_FeatureItem* _add = _internal_add_features();
  // @@protoc_insertion_point(field_add:dgnn_test.DataMessage.FeatureMessage.features)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_FeatureMessage_FeatureItem >&
DataMessage_FeatureMessage::features() const {
  // @@protoc_insertion_point(field_list:dgnn_test.DataMessage.FeatureMessage.features)
  return features_;
}

// -------------------------------------------------------------------

// DataMessage_LabelMessage_LabelItem

// int32 vid = 1;
inline void DataMessage_LabelMessage_LabelItem::clear_vid() {
  vid_ = 0;
}
inline int32_t DataMessage_LabelMessage_LabelItem::_internal_vid() const {
  return vid_;
}
inline int32_t DataMessage_LabelMessage_LabelItem::vid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.LabelMessage.LabelItem.vid)
  return _internal_vid();
}
inline void DataMessage_LabelMessage_LabelItem::_internal_set_vid(int32_t value) {
  
  vid_ = value;
}
inline void DataMessage_LabelMessage_LabelItem::set_vid(int32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.DataMessage.LabelMessage.LabelItem.vid)
}

// int32 label = 2;
inline void DataMessage_LabelMessage_LabelItem::clear_label() {
  label_ = 0;
}
inline int32_t DataMessage_LabelMessage_LabelItem::_internal_label() const {
  return label_;
}
inline int32_t DataMessage_LabelMessage_LabelItem::label() const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.LabelMessage.LabelItem.label)
  return _internal_label();
}
inline void DataMessage_LabelMessage_LabelItem::_internal_set_label(int32_t value) {
  
  label_ = value;
}
inline void DataMessage_LabelMessage_LabelItem::set_label(int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:dgnn_test.DataMessage.LabelMessage.LabelItem.label)
}

// -------------------------------------------------------------------

// DataMessage_LabelMessage

// repeated .dgnn_test.DataMessage.LabelMessage.LabelItem labels = 1;
inline int DataMessage_LabelMessage::_internal_labels_size() const {
  return labels_.size();
}
inline int DataMessage_LabelMessage::labels_size() const {
  return _internal_labels_size();
}
inline void DataMessage_LabelMessage::clear_labels() {
  labels_.Clear();
}
inline ::dgnn_test::DataMessage_LabelMessage_LabelItem* DataMessage_LabelMessage::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.LabelMessage.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_LabelMessage_LabelItem >*
DataMessage_LabelMessage::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.DataMessage.LabelMessage.labels)
  return &labels_;
}
inline const ::dgnn_test::DataMessage_LabelMessage_LabelItem& DataMessage_LabelMessage::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::dgnn_test::DataMessage_LabelMessage_LabelItem& DataMessage_LabelMessage::labels(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.LabelMessage.labels)
  return _internal_labels(index);
}
inline ::dgnn_test::DataMessage_LabelMessage_LabelItem* DataMessage_LabelMessage::_internal_add_labels() {
  return labels_.Add();
}
inline ::dgnn_test::DataMessage_LabelMessage_LabelItem* DataMessage_LabelMessage::add_labels() {
  ::dgnn_test::DataMessage_LabelMessage_LabelItem* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:dgnn_test.DataMessage.LabelMessage.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_LabelMessage_LabelItem >&
DataMessage_LabelMessage::labels() const {
  // @@protoc_insertion_point(field_list:dgnn_test.DataMessage.LabelMessage.labels)
  return labels_;
}

// -------------------------------------------------------------------

// DataMessage_AdjMessage_AdjItem

// int32 vid = 1;
inline void DataMessage_AdjMessage_AdjItem::clear_vid() {
  vid_ = 0;
}
inline int32_t DataMessage_AdjMessage_AdjItem::_internal_vid() const {
  return vid_;
}
inline int32_t DataMessage_AdjMessage_AdjItem::vid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.AdjMessage.AdjItem.vid)
  return _internal_vid();
}
inline void DataMessage_AdjMessage_AdjItem::_internal_set_vid(int32_t value) {
  
  vid_ = value;
}
inline void DataMessage_AdjMessage_AdjItem::set_vid(int32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.DataMessage.AdjMessage.AdjItem.vid)
}

// repeated int32 neibors = 2;
inline int DataMessage_AdjMessage_AdjItem::_internal_neibors_size() const {
  return neibors_.size();
}
inline int DataMessage_AdjMessage_AdjItem::neibors_size() const {
  return _internal_neibors_size();
}
inline void DataMessage_AdjMessage_AdjItem::clear_neibors() {
  neibors_.Clear();
}
inline int32_t DataMessage_AdjMessage_AdjItem::_internal_neibors(int index) const {
  return neibors_.Get(index);
}
inline int32_t DataMessage_AdjMessage_AdjItem::neibors(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.AdjMessage.AdjItem.neibors)
  return _internal_neibors(index);
}
inline void DataMessage_AdjMessage_AdjItem::set_neibors(int index, int32_t value) {
  neibors_.Set(index, value);
  // @@protoc_insertion_point(field_set:dgnn_test.DataMessage.AdjMessage.AdjItem.neibors)
}
inline void DataMessage_AdjMessage_AdjItem::_internal_add_neibors(int32_t value) {
  neibors_.Add(value);
}
inline void DataMessage_AdjMessage_AdjItem::add_neibors(int32_t value) {
  _internal_add_neibors(value);
  // @@protoc_insertion_point(field_add:dgnn_test.DataMessage.AdjMessage.AdjItem.neibors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DataMessage_AdjMessage_AdjItem::_internal_neibors() const {
  return neibors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DataMessage_AdjMessage_AdjItem::neibors() const {
  // @@protoc_insertion_point(field_list:dgnn_test.DataMessage.AdjMessage.AdjItem.neibors)
  return _internal_neibors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DataMessage_AdjMessage_AdjItem::_internal_mutable_neibors() {
  return &neibors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DataMessage_AdjMessage_AdjItem::mutable_neibors() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.DataMessage.AdjMessage.AdjItem.neibors)
  return _internal_mutable_neibors();
}

// -------------------------------------------------------------------

// DataMessage_AdjMessage

// repeated .dgnn_test.DataMessage.AdjMessage.AdjItem adjs = 1;
inline int DataMessage_AdjMessage::_internal_adjs_size() const {
  return adjs_.size();
}
inline int DataMessage_AdjMessage::adjs_size() const {
  return _internal_adjs_size();
}
inline void DataMessage_AdjMessage::clear_adjs() {
  adjs_.Clear();
}
inline ::dgnn_test::DataMessage_AdjMessage_AdjItem* DataMessage_AdjMessage::mutable_adjs(int index) {
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.AdjMessage.adjs)
  return adjs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_AdjMessage_AdjItem >*
DataMessage_AdjMessage::mutable_adjs() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.DataMessage.AdjMessage.adjs)
  return &adjs_;
}
inline const ::dgnn_test::DataMessage_AdjMessage_AdjItem& DataMessage_AdjMessage::_internal_adjs(int index) const {
  return adjs_.Get(index);
}
inline const ::dgnn_test::DataMessage_AdjMessage_AdjItem& DataMessage_AdjMessage::adjs(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.AdjMessage.adjs)
  return _internal_adjs(index);
}
inline ::dgnn_test::DataMessage_AdjMessage_AdjItem* DataMessage_AdjMessage::_internal_add_adjs() {
  return adjs_.Add();
}
inline ::dgnn_test::DataMessage_AdjMessage_AdjItem* DataMessage_AdjMessage::add_adjs() {
  ::dgnn_test::DataMessage_AdjMessage_AdjItem* _add = _internal_add_adjs();
  // @@protoc_insertion_point(field_add:dgnn_test.DataMessage.AdjMessage.adjs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::DataMessage_AdjMessage_AdjItem >&
DataMessage_AdjMessage::adjs() const {
  // @@protoc_insertion_point(field_list:dgnn_test.DataMessage.AdjMessage.adjs)
  return adjs_;
}

// -------------------------------------------------------------------

// DataMessage

// .dgnn_test.NodeMessage nodeList = 1;
inline bool DataMessage::_internal_has_nodelist() const {
  return this != internal_default_instance() && nodelist_ != nullptr;
}
inline bool DataMessage::has_nodelist() const {
  return _internal_has_nodelist();
}
inline void DataMessage::clear_nodelist() {
  if (GetArenaForAllocation() == nullptr && nodelist_ != nullptr) {
    delete nodelist_;
  }
  nodelist_ = nullptr;
}
inline const ::dgnn_test::NodeMessage& DataMessage::_internal_nodelist() const {
  const ::dgnn_test::NodeMessage* p = nodelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::dgnn_test::NodeMessage&>(
      ::dgnn_test::_NodeMessage_default_instance_);
}
inline const ::dgnn_test::NodeMessage& DataMessage::nodelist() const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.nodeList)
  return _internal_nodelist();
}
inline void DataMessage::unsafe_arena_set_allocated_nodelist(
    ::dgnn_test::NodeMessage* nodelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodelist_);
  }
  nodelist_ = nodelist;
  if (nodelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dgnn_test.DataMessage.nodeList)
}
inline ::dgnn_test::NodeMessage* DataMessage::release_nodelist() {
  
  ::dgnn_test::NodeMessage* temp = nodelist_;
  nodelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dgnn_test::NodeMessage* DataMessage::unsafe_arena_release_nodelist() {
  // @@protoc_insertion_point(field_release:dgnn_test.DataMessage.nodeList)
  
  ::dgnn_test::NodeMessage* temp = nodelist_;
  nodelist_ = nullptr;
  return temp;
}
inline ::dgnn_test::NodeMessage* DataMessage::_internal_mutable_nodelist() {
  
  if (nodelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::dgnn_test::NodeMessage>(GetArenaForAllocation());
    nodelist_ = p;
  }
  return nodelist_;
}
inline ::dgnn_test::NodeMessage* DataMessage::mutable_nodelist() {
  ::dgnn_test::NodeMessage* _msg = _internal_mutable_nodelist();
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.nodeList)
  return _msg;
}
inline void DataMessage::set_allocated_nodelist(::dgnn_test::NodeMessage* nodelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nodelist_;
  }
  if (nodelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dgnn_test::NodeMessage>::GetOwningArena(nodelist);
    if (message_arena != submessage_arena) {
      nodelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodelist, submessage_arena);
    }
    
  } else {
    
  }
  nodelist_ = nodelist;
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.DataMessage.nodeList)
}

// .dgnn_test.DataMessage.AdjMessage adjList = 2;
inline bool DataMessage::_internal_has_adjlist() const {
  return this != internal_default_instance() && adjlist_ != nullptr;
}
inline bool DataMessage::has_adjlist() const {
  return _internal_has_adjlist();
}
inline void DataMessage::clear_adjlist() {
  if (GetArenaForAllocation() == nullptr && adjlist_ != nullptr) {
    delete adjlist_;
  }
  adjlist_ = nullptr;
}
inline const ::dgnn_test::DataMessage_AdjMessage& DataMessage::_internal_adjlist() const {
  const ::dgnn_test::DataMessage_AdjMessage* p = adjlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::dgnn_test::DataMessage_AdjMessage&>(
      ::dgnn_test::_DataMessage_AdjMessage_default_instance_);
}
inline const ::dgnn_test::DataMessage_AdjMessage& DataMessage::adjlist() const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.adjList)
  return _internal_adjlist();
}
inline void DataMessage::unsafe_arena_set_allocated_adjlist(
    ::dgnn_test::DataMessage_AdjMessage* adjlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjlist_);
  }
  adjlist_ = adjlist;
  if (adjlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dgnn_test.DataMessage.adjList)
}
inline ::dgnn_test::DataMessage_AdjMessage* DataMessage::release_adjlist() {
  
  ::dgnn_test::DataMessage_AdjMessage* temp = adjlist_;
  adjlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dgnn_test::DataMessage_AdjMessage* DataMessage::unsafe_arena_release_adjlist() {
  // @@protoc_insertion_point(field_release:dgnn_test.DataMessage.adjList)
  
  ::dgnn_test::DataMessage_AdjMessage* temp = adjlist_;
  adjlist_ = nullptr;
  return temp;
}
inline ::dgnn_test::DataMessage_AdjMessage* DataMessage::_internal_mutable_adjlist() {
  
  if (adjlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::dgnn_test::DataMessage_AdjMessage>(GetArenaForAllocation());
    adjlist_ = p;
  }
  return adjlist_;
}
inline ::dgnn_test::DataMessage_AdjMessage* DataMessage::mutable_adjlist() {
  ::dgnn_test::DataMessage_AdjMessage* _msg = _internal_mutable_adjlist();
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.adjList)
  return _msg;
}
inline void DataMessage::set_allocated_adjlist(::dgnn_test::DataMessage_AdjMessage* adjlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adjlist_;
  }
  if (adjlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dgnn_test::DataMessage_AdjMessage>::GetOwningArena(adjlist);
    if (message_arena != submessage_arena) {
      adjlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjlist, submessage_arena);
    }
    
  } else {
    
  }
  adjlist_ = adjlist;
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.DataMessage.adjList)
}

// .dgnn_test.DataMessage.FeatureMessage featureList = 3;
inline bool DataMessage::_internal_has_featurelist() const {
  return this != internal_default_instance() && featurelist_ != nullptr;
}
inline bool DataMessage::has_featurelist() const {
  return _internal_has_featurelist();
}
inline void DataMessage::clear_featurelist() {
  if (GetArenaForAllocation() == nullptr && featurelist_ != nullptr) {
    delete featurelist_;
  }
  featurelist_ = nullptr;
}
inline const ::dgnn_test::DataMessage_FeatureMessage& DataMessage::_internal_featurelist() const {
  const ::dgnn_test::DataMessage_FeatureMessage* p = featurelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::dgnn_test::DataMessage_FeatureMessage&>(
      ::dgnn_test::_DataMessage_FeatureMessage_default_instance_);
}
inline const ::dgnn_test::DataMessage_FeatureMessage& DataMessage::featurelist() const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.featureList)
  return _internal_featurelist();
}
inline void DataMessage::unsafe_arena_set_allocated_featurelist(
    ::dgnn_test::DataMessage_FeatureMessage* featurelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(featurelist_);
  }
  featurelist_ = featurelist;
  if (featurelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dgnn_test.DataMessage.featureList)
}
inline ::dgnn_test::DataMessage_FeatureMessage* DataMessage::release_featurelist() {
  
  ::dgnn_test::DataMessage_FeatureMessage* temp = featurelist_;
  featurelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dgnn_test::DataMessage_FeatureMessage* DataMessage::unsafe_arena_release_featurelist() {
  // @@protoc_insertion_point(field_release:dgnn_test.DataMessage.featureList)
  
  ::dgnn_test::DataMessage_FeatureMessage* temp = featurelist_;
  featurelist_ = nullptr;
  return temp;
}
inline ::dgnn_test::DataMessage_FeatureMessage* DataMessage::_internal_mutable_featurelist() {
  
  if (featurelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::dgnn_test::DataMessage_FeatureMessage>(GetArenaForAllocation());
    featurelist_ = p;
  }
  return featurelist_;
}
inline ::dgnn_test::DataMessage_FeatureMessage* DataMessage::mutable_featurelist() {
  ::dgnn_test::DataMessage_FeatureMessage* _msg = _internal_mutable_featurelist();
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.featureList)
  return _msg;
}
inline void DataMessage::set_allocated_featurelist(::dgnn_test::DataMessage_FeatureMessage* featurelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete featurelist_;
  }
  if (featurelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dgnn_test::DataMessage_FeatureMessage>::GetOwningArena(featurelist);
    if (message_arena != submessage_arena) {
      featurelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, featurelist, submessage_arena);
    }
    
  } else {
    
  }
  featurelist_ = featurelist;
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.DataMessage.featureList)
}

// .dgnn_test.DataMessage.LabelMessage labelList = 4;
inline bool DataMessage::_internal_has_labellist() const {
  return this != internal_default_instance() && labellist_ != nullptr;
}
inline bool DataMessage::has_labellist() const {
  return _internal_has_labellist();
}
inline void DataMessage::clear_labellist() {
  if (GetArenaForAllocation() == nullptr && labellist_ != nullptr) {
    delete labellist_;
  }
  labellist_ = nullptr;
}
inline const ::dgnn_test::DataMessage_LabelMessage& DataMessage::_internal_labellist() const {
  const ::dgnn_test::DataMessage_LabelMessage* p = labellist_;
  return p != nullptr ? *p : reinterpret_cast<const ::dgnn_test::DataMessage_LabelMessage&>(
      ::dgnn_test::_DataMessage_LabelMessage_default_instance_);
}
inline const ::dgnn_test::DataMessage_LabelMessage& DataMessage::labellist() const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.labelList)
  return _internal_labellist();
}
inline void DataMessage::unsafe_arena_set_allocated_labellist(
    ::dgnn_test::DataMessage_LabelMessage* labellist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labellist_);
  }
  labellist_ = labellist;
  if (labellist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dgnn_test.DataMessage.labelList)
}
inline ::dgnn_test::DataMessage_LabelMessage* DataMessage::release_labellist() {
  
  ::dgnn_test::DataMessage_LabelMessage* temp = labellist_;
  labellist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dgnn_test::DataMessage_LabelMessage* DataMessage::unsafe_arena_release_labellist() {
  // @@protoc_insertion_point(field_release:dgnn_test.DataMessage.labelList)
  
  ::dgnn_test::DataMessage_LabelMessage* temp = labellist_;
  labellist_ = nullptr;
  return temp;
}
inline ::dgnn_test::DataMessage_LabelMessage* DataMessage::_internal_mutable_labellist() {
  
  if (labellist_ == nullptr) {
    auto* p = CreateMaybeMessage<::dgnn_test::DataMessage_LabelMessage>(GetArenaForAllocation());
    labellist_ = p;
  }
  return labellist_;
}
inline ::dgnn_test::DataMessage_LabelMessage* DataMessage::mutable_labellist() {
  ::dgnn_test::DataMessage_LabelMessage* _msg = _internal_mutable_labellist();
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.labelList)
  return _msg;
}
inline void DataMessage::set_allocated_labellist(::dgnn_test::DataMessage_LabelMessage* labellist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete labellist_;
  }
  if (labellist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::dgnn_test::DataMessage_LabelMessage>::GetOwningArena(labellist);
    if (message_arena != submessage_arena) {
      labellist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labellist, submessage_arena);
    }
    
  } else {
    
  }
  labellist_ = labellist;
  // @@protoc_insertion_point(field_set_allocated:dgnn_test.DataMessage.labelList)
}

// repeated .dgnn_test.NodeMessage nodesForEachWorker = 5;
inline int DataMessage::_internal_nodesforeachworker_size() const {
  return nodesforeachworker_.size();
}
inline int DataMessage::nodesforeachworker_size() const {
  return _internal_nodesforeachworker_size();
}
inline void DataMessage::clear_nodesforeachworker() {
  nodesforeachworker_.Clear();
}
inline ::dgnn_test::NodeMessage* DataMessage::mutable_nodesforeachworker(int index) {
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.nodesForEachWorker)
  return nodesforeachworker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage >*
DataMessage::mutable_nodesforeachworker() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.DataMessage.nodesForEachWorker)
  return &nodesforeachworker_;
}
inline const ::dgnn_test::NodeMessage& DataMessage::_internal_nodesforeachworker(int index) const {
  return nodesforeachworker_.Get(index);
}
inline const ::dgnn_test::NodeMessage& DataMessage::nodesforeachworker(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.nodesForEachWorker)
  return _internal_nodesforeachworker(index);
}
inline ::dgnn_test::NodeMessage* DataMessage::_internal_add_nodesforeachworker() {
  return nodesforeachworker_.Add();
}
inline ::dgnn_test::NodeMessage* DataMessage::add_nodesforeachworker() {
  ::dgnn_test::NodeMessage* _add = _internal_add_nodesforeachworker();
  // @@protoc_insertion_point(field_add:dgnn_test.DataMessage.nodesForEachWorker)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::NodeMessage >&
DataMessage::nodesforeachworker() const {
  // @@protoc_insertion_point(field_list:dgnn_test.DataMessage.nodesForEachWorker)
  return nodesforeachworker_;
}

// repeated .dgnn_test.IntIntPair degreeMap = 6;
inline int DataMessage::_internal_degreemap_size() const {
  return degreemap_.size();
}
inline int DataMessage::degreemap_size() const {
  return _internal_degreemap_size();
}
inline void DataMessage::clear_degreemap() {
  degreemap_.Clear();
}
inline ::dgnn_test::IntIntPair* DataMessage::mutable_degreemap(int index) {
  // @@protoc_insertion_point(field_mutable:dgnn_test.DataMessage.degreeMap)
  return degreemap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::IntIntPair >*
DataMessage::mutable_degreemap() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.DataMessage.degreeMap)
  return &degreemap_;
}
inline const ::dgnn_test::IntIntPair& DataMessage::_internal_degreemap(int index) const {
  return degreemap_.Get(index);
}
inline const ::dgnn_test::IntIntPair& DataMessage::degreemap(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.DataMessage.degreeMap)
  return _internal_degreemap(index);
}
inline ::dgnn_test::IntIntPair* DataMessage::_internal_add_degreemap() {
  return degreemap_.Add();
}
inline ::dgnn_test::IntIntPair* DataMessage::add_degreemap() {
  ::dgnn_test::IntIntPair* _add = _internal_add_degreemap();
  // @@protoc_insertion_point(field_add:dgnn_test.DataMessage.degreeMap)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dgnn_test::IntIntPair >&
DataMessage::degreemap() const {
  // @@protoc_insertion_point(field_list:dgnn_test.DataMessage.degreeMap)
  return degreemap_;
}

// -------------------------------------------------------------------

// NodeMessage

// repeated int32 nodes = 1;
inline int NodeMessage::_internal_nodes_size() const {
  return nodes_.size();
}
inline int NodeMessage::nodes_size() const {
  return _internal_nodes_size();
}
inline void NodeMessage::clear_nodes() {
  nodes_.Clear();
}
inline int32_t NodeMessage::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline int32_t NodeMessage::nodes(int index) const {
  // @@protoc_insertion_point(field_get:dgnn_test.NodeMessage.nodes)
  return _internal_nodes(index);
}
inline void NodeMessage::set_nodes(int index, int32_t value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:dgnn_test.NodeMessage.nodes)
}
inline void NodeMessage::_internal_add_nodes(int32_t value) {
  nodes_.Add(value);
}
inline void NodeMessage::add_nodes(int32_t value) {
  _internal_add_nodes(value);
  // @@protoc_insertion_point(field_add:dgnn_test.NodeMessage.nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeMessage::_internal_nodes() const {
  return nodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeMessage::nodes() const {
  // @@protoc_insertion_point(field_list:dgnn_test.NodeMessage.nodes)
  return _internal_nodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeMessage::_internal_mutable_nodes() {
  return &nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeMessage::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:dgnn_test.NodeMessage.nodes)
  return _internal_mutable_nodes();
}

// int32 layid = 2;
inline void NodeMessage::clear_layid() {
  layid_ = 0;
}
inline int32_t NodeMessage::_internal_layid() const {
  return layid_;
}
inline int32_t NodeMessage::layid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.NodeMessage.layid)
  return _internal_layid();
}
inline void NodeMessage::_internal_set_layid(int32_t value) {
  
  layid_ = value;
}
inline void NodeMessage::set_layid(int32_t value) {
  _internal_set_layid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.NodeMessage.layid)
}

// int32 wid = 3;
inline void NodeMessage::clear_wid() {
  wid_ = 0;
}
inline int32_t NodeMessage::_internal_wid() const {
  return wid_;
}
inline int32_t NodeMessage::wid() const {
  // @@protoc_insertion_point(field_get:dgnn_test.NodeMessage.wid)
  return _internal_wid();
}
inline void NodeMessage::_internal_set_wid(int32_t value) {
  
  wid_ = value;
}
inline void NodeMessage::set_wid(int32_t value) {
  _internal_set_wid(value);
  // @@protoc_insertion_point(field_set:dgnn_test.NodeMessage.wid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dgnn_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dgnn_5ftest_2eproto
