// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dgnn_test.proto
#ifndef GRPC_dgnn_5ftest_2eproto__INCLUDED
#define GRPC_dgnn_5ftest_2eproto__INCLUDED

#include "dgnn_test.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace dgnn_test {

class DgnnProtoService final {
 public:
  static constexpr char const* service_full_name() {
    return "dgnn_test.DgnnProtoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::dgnn_test::DataMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::DataMessage>> AsyncpullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::DataMessage>>(AsyncpullDataFromMasterGeneralRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::DataMessage>> PrepareAsyncpullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::DataMessage>>(PrepareAsyncpullDataFromMasterGeneralRaw(context, request, cq));
    }
    virtual ::grpc::Status initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::dgnn_test::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> AsyncinitParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(AsyncinitParameterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> PrepareAsyncinitParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(PrepareAsyncinitParameterRaw(context, request, cq));
    }
    virtual ::grpc::Status barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::dgnn_test::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> Asyncbarrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(AsyncbarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> PrepareAsyncbarrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(PrepareAsyncbarrierRaw(context, request, cq));
    }
    virtual ::grpc::Status workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::EmbGradMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>> AsyncworkerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>>(AsyncworkerPullEmbRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>> PrepareAsyncworkerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>>(PrepareAsyncworkerPullEmbRaw(context, request, cq));
    }
    virtual ::grpc::Status setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> AsyncsetAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(AsyncsetAndSendGRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> PrepareAsyncsetAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(PrepareAsyncsetAndSendGRaw(context, request, cq));
    }
    virtual ::grpc::Status sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::dgnn_test::AccuracyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::AccuracyMessage>> AsyncsendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::AccuracyMessage>>(AsyncsendAccuracyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::AccuracyMessage>> PrepareAsyncsendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::AccuracyMessage>>(PrepareAsyncsendAccuracyRaw(context, request, cq));
    }
    virtual ::grpc::Status freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::dgnn_test::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> AsyncfreeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(AsyncfreeMasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> PrepareAsyncfreeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(PrepareAsyncfreeMasterRaw(context, request, cq));
    }
    virtual ::grpc::Status server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::dgnn_test::ParamGrad* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::ParamGrad>> Asyncserver_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::ParamGrad>>(Asyncserver_PullParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::ParamGrad>> PrepareAsyncserver_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::ParamGrad>>(PrepareAsyncserver_PullParamsRaw(context, request, cq));
    }
    virtual ::grpc::Status server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::dgnn_test::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> Asyncserver_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(Asyncserver_updateParamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> PrepareAsyncserver_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(PrepareAsyncserver_updateParamRaw(context, request, cq));
    }
    virtual ::grpc::Status sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> AsyncsendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(AsyncsendNodes2WkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> PrepareAsyncsendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(PrepareAsyncsendNodes2WkRaw(context, request, cq));
    }
    virtual ::grpc::Status workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::EmbGradMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>> AsyncworkerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>>(AsyncworkerPullRmtTrainFeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>> PrepareAsyncworkerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>>(PrepareAsyncworkerPullRmtTrainFeatRaw(context, request, cq));
    }
    virtual ::grpc::Status sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> AsyncsendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(AsyncsendInNodes2WkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> PrepareAsyncsendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(PrepareAsyncsendInNodes2WkRaw(context, request, cq));
    }
    virtual ::grpc::Status pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::NullMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> AsyncpushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(AsyncpushEmbsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>> PrepareAsyncpushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>>(PrepareAsyncpushEmbsRaw(context, request, cq));
    }
    virtual ::grpc::Status aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NodeMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NodeMessage>> AsyncaggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NodeMessage>>(AsyncaggregateNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NodeMessage>> PrepareAsyncaggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NodeMessage>>(PrepareAsyncaggregateNodesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response, std::function<void(::grpc::Status)>) = 0;
      virtual void server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::DataMessage>* AsyncpullDataFromMasterGeneralRaw(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::DataMessage>* PrepareAsyncpullDataFromMasterGeneralRaw(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* AsyncinitParameterRaw(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* PrepareAsyncinitParameterRaw(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* AsyncbarrierRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* PrepareAsyncbarrierRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>* AsyncworkerPullEmbRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>* PrepareAsyncworkerPullEmbRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* AsyncsetAndSendGRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* PrepareAsyncsetAndSendGRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::AccuracyMessage>* AsyncsendAccuracyRaw(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::AccuracyMessage>* PrepareAsyncsendAccuracyRaw(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* AsyncfreeMasterRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* PrepareAsyncfreeMasterRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::ParamGrad>* Asyncserver_PullParamsRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::ParamGrad>* PrepareAsyncserver_PullParamsRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* Asyncserver_updateParamRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* PrepareAsyncserver_updateParamRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* AsyncsendNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* PrepareAsyncsendNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>* AsyncworkerPullRmtTrainFeatRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::EmbGradMessage>* PrepareAsyncworkerPullRmtTrainFeatRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* AsyncsendInNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* PrepareAsyncsendInNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* AsyncpushEmbsRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NullMessage>* PrepareAsyncpushEmbsRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NodeMessage>* AsyncaggregateNodesRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dgnn_test::NodeMessage>* PrepareAsyncaggregateNodesRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::dgnn_test::DataMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::DataMessage>> AsyncpullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::DataMessage>>(AsyncpullDataFromMasterGeneralRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::DataMessage>> PrepareAsyncpullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::DataMessage>>(PrepareAsyncpullDataFromMasterGeneralRaw(context, request, cq));
    }
    ::grpc::Status initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::dgnn_test::NullMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> AsyncinitParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(AsyncinitParameterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> PrepareAsyncinitParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(PrepareAsyncinitParameterRaw(context, request, cq));
    }
    ::grpc::Status barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::dgnn_test::NullMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> Asyncbarrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(AsyncbarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> PrepareAsyncbarrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(PrepareAsyncbarrierRaw(context, request, cq));
    }
    ::grpc::Status workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::EmbGradMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>> AsyncworkerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>>(AsyncworkerPullEmbRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>> PrepareAsyncworkerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>>(PrepareAsyncworkerPullEmbRaw(context, request, cq));
    }
    ::grpc::Status setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::NullMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> AsyncsetAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(AsyncsetAndSendGRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> PrepareAsyncsetAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(PrepareAsyncsetAndSendGRaw(context, request, cq));
    }
    ::grpc::Status sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::dgnn_test::AccuracyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::AccuracyMessage>> AsyncsendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::AccuracyMessage>>(AsyncsendAccuracyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::AccuracyMessage>> PrepareAsyncsendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::AccuracyMessage>>(PrepareAsyncsendAccuracyRaw(context, request, cq));
    }
    ::grpc::Status freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::dgnn_test::NullMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> AsyncfreeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(AsyncfreeMasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> PrepareAsyncfreeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(PrepareAsyncfreeMasterRaw(context, request, cq));
    }
    ::grpc::Status server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::dgnn_test::ParamGrad* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::ParamGrad>> Asyncserver_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::ParamGrad>>(Asyncserver_PullParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::ParamGrad>> PrepareAsyncserver_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::ParamGrad>>(PrepareAsyncserver_PullParamsRaw(context, request, cq));
    }
    ::grpc::Status server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::dgnn_test::NullMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> Asyncserver_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(Asyncserver_updateParamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> PrepareAsyncserver_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(PrepareAsyncserver_updateParamRaw(context, request, cq));
    }
    ::grpc::Status sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NullMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> AsyncsendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(AsyncsendNodes2WkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> PrepareAsyncsendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(PrepareAsyncsendNodes2WkRaw(context, request, cq));
    }
    ::grpc::Status workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::EmbGradMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>> AsyncworkerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>>(AsyncworkerPullRmtTrainFeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>> PrepareAsyncworkerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>>(PrepareAsyncworkerPullRmtTrainFeatRaw(context, request, cq));
    }
    ::grpc::Status sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NullMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> AsyncsendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(AsyncsendInNodes2WkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> PrepareAsyncsendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(PrepareAsyncsendInNodes2WkRaw(context, request, cq));
    }
    ::grpc::Status pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::NullMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> AsyncpushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(AsyncpushEmbsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>> PrepareAsyncpushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>>(PrepareAsyncpushEmbsRaw(context, request, cq));
    }
    ::grpc::Status aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NodeMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NodeMessage>> AsyncaggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NodeMessage>>(AsyncaggregateNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NodeMessage>> PrepareAsyncaggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dgnn_test::NodeMessage>>(PrepareAsyncaggregateNodesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response, std::function<void(::grpc::Status)>) override;
      void pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) override;
      void initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) override;
      void barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, std::function<void(::grpc::Status)>) override;
      void workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) override;
      void setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response, std::function<void(::grpc::Status)>) override;
      void sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) override;
      void freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response, std::function<void(::grpc::Status)>) override;
      void server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response, ::grpc::ClientUnaryReactor* reactor) override;
      void server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) override;
      void server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) override;
      void sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, std::function<void(::grpc::Status)>) override;
      void workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) override;
      void sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)>) override;
      void pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response, std::function<void(::grpc::Status)>) override;
      void aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::DataMessage>* AsyncpullDataFromMasterGeneralRaw(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::DataMessage>* PrepareAsyncpullDataFromMasterGeneralRaw(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* AsyncinitParameterRaw(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* PrepareAsyncinitParameterRaw(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* AsyncbarrierRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* PrepareAsyncbarrierRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>* AsyncworkerPullEmbRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>* PrepareAsyncworkerPullEmbRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* AsyncsetAndSendGRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* PrepareAsyncsetAndSendGRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::AccuracyMessage>* AsyncsendAccuracyRaw(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::AccuracyMessage>* PrepareAsyncsendAccuracyRaw(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* AsyncfreeMasterRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* PrepareAsyncfreeMasterRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::ParamGrad>* Asyncserver_PullParamsRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::ParamGrad>* PrepareAsyncserver_PullParamsRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* Asyncserver_updateParamRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* PrepareAsyncserver_updateParamRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* AsyncsendNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* PrepareAsyncsendNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>* AsyncworkerPullRmtTrainFeatRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>* PrepareAsyncworkerPullRmtTrainFeatRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* AsyncsendInNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* PrepareAsyncsendInNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* AsyncpushEmbsRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* PrepareAsyncpushEmbsRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NodeMessage>* AsyncaggregateNodesRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dgnn_test::NodeMessage>* PrepareAsyncaggregateNodesRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_pullDataFromMasterGeneral_;
    const ::grpc::internal::RpcMethod rpcmethod_initParameter_;
    const ::grpc::internal::RpcMethod rpcmethod_barrier_;
    const ::grpc::internal::RpcMethod rpcmethod_workerPullEmb_;
    const ::grpc::internal::RpcMethod rpcmethod_setAndSendG_;
    const ::grpc::internal::RpcMethod rpcmethod_sendAccuracy_;
    const ::grpc::internal::RpcMethod rpcmethod_freeMaster_;
    const ::grpc::internal::RpcMethod rpcmethod_server_PullParams_;
    const ::grpc::internal::RpcMethod rpcmethod_server_updateParam_;
    const ::grpc::internal::RpcMethod rpcmethod_sendNodes2Wk_;
    const ::grpc::internal::RpcMethod rpcmethod_workerPullRmtTrainFeat_;
    const ::grpc::internal::RpcMethod rpcmethod_sendInNodes2Wk_;
    const ::grpc::internal::RpcMethod rpcmethod_pushEmbs_;
    const ::grpc::internal::RpcMethod rpcmethod_aggregateNodes_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status pullDataFromMasterGeneral(::grpc::ServerContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response);
    virtual ::grpc::Status initParameter(::grpc::ServerContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response);
    virtual ::grpc::Status barrier(::grpc::ServerContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response);
    virtual ::grpc::Status workerPullEmb(::grpc::ServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response);
    virtual ::grpc::Status setAndSendG(::grpc::ServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response);
    virtual ::grpc::Status sendAccuracy(::grpc::ServerContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response);
    virtual ::grpc::Status freeMaster(::grpc::ServerContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response);
    virtual ::grpc::Status server_PullParams(::grpc::ServerContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response);
    virtual ::grpc::Status server_updateParam(::grpc::ServerContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response);
    virtual ::grpc::Status sendNodes2Wk(::grpc::ServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response);
    virtual ::grpc::Status workerPullRmtTrainFeat(::grpc::ServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response);
    virtual ::grpc::Status sendInNodes2Wk(::grpc::ServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response);
    virtual ::grpc::Status pushEmbs(::grpc::ServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response);
    virtual ::grpc::Status aggregateNodes(::grpc::ServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_pullDataFromMasterGeneral : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_pullDataFromMasterGeneral() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_pullDataFromMasterGeneral() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pullDataFromMasterGeneral(::grpc::ServerContext* /*context*/, const ::dgnn_test::ContextMessage* /*request*/, ::dgnn_test::DataMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpullDataFromMasterGeneral(::grpc::ServerContext* context, ::dgnn_test::ContextMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::DataMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_initParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_initParameter() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_initParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status initParameter(::grpc::ServerContext* /*context*/, const ::dgnn_test::NetInfoMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinitParameter(::grpc::ServerContext* context, ::dgnn_test::NetInfoMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_barrier() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status barrier(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbarrier(::grpc::ServerContext* context, ::dgnn_test::NullMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_workerPullEmb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_workerPullEmb() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_workerPullEmb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullEmb(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestworkerPullEmb(::grpc::ServerContext* context, ::dgnn_test::EmbGradMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::EmbGradMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setAndSendG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setAndSendG() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_setAndSendG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAndSendG(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetAndSendG(::grpc::ServerContext* context, ::dgnn_test::EmbGradMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendAccuracy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_sendAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendAccuracy(::grpc::ServerContext* /*context*/, const ::dgnn_test::AccuracyMessage* /*request*/, ::dgnn_test::AccuracyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendAccuracy(::grpc::ServerContext* context, ::dgnn_test::AccuracyMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::AccuracyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_freeMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_freeMaster() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_freeMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeMaster(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfreeMaster(::grpc::ServerContext* context, ::dgnn_test::NullMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_server_PullParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_server_PullParams() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_server_PullParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_PullParams(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::ParamGrad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_PullParams(::grpc::ServerContext* context, ::dgnn_test::ParamGrad* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::ParamGrad>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_server_updateParam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_server_updateParam() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_server_updateParam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_updateParam(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_updateParam(::grpc::ServerContext* context, ::dgnn_test::ParamGrad* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendNodes2Wk() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_sendNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendNodes2Wk(::grpc::ServerContext* context, ::dgnn_test::NodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_workerPullRmtTrainFeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_workerPullRmtTrainFeat() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_workerPullRmtTrainFeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullRmtTrainFeat(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestworkerPullRmtTrainFeat(::grpc::ServerContext* context, ::dgnn_test::EmbGradMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::EmbGradMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendInNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendInNodes2Wk() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_sendInNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendInNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendInNodes2Wk(::grpc::ServerContext* context, ::dgnn_test::NodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_pushEmbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_pushEmbs() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_pushEmbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pushEmbs(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpushEmbs(::grpc::ServerContext* context, ::dgnn_test::EmbGradMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NullMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_aggregateNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_aggregateNodes() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_aggregateNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status aggregateNodes(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaggregateNodes(::grpc::ServerContext* context, ::dgnn_test::NodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::dgnn_test::NodeMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_pullDataFromMasterGeneral<WithAsyncMethod_initParameter<WithAsyncMethod_barrier<WithAsyncMethod_workerPullEmb<WithAsyncMethod_setAndSendG<WithAsyncMethod_sendAccuracy<WithAsyncMethod_freeMaster<WithAsyncMethod_server_PullParams<WithAsyncMethod_server_updateParam<WithAsyncMethod_sendNodes2Wk<WithAsyncMethod_workerPullRmtTrainFeat<WithAsyncMethod_sendInNodes2Wk<WithAsyncMethod_pushEmbs<WithAsyncMethod_aggregateNodes<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_pullDataFromMasterGeneral : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_pullDataFromMasterGeneral() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::ContextMessage, ::dgnn_test::DataMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response) { return this->pullDataFromMasterGeneral(context, request, response); }));}
    void SetMessageAllocatorFor_pullDataFromMasterGeneral(
        ::grpc::MessageAllocator< ::dgnn_test::ContextMessage, ::dgnn_test::DataMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::ContextMessage, ::dgnn_test::DataMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_pullDataFromMasterGeneral() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pullDataFromMasterGeneral(::grpc::ServerContext* /*context*/, const ::dgnn_test::ContextMessage* /*request*/, ::dgnn_test::DataMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pullDataFromMasterGeneral(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::ContextMessage* /*request*/, ::dgnn_test::DataMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_initParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_initParameter() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NetInfoMessage, ::dgnn_test::NullMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response) { return this->initParameter(context, request, response); }));}
    void SetMessageAllocatorFor_initParameter(
        ::grpc::MessageAllocator< ::dgnn_test::NetInfoMessage, ::dgnn_test::NullMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NetInfoMessage, ::dgnn_test::NullMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_initParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status initParameter(::grpc::ServerContext* /*context*/, const ::dgnn_test::NetInfoMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* initParameter(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::NetInfoMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_barrier() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response) { return this->barrier(context, request, response); }));}
    void SetMessageAllocatorFor_barrier(
        ::grpc::MessageAllocator< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status barrier(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* barrier(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_workerPullEmb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_workerPullEmb() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response) { return this->workerPullEmb(context, request, response); }));}
    void SetMessageAllocatorFor_workerPullEmb(
        ::grpc::MessageAllocator< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_workerPullEmb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullEmb(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* workerPullEmb(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setAndSendG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setAndSendG() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response) { return this->setAndSendG(context, request, response); }));}
    void SetMessageAllocatorFor_setAndSendG(
        ::grpc::MessageAllocator< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setAndSendG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAndSendG(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setAndSendG(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendAccuracy() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response) { return this->sendAccuracy(context, request, response); }));}
    void SetMessageAllocatorFor_sendAccuracy(
        ::grpc::MessageAllocator< ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendAccuracy(::grpc::ServerContext* /*context*/, const ::dgnn_test::AccuracyMessage* /*request*/, ::dgnn_test::AccuracyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendAccuracy(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::AccuracyMessage* /*request*/, ::dgnn_test::AccuracyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_freeMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_freeMaster() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response) { return this->freeMaster(context, request, response); }));}
    void SetMessageAllocatorFor_freeMaster(
        ::grpc::MessageAllocator< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_freeMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeMaster(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* freeMaster(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_server_PullParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_server_PullParams() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response) { return this->server_PullParams(context, request, response); }));}
    void SetMessageAllocatorFor_server_PullParams(
        ::grpc::MessageAllocator< ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_server_PullParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_PullParams(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::ParamGrad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* server_PullParams(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::ParamGrad* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_server_updateParam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_server_updateParam() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::ParamGrad, ::dgnn_test::NullMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response) { return this->server_updateParam(context, request, response); }));}
    void SetMessageAllocatorFor_server_updateParam(
        ::grpc::MessageAllocator< ::dgnn_test::ParamGrad, ::dgnn_test::NullMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::ParamGrad, ::dgnn_test::NullMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_server_updateParam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_updateParam(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* server_updateParam(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::NullMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendNodes2Wk() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response) { return this->sendNodes2Wk(context, request, response); }));}
    void SetMessageAllocatorFor_sendNodes2Wk(
        ::grpc::MessageAllocator< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendNodes2Wk(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_workerPullRmtTrainFeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_workerPullRmtTrainFeat() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response) { return this->workerPullRmtTrainFeat(context, request, response); }));}
    void SetMessageAllocatorFor_workerPullRmtTrainFeat(
        ::grpc::MessageAllocator< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_workerPullRmtTrainFeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullRmtTrainFeat(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* workerPullRmtTrainFeat(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendInNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendInNodes2Wk() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response) { return this->sendInNodes2Wk(context, request, response); }));}
    void SetMessageAllocatorFor_sendInNodes2Wk(
        ::grpc::MessageAllocator< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendInNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendInNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendInNodes2Wk(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_pushEmbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_pushEmbs() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response) { return this->pushEmbs(context, request, response); }));}
    void SetMessageAllocatorFor_pushEmbs(
        ::grpc::MessageAllocator< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_pushEmbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pushEmbs(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pushEmbs(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_aggregateNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_aggregateNodes() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response) { return this->aggregateNodes(context, request, response); }));}
    void SetMessageAllocatorFor_aggregateNodes(
        ::grpc::MessageAllocator< ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_aggregateNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status aggregateNodes(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* aggregateNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NodeMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_pullDataFromMasterGeneral<WithCallbackMethod_initParameter<WithCallbackMethod_barrier<WithCallbackMethod_workerPullEmb<WithCallbackMethod_setAndSendG<WithCallbackMethod_sendAccuracy<WithCallbackMethod_freeMaster<WithCallbackMethod_server_PullParams<WithCallbackMethod_server_updateParam<WithCallbackMethod_sendNodes2Wk<WithCallbackMethod_workerPullRmtTrainFeat<WithCallbackMethod_sendInNodes2Wk<WithCallbackMethod_pushEmbs<WithCallbackMethod_aggregateNodes<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_pullDataFromMasterGeneral : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_pullDataFromMasterGeneral() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_pullDataFromMasterGeneral() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pullDataFromMasterGeneral(::grpc::ServerContext* /*context*/, const ::dgnn_test::ContextMessage* /*request*/, ::dgnn_test::DataMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_initParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_initParameter() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_initParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status initParameter(::grpc::ServerContext* /*context*/, const ::dgnn_test::NetInfoMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_barrier() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status barrier(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_workerPullEmb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_workerPullEmb() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_workerPullEmb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullEmb(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setAndSendG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setAndSendG() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_setAndSendG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAndSendG(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendAccuracy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_sendAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendAccuracy(::grpc::ServerContext* /*context*/, const ::dgnn_test::AccuracyMessage* /*request*/, ::dgnn_test::AccuracyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_freeMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_freeMaster() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_freeMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeMaster(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_server_PullParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_server_PullParams() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_server_PullParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_PullParams(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::ParamGrad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_server_updateParam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_server_updateParam() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_server_updateParam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_updateParam(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendNodes2Wk() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_sendNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_workerPullRmtTrainFeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_workerPullRmtTrainFeat() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_workerPullRmtTrainFeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullRmtTrainFeat(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendInNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendInNodes2Wk() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_sendInNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendInNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_pushEmbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_pushEmbs() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_pushEmbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pushEmbs(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_aggregateNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_aggregateNodes() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_aggregateNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status aggregateNodes(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_pullDataFromMasterGeneral : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_pullDataFromMasterGeneral() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_pullDataFromMasterGeneral() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pullDataFromMasterGeneral(::grpc::ServerContext* /*context*/, const ::dgnn_test::ContextMessage* /*request*/, ::dgnn_test::DataMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpullDataFromMasterGeneral(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_initParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_initParameter() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_initParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status initParameter(::grpc::ServerContext* /*context*/, const ::dgnn_test::NetInfoMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinitParameter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_barrier() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status barrier(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbarrier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_workerPullEmb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_workerPullEmb() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_workerPullEmb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullEmb(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestworkerPullEmb(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setAndSendG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setAndSendG() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_setAndSendG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAndSendG(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetAndSendG(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendAccuracy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_sendAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendAccuracy(::grpc::ServerContext* /*context*/, const ::dgnn_test::AccuracyMessage* /*request*/, ::dgnn_test::AccuracyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendAccuracy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_freeMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_freeMaster() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_freeMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeMaster(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfreeMaster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_server_PullParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_server_PullParams() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_server_PullParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_PullParams(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::ParamGrad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_PullParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_server_updateParam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_server_updateParam() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_server_updateParam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_updateParam(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_updateParam(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendNodes2Wk() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_sendNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendNodes2Wk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_workerPullRmtTrainFeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_workerPullRmtTrainFeat() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_workerPullRmtTrainFeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullRmtTrainFeat(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestworkerPullRmtTrainFeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendInNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendInNodes2Wk() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_sendInNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendInNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendInNodes2Wk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_pushEmbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_pushEmbs() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_pushEmbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pushEmbs(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpushEmbs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_aggregateNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_aggregateNodes() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_aggregateNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status aggregateNodes(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaggregateNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_pullDataFromMasterGeneral : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_pullDataFromMasterGeneral() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->pullDataFromMasterGeneral(context, request, response); }));
    }
    ~WithRawCallbackMethod_pullDataFromMasterGeneral() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pullDataFromMasterGeneral(::grpc::ServerContext* /*context*/, const ::dgnn_test::ContextMessage* /*request*/, ::dgnn_test::DataMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pullDataFromMasterGeneral(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_initParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_initParameter() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->initParameter(context, request, response); }));
    }
    ~WithRawCallbackMethod_initParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status initParameter(::grpc::ServerContext* /*context*/, const ::dgnn_test::NetInfoMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* initParameter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_barrier() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->barrier(context, request, response); }));
    }
    ~WithRawCallbackMethod_barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status barrier(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* barrier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_workerPullEmb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_workerPullEmb() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->workerPullEmb(context, request, response); }));
    }
    ~WithRawCallbackMethod_workerPullEmb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullEmb(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* workerPullEmb(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setAndSendG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setAndSendG() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setAndSendG(context, request, response); }));
    }
    ~WithRawCallbackMethod_setAndSendG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAndSendG(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setAndSendG(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendAccuracy() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendAccuracy(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendAccuracy(::grpc::ServerContext* /*context*/, const ::dgnn_test::AccuracyMessage* /*request*/, ::dgnn_test::AccuracyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendAccuracy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_freeMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_freeMaster() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->freeMaster(context, request, response); }));
    }
    ~WithRawCallbackMethod_freeMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeMaster(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* freeMaster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_server_PullParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_server_PullParams() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->server_PullParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_server_PullParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_PullParams(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::ParamGrad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* server_PullParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_server_updateParam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_server_updateParam() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->server_updateParam(context, request, response); }));
    }
    ~WithRawCallbackMethod_server_updateParam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_updateParam(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* server_updateParam(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendNodes2Wk() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendNodes2Wk(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendNodes2Wk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_workerPullRmtTrainFeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_workerPullRmtTrainFeat() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->workerPullRmtTrainFeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_workerPullRmtTrainFeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status workerPullRmtTrainFeat(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* workerPullRmtTrainFeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendInNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendInNodes2Wk() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendInNodes2Wk(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendInNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendInNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendInNodes2Wk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_pushEmbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_pushEmbs() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->pushEmbs(context, request, response); }));
    }
    ~WithRawCallbackMethod_pushEmbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pushEmbs(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pushEmbs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_aggregateNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_aggregateNodes() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->aggregateNodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_aggregateNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status aggregateNodes(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* aggregateNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pullDataFromMasterGeneral : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_pullDataFromMasterGeneral() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::ContextMessage, ::dgnn_test::DataMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::ContextMessage, ::dgnn_test::DataMessage>* streamer) {
                       return this->StreamedpullDataFromMasterGeneral(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_pullDataFromMasterGeneral() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pullDataFromMasterGeneral(::grpc::ServerContext* /*context*/, const ::dgnn_test::ContextMessage* /*request*/, ::dgnn_test::DataMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpullDataFromMasterGeneral(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::ContextMessage,::dgnn_test::DataMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_initParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_initParameter() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::NetInfoMessage, ::dgnn_test::NullMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::NetInfoMessage, ::dgnn_test::NullMessage>* streamer) {
                       return this->StreamedinitParameter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_initParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status initParameter(::grpc::ServerContext* /*context*/, const ::dgnn_test::NetInfoMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedinitParameter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::NetInfoMessage,::dgnn_test::NullMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_barrier() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>* streamer) {
                       return this->Streamedbarrier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status barrier(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedbarrier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::NullMessage,::dgnn_test::NullMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_workerPullEmb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_workerPullEmb() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>* streamer) {
                       return this->StreamedworkerPullEmb(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_workerPullEmb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status workerPullEmb(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedworkerPullEmb(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::EmbGradMessage,::dgnn_test::EmbGradMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setAndSendG : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setAndSendG() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>* streamer) {
                       return this->StreamedsetAndSendG(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setAndSendG() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setAndSendG(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetAndSendG(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::EmbGradMessage,::dgnn_test::NullMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendAccuracy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage>* streamer) {
                       return this->StreamedsendAccuracy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendAccuracy(::grpc::ServerContext* /*context*/, const ::dgnn_test::AccuracyMessage* /*request*/, ::dgnn_test::AccuracyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendAccuracy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::AccuracyMessage,::dgnn_test::AccuracyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_freeMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_freeMaster() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::NullMessage, ::dgnn_test::NullMessage>* streamer) {
                       return this->StreamedfreeMaster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_freeMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status freeMaster(::grpc::ServerContext* /*context*/, const ::dgnn_test::NullMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfreeMaster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::NullMessage,::dgnn_test::NullMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_server_PullParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_server_PullParams() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad>* streamer) {
                       return this->Streamedserver_PullParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_server_PullParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status server_PullParams(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::ParamGrad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedserver_PullParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::ParamGrad,::dgnn_test::ParamGrad>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_server_updateParam : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_server_updateParam() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::ParamGrad, ::dgnn_test::NullMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::ParamGrad, ::dgnn_test::NullMessage>* streamer) {
                       return this->Streamedserver_updateParam(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_server_updateParam() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status server_updateParam(::grpc::ServerContext* /*context*/, const ::dgnn_test::ParamGrad* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedserver_updateParam(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::ParamGrad,::dgnn_test::NullMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendNodes2Wk() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>* streamer) {
                       return this->StreamedsendNodes2Wk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendNodes2Wk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::NodeMessage,::dgnn_test::NullMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_workerPullRmtTrainFeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_workerPullRmtTrainFeat() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage>* streamer) {
                       return this->StreamedworkerPullRmtTrainFeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_workerPullRmtTrainFeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status workerPullRmtTrainFeat(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::EmbGradMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedworkerPullRmtTrainFeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::EmbGradMessage,::dgnn_test::EmbGradMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendInNodes2Wk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendInNodes2Wk() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage>* streamer) {
                       return this->StreamedsendInNodes2Wk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendInNodes2Wk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendInNodes2Wk(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendInNodes2Wk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::NodeMessage,::dgnn_test::NullMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pushEmbs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_pushEmbs() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage>* streamer) {
                       return this->StreamedpushEmbs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_pushEmbs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pushEmbs(::grpc::ServerContext* /*context*/, const ::dgnn_test::EmbGradMessage* /*request*/, ::dgnn_test::NullMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpushEmbs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::EmbGradMessage,::dgnn_test::NullMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_aggregateNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_aggregateNodes() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage>* streamer) {
                       return this->StreamedaggregateNodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_aggregateNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status aggregateNodes(::grpc::ServerContext* /*context*/, const ::dgnn_test::NodeMessage* /*request*/, ::dgnn_test::NodeMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaggregateNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dgnn_test::NodeMessage,::dgnn_test::NodeMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_pullDataFromMasterGeneral<WithStreamedUnaryMethod_initParameter<WithStreamedUnaryMethod_barrier<WithStreamedUnaryMethod_workerPullEmb<WithStreamedUnaryMethod_setAndSendG<WithStreamedUnaryMethod_sendAccuracy<WithStreamedUnaryMethod_freeMaster<WithStreamedUnaryMethod_server_PullParams<WithStreamedUnaryMethod_server_updateParam<WithStreamedUnaryMethod_sendNodes2Wk<WithStreamedUnaryMethod_workerPullRmtTrainFeat<WithStreamedUnaryMethod_sendInNodes2Wk<WithStreamedUnaryMethod_pushEmbs<WithStreamedUnaryMethod_aggregateNodes<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_pullDataFromMasterGeneral<WithStreamedUnaryMethod_initParameter<WithStreamedUnaryMethod_barrier<WithStreamedUnaryMethod_workerPullEmb<WithStreamedUnaryMethod_setAndSendG<WithStreamedUnaryMethod_sendAccuracy<WithStreamedUnaryMethod_freeMaster<WithStreamedUnaryMethod_server_PullParams<WithStreamedUnaryMethod_server_updateParam<WithStreamedUnaryMethod_sendNodes2Wk<WithStreamedUnaryMethod_workerPullRmtTrainFeat<WithStreamedUnaryMethod_sendInNodes2Wk<WithStreamedUnaryMethod_pushEmbs<WithStreamedUnaryMethod_aggregateNodes<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace dgnn_test


#endif  // GRPC_dgnn_5ftest_2eproto__INCLUDED
