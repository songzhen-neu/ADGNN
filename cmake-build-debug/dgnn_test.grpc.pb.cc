// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dgnn_test.proto

#include "dgnn_test.pb.h"
#include "dgnn_test.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dgnn_test {

static const char* DgnnProtoService_method_names[] = {
  "/dgnn_test.DgnnProtoService/pullDataFromMasterGeneral",
  "/dgnn_test.DgnnProtoService/initParameter",
  "/dgnn_test.DgnnProtoService/barrier",
  "/dgnn_test.DgnnProtoService/workerPullEmb",
  "/dgnn_test.DgnnProtoService/setAndSendG",
  "/dgnn_test.DgnnProtoService/sendAccuracy",
  "/dgnn_test.DgnnProtoService/freeMaster",
  "/dgnn_test.DgnnProtoService/server_PullParams",
  "/dgnn_test.DgnnProtoService/server_updateParam",
  "/dgnn_test.DgnnProtoService/sendNodes2Wk",
  "/dgnn_test.DgnnProtoService/workerPullRmtTrainFeat",
  "/dgnn_test.DgnnProtoService/sendInNodes2Wk",
  "/dgnn_test.DgnnProtoService/pushEmbs",
  "/dgnn_test.DgnnProtoService/aggregateNodes",
};

std::unique_ptr< DgnnProtoService::Stub> DgnnProtoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DgnnProtoService::Stub> stub(new DgnnProtoService::Stub(channel, options));
  return stub;
}

DgnnProtoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_pullDataFromMasterGeneral_(DgnnProtoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_initParameter_(DgnnProtoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_barrier_(DgnnProtoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_workerPullEmb_(DgnnProtoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setAndSendG_(DgnnProtoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendAccuracy_(DgnnProtoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_freeMaster_(DgnnProtoService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_server_PullParams_(DgnnProtoService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_server_updateParam_(DgnnProtoService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendNodes2Wk_(DgnnProtoService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_workerPullRmtTrainFeat_(DgnnProtoService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendInNodes2Wk_(DgnnProtoService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pushEmbs_(DgnnProtoService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_aggregateNodes_(DgnnProtoService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DgnnProtoService::Stub::pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::dgnn_test::DataMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::ContextMessage, ::dgnn_test::DataMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pullDataFromMasterGeneral_, context, request, response);
}

void DgnnProtoService::Stub::async::pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::ContextMessage, ::dgnn_test::DataMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pullDataFromMasterGeneral_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::pullDataFromMasterGeneral(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pullDataFromMasterGeneral_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::DataMessage>* DgnnProtoService::Stub::PrepareAsyncpullDataFromMasterGeneralRaw(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::DataMessage, ::dgnn_test::ContextMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pullDataFromMasterGeneral_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::DataMessage>* DgnnProtoService::Stub::AsyncpullDataFromMasterGeneralRaw(::grpc::ClientContext* context, const ::dgnn_test::ContextMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpullDataFromMasterGeneralRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::dgnn_test::NullMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::NetInfoMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_initParameter_, context, request, response);
}

void DgnnProtoService::Stub::async::initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::NetInfoMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initParameter_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::initParameter(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initParameter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::PrepareAsyncinitParameterRaw(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NullMessage, ::dgnn_test::NetInfoMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_initParameter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::AsyncinitParameterRaw(::grpc::ClientContext* context, const ::dgnn_test::NetInfoMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitParameterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::dgnn_test::NullMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_barrier_, context, request, response);
}

void DgnnProtoService::Stub::async::barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_barrier_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::barrier(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_barrier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::PrepareAsyncbarrierRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_barrier_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::AsyncbarrierRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbarrierRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::EmbGradMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_workerPullEmb_, context, request, response);
}

void DgnnProtoService::Stub::async::workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_workerPullEmb_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::workerPullEmb(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_workerPullEmb_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>* DgnnProtoService::Stub::PrepareAsyncworkerPullEmbRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_workerPullEmb_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>* DgnnProtoService::Stub::AsyncworkerPullEmbRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncworkerPullEmbRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::NullMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setAndSendG_, context, request, response);
}

void DgnnProtoService::Stub::async::setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAndSendG_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::setAndSendG(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAndSendG_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::PrepareAsyncsetAndSendGRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NullMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setAndSendG_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::AsyncsetAndSendGRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetAndSendGRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::dgnn_test::AccuracyMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendAccuracy_, context, request, response);
}

void DgnnProtoService::Stub::async::sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendAccuracy_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::sendAccuracy(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendAccuracy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::AccuracyMessage>* DgnnProtoService::Stub::PrepareAsyncsendAccuracyRaw(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendAccuracy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::AccuracyMessage>* DgnnProtoService::Stub::AsyncsendAccuracyRaw(::grpc::ClientContext* context, const ::dgnn_test::AccuracyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendAccuracyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::dgnn_test::NullMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_freeMaster_, context, request, response);
}

void DgnnProtoService::Stub::async::freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_freeMaster_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::freeMaster(::grpc::ClientContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_freeMaster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::PrepareAsyncfreeMasterRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NullMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_freeMaster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::AsyncfreeMasterRaw(::grpc::ClientContext* context, const ::dgnn_test::NullMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfreeMasterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::dgnn_test::ParamGrad* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_server_PullParams_, context, request, response);
}

void DgnnProtoService::Stub::async::server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_server_PullParams_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::server_PullParams(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_server_PullParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::ParamGrad>* DgnnProtoService::Stub::PrepareAsyncserver_PullParamsRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_server_PullParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::ParamGrad>* DgnnProtoService::Stub::Asyncserver_PullParamsRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncserver_PullParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::dgnn_test::NullMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::ParamGrad, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_server_updateParam_, context, request, response);
}

void DgnnProtoService::Stub::async::server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::ParamGrad, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_server_updateParam_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::server_updateParam(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_server_updateParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::PrepareAsyncserver_updateParamRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NullMessage, ::dgnn_test::ParamGrad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_server_updateParam_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::Asyncserver_updateParamRaw(::grpc::ClientContext* context, const ::dgnn_test::ParamGrad& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncserver_updateParamRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NullMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendNodes2Wk_, context, request, response);
}

void DgnnProtoService::Stub::async::sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendNodes2Wk_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::sendNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendNodes2Wk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::PrepareAsyncsendNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NullMessage, ::dgnn_test::NodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendNodes2Wk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::AsyncsendNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendNodes2WkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::EmbGradMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_workerPullRmtTrainFeat_, context, request, response);
}

void DgnnProtoService::Stub::async::workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_workerPullRmtTrainFeat_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::workerPullRmtTrainFeat(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_workerPullRmtTrainFeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>* DgnnProtoService::Stub::PrepareAsyncworkerPullRmtTrainFeatRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_workerPullRmtTrainFeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::EmbGradMessage>* DgnnProtoService::Stub::AsyncworkerPullRmtTrainFeatRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncworkerPullRmtTrainFeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NullMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendInNodes2Wk_, context, request, response);
}

void DgnnProtoService::Stub::async::sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendInNodes2Wk_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::sendInNodes2Wk(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendInNodes2Wk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::PrepareAsyncsendInNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NullMessage, ::dgnn_test::NodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendInNodes2Wk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::AsyncsendInNodes2WkRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendInNodes2WkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::dgnn_test::NullMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pushEmbs_, context, request, response);
}

void DgnnProtoService::Stub::async::pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pushEmbs_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::pushEmbs(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pushEmbs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::PrepareAsyncpushEmbsRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NullMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pushEmbs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NullMessage>* DgnnProtoService::Stub::AsyncpushEmbsRaw(::grpc::ClientContext* context, const ::dgnn_test::EmbGradMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpushEmbsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DgnnProtoService::Stub::aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::dgnn_test::NodeMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_aggregateNodes_, context, request, response);
}

void DgnnProtoService::Stub::async::aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_aggregateNodes_, context, request, response, std::move(f));
}

void DgnnProtoService::Stub::async::aggregateNodes(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_aggregateNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NodeMessage>* DgnnProtoService::Stub::PrepareAsyncaggregateNodesRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_aggregateNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dgnn_test::NodeMessage>* DgnnProtoService::Stub::AsyncaggregateNodesRaw(::grpc::ClientContext* context, const ::dgnn_test::NodeMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaggregateNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

DgnnProtoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::ContextMessage, ::dgnn_test::DataMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::ContextMessage* req,
             ::dgnn_test::DataMessage* resp) {
               return service->pullDataFromMasterGeneral(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::NetInfoMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::NetInfoMessage* req,
             ::dgnn_test::NullMessage* resp) {
               return service->initParameter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::NullMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::NullMessage* req,
             ::dgnn_test::NullMessage* resp) {
               return service->barrier(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::EmbGradMessage* req,
             ::dgnn_test::EmbGradMessage* resp) {
               return service->workerPullEmb(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::EmbGradMessage* req,
             ::dgnn_test::NullMessage* resp) {
               return service->setAndSendG(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::AccuracyMessage, ::dgnn_test::AccuracyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::AccuracyMessage* req,
             ::dgnn_test::AccuracyMessage* resp) {
               return service->sendAccuracy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::NullMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::NullMessage* req,
             ::dgnn_test::NullMessage* resp) {
               return service->freeMaster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::ParamGrad, ::dgnn_test::ParamGrad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::ParamGrad* req,
             ::dgnn_test::ParamGrad* resp) {
               return service->server_PullParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::ParamGrad, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::ParamGrad* req,
             ::dgnn_test::NullMessage* resp) {
               return service->server_updateParam(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::NodeMessage* req,
             ::dgnn_test::NullMessage* resp) {
               return service->sendNodes2Wk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::EmbGradMessage, ::dgnn_test::EmbGradMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::EmbGradMessage* req,
             ::dgnn_test::EmbGradMessage* resp) {
               return service->workerPullRmtTrainFeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::NodeMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::NodeMessage* req,
             ::dgnn_test::NullMessage* resp) {
               return service->sendInNodes2Wk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::EmbGradMessage, ::dgnn_test::NullMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::EmbGradMessage* req,
             ::dgnn_test::NullMessage* resp) {
               return service->pushEmbs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DgnnProtoService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DgnnProtoService::Service, ::dgnn_test::NodeMessage, ::dgnn_test::NodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DgnnProtoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dgnn_test::NodeMessage* req,
             ::dgnn_test::NodeMessage* resp) {
               return service->aggregateNodes(ctx, req, resp);
             }, this)));
}

DgnnProtoService::Service::~Service() {
}

::grpc::Status DgnnProtoService::Service::pullDataFromMasterGeneral(::grpc::ServerContext* context, const ::dgnn_test::ContextMessage* request, ::dgnn_test::DataMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::initParameter(::grpc::ServerContext* context, const ::dgnn_test::NetInfoMessage* request, ::dgnn_test::NullMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::barrier(::grpc::ServerContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::workerPullEmb(::grpc::ServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::setAndSendG(::grpc::ServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::sendAccuracy(::grpc::ServerContext* context, const ::dgnn_test::AccuracyMessage* request, ::dgnn_test::AccuracyMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::freeMaster(::grpc::ServerContext* context, const ::dgnn_test::NullMessage* request, ::dgnn_test::NullMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::server_PullParams(::grpc::ServerContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::ParamGrad* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::server_updateParam(::grpc::ServerContext* context, const ::dgnn_test::ParamGrad* request, ::dgnn_test::NullMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::sendNodes2Wk(::grpc::ServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::workerPullRmtTrainFeat(::grpc::ServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::EmbGradMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::sendInNodes2Wk(::grpc::ServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NullMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::pushEmbs(::grpc::ServerContext* context, const ::dgnn_test::EmbGradMessage* request, ::dgnn_test::NullMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DgnnProtoService::Service::aggregateNodes(::grpc::ServerContext* context, const ::dgnn_test::NodeMessage* request, ::dgnn_test::NodeMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dgnn_test

